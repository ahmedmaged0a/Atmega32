
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  00005ec2  00005f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001d4  008001d4  000060ca  2**0
                  ALLOC
  3 .stab         000050c4  00000000  00000000  000060cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020fc  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000d28c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000d40c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000d5df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000f5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0001075e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00011760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00011900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00011bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001246f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_1>
       8:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_2>
       c:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 2e 	call	0x5caa	; 0x5caa <main>
      8a:	0c 94 5f 2f 	jmp	0x5ebe	; 0x5ebe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 2f 	jmp	0x5e50	; 0x5e50 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 2f 	jmp	0x5e88	; 0x5e88 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 2f 	jmp	0x5e50	; 0x5e50 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 2f 	jmp	0x5e88	; 0x5e88 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 2f 	jmp	0x5e70	; 0x5e70 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 2f 	jmp	0x5ea8	; 0x5ea8 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 30 2f 	jmp	0x5e60	; 0x5e60 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 4c 2f 	jmp	0x5e98	; 0x5e98 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <UART_enuInit>:

#include "USART_Private.h"
#include "USART_Config.h"

ES_T UART_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_enuInit+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <UART_enuInit+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     ce2:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8UCSRCval = 0;
     ce4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u8UBRRval = 0;
     ce6:	1a 82       	std	Y+2, r1	; 0x02
     ce8:	19 82       	std	Y+1, r1	; 0x01
#if SPEED_MODE == NORMAL
	UCSRA &=~(CLEAR<<U2X);
     cea:	ab e2       	ldi	r26, 0x2B	; 43
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	eb e2       	ldi	r30, 0x2B	; 43
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8UCSRCval &=~ (CLEAR<<UCSZ0);
	Local_u8UCSRCval |=(SET<<UCSZ1);
	UCSRB &=~(CLEAR<<UCSZ2);
	Local_enuErrorState = ES_OK;
#elif CHARACTER_SIZE == EIGHT
	Local_u8UCSRCval |= (SET<<UCSZ0);
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRCval |= (SET<<UCSZ1);
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &=~(CLEAR<<UCSZ2);
     d08:	aa e2       	ldi	r26, 0x2A	; 42
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e2       	ldi	r30, 0x2A	; 42
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	8c 83       	std	Y+4, r24	; 0x04
#elif UART_MODE == RECIEVER
	UCSRB &=~ (CLEAR<<TXEN);
	UCSRB |= (SET<<RXEN);
	Local_enuErrorState = ES_OK;
#elif UART_MODE == FULL_DOUBLEX
	UCSRB |= (SET<<TXEN);
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	88 60       	ori	r24, 0x08	; 8
     d26:	8c 93       	st	X, r24
	UCSRB |= (SET<<RXEN);
     d28:	aa e2       	ldi	r26, 0x2A	; 42
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e2       	ldi	r30, 0x2A	; 42
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8c 83       	std	Y+4, r24	; 0x04

#if MODE == SYNCRONOUS
	Local_u8UCSRCval |= (SET<<UMSEL);
	Local_enuErrorState = ES_OK;
#elif MODE == ASYNCRONOUS
	Local_u8UCSRCval &=~ (CLEAR<<UMSEL);
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	8f 7b       	andi	r24, 0xBF	; 191
     d3e:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 83       	std	Y+4, r24	; 0x04
#elif PARITY_STATE == ODD_PARITY
	UCSRC |=(SET<<UPM0);
	UCSRC &=~(CLEAR<<UPM1);
	Local_enuErrorState = ES_OK;
#elif PARITY_STATE == DISABLED
	Local_u8UCSRCval &=~(CLEAR<<UPM0);
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	8f 7e       	andi	r24, 0xEF	; 239
     d48:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRCval &=~(CLEAR<<UPM1);
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	8f 7d       	andi	r24, 0xDF	; 223
     d4e:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	8c 83       	std	Y+4, r24	; 0x04
#else
	Local_enuErrorState = ES_NOK;
#endif

#if STOP_STATE == ONE_BIT
	Local_u8UCSRCval &=~(CLEAR<<USBS);
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	87 7f       	andi	r24, 0xF7	; 247
     d58:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8UCSRCval |= (SET<<USBS);
	Local_enuErrorState = ES_OK;
#else
	Local_enuErrorState = ES_NOK;
#endif
	Local_u8UCSRCval |= (SET<<URSEL);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	80 68       	ori	r24, 0x80	; 128
     d62:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRCval;
     d64:	e0 e4       	ldi	r30, 0x40	; 64
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	80 83       	st	Z, r24

	Local_u8UBRRval = BAUD_VALUE(BAUD_RATE);
     d6c:	8c e0       	ldi	r24, 0x0C	; 12
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
	Local_u8UBRRval &= ~(CLEAR<<URSEL_B);
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	9f 77       	andi	r25, 0x7F	; 127
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01

	UBRRL = (u8)Local_u8UBRRval;
     d7e:	e2 e9       	ldi	r30, 0x92	; 146
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	80 83       	st	Z, r24
	UBRRH = (Local_u8UBRRval>>8);
     d86:	e0 e4       	ldi	r30, 0x40	; 64
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	89 2f       	mov	r24, r25
     d90:	99 27       	eor	r25, r25
     d92:	80 83       	st	Z, r24

	return Local_enuErrorState;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <UART_enuSendChar>:

ES_T UART_enuSendChar(u8 Copy_u8Data)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <UART_enuSendChar+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     db0:	19 82       	std	Y+1, r1	; 0x01
	while(!(1&(UCSRA>>UDRE)));
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	82 95       	swap	r24
     dba:	86 95       	lsr	r24
     dbc:	87 70       	andi	r24, 0x07	; 7
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	81 70       	andi	r24, 0x01	; 1
     dc4:	90 70       	andi	r25, 0x00	; 0
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	a1 f3       	breq	.-24     	; 0xdb2 <UART_enuSendChar+0xe>
	UDR = Copy_u8Data;
     dca:	ec e2       	ldi	r30, 0x2C	; 44
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <UART_enuRecieveChar>:

ES_T UART_enuRecieveChar(u8 *Copy_Pu8Data)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <UART_enuRecieveChar+0x6>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     df2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Data != NULL)
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	71 f0       	breq	.+28     	; 0xe18 <UART_enuRecieveChar+0x36>
	{
		while(!(1&(UCSRA>>RXC)));
     dfc:	eb e2       	ldi	r30, 0x2B	; 43
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	dc f7       	brge	.-10     	; 0xdfc <UART_enuRecieveChar+0x1a>
		*Copy_Pu8Data= UDR;
     e06:	ec e2       	ldi	r30, 0x2C	; 44
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	ea 81       	ldd	r30, Y+2	; 0x02
     e0e:	fb 81       	ldd	r31, Y+3	; 0x03
     e10:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <UART_enuRecieveChar+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <UART_enuSendString>:

ES_T UART_enuSendString(const char* Copy_pcData)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <UART_enuSendString+0x6>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9b 83       	std	Y+3, r25	; 0x03
     e38:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     e3a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcData != NULL)
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	9b 81       	ldd	r25, Y+3	; 0x03
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	01 f1       	breq	.+64     	; 0xe84 <UART_enuSendString+0x5a>
	{
		while(!(1&(UCSRA>>UDRE)));
     e44:	eb e2       	ldi	r30, 0x2B	; 43
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	82 95       	swap	r24
     e4c:	86 95       	lsr	r24
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	81 70       	andi	r24, 0x01	; 1
     e56:	90 70       	andi	r25, 0x00	; 0
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	a1 f3       	breq	.-24     	; 0xe44 <UART_enuSendString+0x1a>
     e5c:	0b c0       	rjmp	.+22     	; 0xe74 <UART_enuSendString+0x4a>
		while(*Copy_pcData != '\0')
		{
			UDR = *Copy_pcData;
     e5e:	ac e2       	ldi	r26, 0x2C	; 44
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea 81       	ldd	r30, Y+2	; 0x02
     e64:	fb 81       	ldd	r31, Y+3	; 0x03
     e66:	80 81       	ld	r24, Z
     e68:	8c 93       	st	X, r24
			Copy_pcData++;
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	if(Copy_pcData != NULL)
	{
		while(!(1&(UCSRA>>UDRE)));
		while(*Copy_pcData != '\0')
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	81 f7       	brne	.-32     	; 0xe5e <UART_enuSendString+0x34>
		{
			UDR = *Copy_pcData;
			Copy_pcData++;
		}
		Local_enuErrorState = ES_OK;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <UART_enuRecieveString>:

ES_T UART_enuRecieveString(char *Copy_PcData)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <UART_enuRecieveString+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <UART_enuRecieveString+0x8>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <UART_enuRecieveString+0xa>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
	ES_T Local_enuErrorState = ES_NOK;
     ea8:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Index = 0 , Local_u8Termination=0 , Local_u8Data=0;
     eaa:	1b 82       	std	Y+3, r1	; 0x03
     eac:	1a 82       	std	Y+2, r1	; 0x02
     eae:	19 82       	std	Y+1, r1	; 0x01
	while(!(1&(UCSRA>>RXC)));
     eb0:	eb e2       	ldi	r30, 0x2B	; 43
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	dc f7       	brge	.-10     	; 0xeb0 <UART_enuRecieveString+0x1a>
	Local_u8Termination = UDR;
     eba:	ec e2       	ldi	r30, 0x2C	; 44
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8a 83       	std	Y+2, r24	; 0x02

	while(1)
	{
		while (!((UCSRA>>RXC)&1));
     ec2:	eb e2       	ldi	r30, 0x2B	; 43
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 23       	and	r24, r24
     eca:	dc f7       	brge	.-10     	; 0xec2 <UART_enuRecieveString+0x2c>
		Local_u8Data = UDR;
     ecc:	ec e2       	ldi	r30, 0x2C	; 44
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Data == Local_u8Termination)
     ed4:	99 81       	ldd	r25, Y+1	; 0x01
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	98 17       	cp	r25, r24
     eda:	99 f4       	brne	.+38     	; 0xf02 <UART_enuRecieveString+0x6c>
		{
			Copy_PcData[Local_u8Index] = '\0';
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	fc 01       	movw	r30, r24
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	10 82       	st	Z, r1
		}
		Copy_PcData[Local_u8Index] = Local_u8Data;
		Local_u8Index++;

	}
	return Local_enuErrorState;
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ef0:	26 96       	adiw	r28, 0x06	; 6
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret
		if(Local_u8Data == Local_u8Termination)
		{
			Copy_PcData[Local_u8Index] = '\0';
			break;
		}
		Copy_PcData[Local_u8Index] = Local_u8Data;
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	fc 01       	movw	r30, r24
     f0e:	e2 0f       	add	r30, r18
     f10:	f3 1f       	adc	r31, r19
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
		Local_u8Index++;
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	d2 cf       	rjmp	.-92     	; 0xec2 <UART_enuRecieveString+0x2c>

00000f1e <SPI_enuInitMaster>:
#include "../../LIB/errorState.h"

#include "SPI_Private.h"
#include "SPI_Config.h"
ES_T SPI_enuInitMaster()
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     f28:	19 82       	std	Y+1, r1	; 0x01
	SPCR |= (1<<SPE);
     f2a:	ad e2       	ldi	r26, 0x2D	; 45
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ed e2       	ldi	r30, 0x2D	; 45
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	8c 93       	st	X, r24
	/*Select Master*/
	SPCR |= (1<<MSTR);
     f38:	ad e2       	ldi	r26, 0x2D	; 45
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ed e2       	ldi	r30, 0x2D	; 45
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8c 93       	st	X, r24

	SPCR &= ~(1<<SPR0);
     f46:	ad e2       	ldi	r26, 0x2D	; 45
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ed e2       	ldi	r30, 0x2D	; 45
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	8c 93       	st	X, r24
	SPCR &= ~(1<<SPR1);
     f54:	ad e2       	ldi	r26, 0x2D	; 45
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ed e2       	ldi	r30, 0x2D	; 45
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	8c 93       	st	X, r24

#if DATA_ORDER == MSB_FIRST
	SPCR &=~(1<<DORD);
     f62:	ad e2       	ldi	r26, 0x2D	; 45
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ed e2       	ldi	r30, 0x2D	; 45
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
#else
	Local_enuErrorState = ES_NOK;
#endif

#if SPI_MODE == 0
	SPCR &=~(1<<CPOL);
     f74:	ad e2       	ldi	r26, 0x2D	; 45
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ed e2       	ldi	r30, 0x2D	; 45
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	8c 93       	st	X, r24
	SPCR &=~(1<<CPHA);
     f82:	ad e2       	ldi	r26, 0x2D	; 45
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ed e2       	ldi	r30, 0x2D	; 45
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Double Speed*/
	SPSR |= (1<<SPI2X);
	Local_enuErrorState = ES_OK;
#elif DOUBLE_SPEED == DISABLE
	/*Disable Double Speed*/
	SPCR &=~ (1<<SPI2X);
     f94:	ad e2       	ldi	r26, 0x2D	; 45
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ed e2       	ldi	r30, 0x2D	; 45
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8e 7f       	andi	r24, 0xFE	; 254
     fa0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
#else
	Local_enuErrorState = ES_NOK;
#endif

	return Local_enuErrorState;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <SPI_enuInitSlave>:

ES_T SPI_enuInitSlave()
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     fba:	19 82       	std	Y+1, r1	; 0x01
	/*Enable SPI*/
	SPCR |= (1<<SPE);
     fbc:	ad e2       	ldi	r26, 0x2D	; 45
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ed e2       	ldi	r30, 0x2D	; 45
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24
	/*Select Slave Mode*/
	SPCR &=~(1<<MSTR);
     fca:	ad e2       	ldi	r26, 0x2D	; 45
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ed e2       	ldi	r30, 0x2D	; 45
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	8c 93       	st	X, r24
#if DATA_ORDER == MSB_FIRST
	/*Send MSB bit first*/
	SPCR &=~(1<<DORD);
     fd8:	ad e2       	ldi	r26, 0x2D	; 45
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ed e2       	ldi	r30, 0x2D	; 45
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = ES_NOK;
#endif

#if SPI_MODE == 0
	/*Read on rising edge, write on falling edge    -->Leading = rising*/
	SPCR &=~(1<<CPOL);
     fea:	ad e2       	ldi	r26, 0x2D	; 45
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ed e2       	ldi	r30, 0x2D	; 45
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	8c 93       	st	X, r24
	SPCR &=~(1<<CPHA);
     ff8:	ad e2       	ldi	r26, 0x2D	; 45
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ed e2       	ldi	r30, 0x2D	; 45
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8b 7f       	andi	r24, 0xFB	; 251
    1004:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	SPCR |= (1<<CPHA);
	Local_enuErrorState = ES_OK;
#else
	Local_enuErrorState = ES_NOK;
#endif
	return Local_enuErrorState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <SPI_enuTransceive>:

ES_T SPI_enuTransceive(u8 Copy_u8Data , u8 *Copy_Pu8ExchangedData)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <SPI_enuTransceive+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <SPI_enuTransceive+0x8>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	7c 83       	std	Y+4, r23	; 0x04
    1024:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1026:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Copy_u8Data;
    1028:	ef e2       	ldi	r30, 0x2F	; 47
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	80 83       	st	Z, r24
		/*polling --> Wait Transfer Complete*/
		while(!(1&(SPSR>>SPIF)));
    1030:	ee e2       	ldi	r30, 0x2E	; 46
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <SPI_enuTransceive+0x1c>
		/*Read Data After Exchange*/
		*Copy_Pu8ExchangedData = SPDR;
    103a:	ef e2       	ldi	r30, 0x2F	; 47
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	eb 81       	ldd	r30, Y+3	; 0x03
    1042:	fc 81       	ldd	r31, Y+4	; 0x04
    1044:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    104a:	89 81       	ldd	r24, Y+1	; 0x01
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <GIE_enuInit>:
#include "../../LIB/errorState.h"

#include"GIE_Private.h"

void GIE_enuInit(void)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	SREG |= (BIT_MASKING << BIT_7);
    1062:	af e5       	ldi	r26, 0x5F	; 95
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ef e5       	ldi	r30, 0x5F	; 95
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	80 68       	ori	r24, 0x80	; 128
    106e:	8c 93       	st	X, r24
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <GIE_enuEnable>:

void GIE_enuEnable(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	SREG |= (BIT_MASKING << BIT_7);
    107e:	af e5       	ldi	r26, 0x5F	; 95
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ef e5       	ldi	r30, 0x5F	; 95
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 68       	ori	r24, 0x80	; 128
    108a:	8c 93       	st	X, r24

}
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <GIE_enuDisable>:

void GIE_enuDisable(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	SREG &=~(BIT_MASKING << BIT_7);
    109a:	af e5       	ldi	r26, 0x5F	; 95
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e5       	ldi	r30, 0x5F	; 95
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 77       	andi	r24, 0x7F	; 127
    10a6:	8c 93       	st	X, r24

}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <EXTI_enuInit>:
#include "../Interrupt.h"

static volatile  void (*EXTI_ApfunINTFun[3])(void) = {NULL,NULL,NULL};

ES_T EXTI_enuInit(EXTI_T * Copy_PstrEXTIconfig)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	2c 97       	sbiw	r28, 0x0c	; 12
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    10c6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator = INITIAL_ZERO;
    10c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PstrEXTIconfig != NULL)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <EXTI_enuInit+0x26>
    10d2:	24 c1       	rjmp	.+584    	; 0x131c <EXTI_enuInit+0x26e>
	{
		for(Local_u8Iterator = INITIAL_ZERO ; Local_u8Iterator < MAX_INT_ID ;Local_u8Iterator++)
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	1d c1       	rjmp	.+570    	; 0x1312 <EXTI_enuInit+0x264>
		{
			if(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8Istate == INT_ACTIVE)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9c 01       	movw	r18, r24
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	80 81       	ld	r24, Z
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <EXTI_enuInit+0x48>
    10f4:	0b c1       	rjmp	.+534    	; 0x130c <EXTI_enuInit+0x25e>
			{
				switch(Local_u8Iterator)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3c 87       	std	Y+12, r19	; 0x0c
    10fe:	2b 87       	std	Y+11, r18	; 0x0b
    1100:	8b 85       	ldd	r24, Y+11	; 0x0b
    1102:	9c 85       	ldd	r25, Y+12	; 0x0c
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <EXTI_enuInit+0x5e>
    110a:	68 c0       	rjmp	.+208    	; 0x11dc <EXTI_enuInit+0x12e>
    110c:	2b 85       	ldd	r18, Y+11	; 0x0b
    110e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <EXTI_enuInit+0x6a>
    1116:	bf c0       	rjmp	.+382    	; 0x1296 <EXTI_enuInit+0x1e8>
    1118:	8b 85       	ldd	r24, Y+11	; 0x0b
    111a:	9c 85       	ldd	r25, Y+12	; 0x0c
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	09 f0       	breq	.+2      	; 0x1122 <EXTI_enuInit+0x74>
    1120:	f3 c0       	rjmp	.+486    	; 0x1308 <EXTI_enuInit+0x25a>
				{
				case INT_0:
					GICR |= (BIT_MASKING << GICR_BIT6);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 64       	ori	r24, 0x40	; 64
    112e:	8c 93       	st	X, r24
					MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_0);
    1130:	a5 e5       	ldi	r26, 0x55	; 85
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e5       	ldi	r30, 0x55	; 85
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8c 7f       	andi	r24, 0xFC	; 252
    113c:	8c 93       	st	X, r24
					switch(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8SenceControl)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 01       	movw	r18, r24
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	81 81       	ldd	r24, Z+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3a 87       	std	Y+10, r19	; 0x0a
    115c:	29 87       	std	Y+9, r18	; 0x09
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	91 05       	cpc	r25, r1
    1166:	51 f1       	breq	.+84     	; 0x11bc <EXTI_enuInit+0x10e>
    1168:	29 85       	ldd	r18, Y+9	; 0x09
    116a:	3a 85       	ldd	r19, Y+10	; 0x0a
    116c:	23 30       	cpi	r18, 0x03	; 3
    116e:	31 05       	cpc	r19, r1
    1170:	34 f4       	brge	.+12     	; 0x117e <EXTI_enuInit+0xd0>
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	51 f1       	breq	.+84     	; 0x11d0 <EXTI_enuInit+0x122>
    117c:	2c c0       	rjmp	.+88     	; 0x11d6 <EXTI_enuInit+0x128>
    117e:	29 85       	ldd	r18, Y+9	; 0x09
    1180:	3a 85       	ldd	r19, Y+10	; 0x0a
    1182:	23 30       	cpi	r18, 0x03	; 3
    1184:	31 05       	cpc	r19, r1
    1186:	31 f0       	breq	.+12     	; 0x1194 <EXTI_enuInit+0xe6>
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	91 05       	cpc	r25, r1
    1190:	59 f0       	breq	.+22     	; 0x11a8 <EXTI_enuInit+0xfa>
    1192:	21 c0       	rjmp	.+66     	; 0x11d6 <EXTI_enuInit+0x128>
					{
					case FALLING_EDGE:
						MCUCR |= ( INT0_SET_FALLING<< BIT_0);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	b2 c0       	rjmp	.+356    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					case RISING_EDGE:
						MCUCR |= ( INT0_SET_RISING<< BIT_0);
    11a8:	a5 e5       	ldi	r26, 0x55	; 85
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e5       	ldi	r30, 0x55	; 85
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	83 60       	ori	r24, 0x03	; 3
    11b4:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	a8 c0       	rjmp	.+336    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					case ON_CHANGE:
						MCUCR |= ( INT0_SET_ON_CHANGE<< BIT_0);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	9e c0       	rjmp	.+316    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	9b c0       	rjmp	.+310    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					default:
						Local_enuErrorState = ES_OUTOFRANGE;
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	98 c0       	rjmp	.+304    	; 0x130c <EXTI_enuInit+0x25e>
					}

					break;
					case INT_1:
						GICR |= (BIT_MASKING << GICR_BIT7);
    11dc:	ab e5       	ldi	r26, 0x5B	; 91
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	eb e5       	ldi	r30, 0x5B	; 91
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	8c 93       	st	X, r24
						MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_2);
    11ea:	a5 e5       	ldi	r26, 0x55	; 85
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e5 e5       	ldi	r30, 0x55	; 85
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	83 7f       	andi	r24, 0xF3	; 243
    11f6:	8c 93       	st	X, r24
						switch(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8SenceControl)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c 01       	movw	r18, r24
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	38 87       	std	Y+8, r19	; 0x08
    1216:	2f 83       	std	Y+7, r18	; 0x07
    1218:	8f 81       	ldd	r24, Y+7	; 0x07
    121a:	98 85       	ldd	r25, Y+8	; 0x08
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	51 f1       	breq	.+84     	; 0x1276 <EXTI_enuInit+0x1c8>
    1222:	2f 81       	ldd	r18, Y+7	; 0x07
    1224:	38 85       	ldd	r19, Y+8	; 0x08
    1226:	23 30       	cpi	r18, 0x03	; 3
    1228:	31 05       	cpc	r19, r1
    122a:	34 f4       	brge	.+12     	; 0x1238 <EXTI_enuInit+0x18a>
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	51 f1       	breq	.+84     	; 0x128a <EXTI_enuInit+0x1dc>
    1236:	2c c0       	rjmp	.+88     	; 0x1290 <EXTI_enuInit+0x1e2>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	23 30       	cpi	r18, 0x03	; 3
    123e:	31 05       	cpc	r19, r1
    1240:	31 f0       	breq	.+12     	; 0x124e <EXTI_enuInit+0x1a0>
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	91 05       	cpc	r25, r1
    124a:	59 f0       	breq	.+22     	; 0x1262 <EXTI_enuInit+0x1b4>
    124c:	21 c0       	rjmp	.+66     	; 0x1290 <EXTI_enuInit+0x1e2>
						{
						case FALLING_EDGE:
							MCUCR |= ( INT1_SET_FALLING<< BIT_2);
    124e:	a5 e5       	ldi	r26, 0x55	; 85
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e5       	ldi	r30, 0x55	; 85
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 60       	ori	r24, 0x08	; 8
    125a:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	8a 83       	std	Y+2, r24	; 0x02
    1260:	55 c0       	rjmp	.+170    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						case RISING_EDGE:
							MCUCR |= ( INT1_SET_RISING<< BIT_2);
    1262:	a5 e5       	ldi	r26, 0x55	; 85
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e5       	ldi	r30, 0x55	; 85
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8c 60       	ori	r24, 0x0C	; 12
    126e:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	8a 83       	std	Y+2, r24	; 0x02
    1274:	4b c0       	rjmp	.+150    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						case ON_CHANGE:
							MCUCR |= ( INT1_SET_ON_CHANGE<< BIT_2);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	41 c0       	rjmp	.+130    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						case LOW_LEVEL:
							Local_enuErrorState = ES_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	3e c0       	rjmp	.+124    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						default:
							Local_enuErrorState = ES_OUTOFRANGE;
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	3b c0       	rjmp	.+118    	; 0x130c <EXTI_enuInit+0x25e>
						}
						break;
						case INT_2:

							GICR |= (BIT_MASKING << GICR_BIT5);
    1296:	ab e5       	ldi	r26, 0x5B	; 91
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	eb e5       	ldi	r30, 0x5B	; 91
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	8c 93       	st	X, r24
							switch(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8SenceControl)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9c 01       	movw	r18, r24
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	fc 01       	movw	r30, r24
    12b6:	e2 0f       	add	r30, r18
    12b8:	f3 1f       	adc	r31, r19
    12ba:	81 81       	ldd	r24, Z+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3e 83       	std	Y+6, r19	; 0x06
    12c2:	2d 83       	std	Y+5, r18	; 0x05
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	31 f0       	breq	.+12     	; 0x12da <EXTI_enuInit+0x22c>
    12ce:	2d 81       	ldd	r18, Y+5	; 0x05
    12d0:	3e 81       	ldd	r19, Y+6	; 0x06
    12d2:	24 30       	cpi	r18, 0x04	; 4
    12d4:	31 05       	cpc	r19, r1
    12d6:	59 f0       	breq	.+22     	; 0x12ee <EXTI_enuInit+0x240>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <EXTI_enuInit+0x254>
							{
							case FALLING_EDGE:
								MCUCSR &=~( BIT_MASKING<< BIT_6);
    12da:	a4 e5       	ldi	r26, 0x54	; 84
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e4 e5       	ldi	r30, 0x54	; 84
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
								Local_enuErrorState = ES_OK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	0f c0       	rjmp	.+30     	; 0x130c <EXTI_enuInit+0x25e>
								break;
							case RISING_EDGE:
								MCUCSR |= ( INT2_SET_RISING<< BIT_6);
    12ee:	a4 e5       	ldi	r26, 0x54	; 84
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e4 e5       	ldi	r30, 0x54	; 84
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 64       	ori	r24, 0x40	; 64
    12fa:	8c 93       	st	X, r24
								Local_enuErrorState = ES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	05 c0       	rjmp	.+10     	; 0x130c <EXTI_enuInit+0x25e>
								break;
							default:
								Local_enuErrorState = ES_OUTOFRANGE;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	02 c0       	rjmp	.+4      	; 0x130c <EXTI_enuInit+0x25e>
							}
							break;
							default:
								Local_enuErrorState = ES_OUTOFRANGE;
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	u8 Local_u8Iterator = INITIAL_ZERO;
	if(Copy_PstrEXTIconfig != NULL)
	{
		for(Local_u8Iterator = INITIAL_ZERO ; Local_u8Iterator < MAX_INT_ID ;Local_u8Iterator++)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	08 f4       	brcc	.+2      	; 0x131a <EXTI_enuInit+0x26c>
    1318:	df ce       	rjmp	.-578    	; 0x10d8 <EXTI_enuInit+0x2a>
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <EXTI_enuInit+0x272>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return  Local_enuErrorState;
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1322:	2c 96       	adiw	r28, 0x0c	; 12
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <EXTI_enuSetSenceControl>:

ES_T EXTI_enuSetSenceControl(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceControl)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2b 97       	sbiw	r28, 0x0b	; 11
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    134c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXTI_ID < MAX_INT_ID)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	08 f0       	brcs	.+2      	; 0x1356 <EXTI_enuSetSenceControl+0x22>
    1354:	d6 c0       	rjmp	.+428    	; 0x1502 <EXTI_enuSetSenceControl+0x1ce>
	{
		switch(Copy_u8EXTI_ID)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3b 87       	std	Y+11, r19	; 0x0b
    135e:	2a 87       	std	Y+10, r18	; 0x0a
    1360:	8a 85       	ldd	r24, Y+10	; 0x0a
    1362:	9b 85       	ldd	r25, Y+11	; 0x0b
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <EXTI_enuSetSenceControl+0x38>
    136a:	56 c0       	rjmp	.+172    	; 0x1418 <EXTI_enuSetSenceControl+0xe4>
    136c:	2a 85       	ldd	r18, Y+10	; 0x0a
    136e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <EXTI_enuSetSenceControl+0x44>
    1376:	9b c0       	rjmp	.+310    	; 0x14ae <EXTI_enuSetSenceControl+0x17a>
    1378:	8a 85       	ldd	r24, Y+10	; 0x0a
    137a:	9b 85       	ldd	r25, Y+11	; 0x0b
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	09 f0       	breq	.+2      	; 0x1382 <EXTI_enuSetSenceControl+0x4e>
    1380:	bd c0       	rjmp	.+378    	; 0x14fc <EXTI_enuSetSenceControl+0x1c8>
		{
		case INT_0:
			MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_0);
    1382:	a5 e5       	ldi	r26, 0x55	; 85
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e5       	ldi	r30, 0x55	; 85
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8c 7f       	andi	r24, 0xFC	; 252
    138e:	8c 93       	st	X, r24
			switch(Copy_u8SenceControl)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	39 87       	std	Y+9, r19	; 0x09
    1398:	28 87       	std	Y+8, r18	; 0x08
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	99 85       	ldd	r25, Y+9	; 0x09
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	91 05       	cpc	r25, r1
    13a2:	51 f1       	breq	.+84     	; 0x13f8 <EXTI_enuSetSenceControl+0xc4>
    13a4:	28 85       	ldd	r18, Y+8	; 0x08
    13a6:	39 85       	ldd	r19, Y+9	; 0x09
    13a8:	23 30       	cpi	r18, 0x03	; 3
    13aa:	31 05       	cpc	r19, r1
    13ac:	34 f4       	brge	.+12     	; 0x13ba <EXTI_enuSetSenceControl+0x86>
    13ae:	88 85       	ldd	r24, Y+8	; 0x08
    13b0:	99 85       	ldd	r25, Y+9	; 0x09
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	51 f1       	breq	.+84     	; 0x140c <EXTI_enuSetSenceControl+0xd8>
    13b8:	2c c0       	rjmp	.+88     	; 0x1412 <EXTI_enuSetSenceControl+0xde>
    13ba:	28 85       	ldd	r18, Y+8	; 0x08
    13bc:	39 85       	ldd	r19, Y+9	; 0x09
    13be:	23 30       	cpi	r18, 0x03	; 3
    13c0:	31 05       	cpc	r19, r1
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <EXTI_enuSetSenceControl+0x9c>
    13c4:	88 85       	ldd	r24, Y+8	; 0x08
    13c6:	99 85       	ldd	r25, Y+9	; 0x09
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	91 05       	cpc	r25, r1
    13cc:	59 f0       	breq	.+22     	; 0x13e4 <EXTI_enuSetSenceControl+0xb0>
    13ce:	21 c0       	rjmp	.+66     	; 0x1412 <EXTI_enuSetSenceControl+0xde>
			{
			case FALLING_EDGE:
				MCUCR |= ( INT0_SET_FALLING<< BIT_0);
    13d0:	a5 e5       	ldi	r26, 0x55	; 85
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e5       	ldi	r30, 0x55	; 85
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	82 60       	ori	r24, 0x02	; 2
    13dc:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	91 c0       	rjmp	.+290    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			case RISING_EDGE:
				MCUCR |= ( INT0_SET_RISING<< BIT_0);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	83 60       	ori	r24, 0x03	; 3
    13f0:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	87 c0       	rjmp	.+270    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			case ON_CHANGE:
				MCUCR |= ( INT0_SET_ON_CHANGE<< BIT_0);
    13f8:	a5 e5       	ldi	r26, 0x55	; 85
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e5       	ldi	r30, 0x55	; 85
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	7d c0       	rjmp	.+250    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	7a c0       	rjmp	.+244    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			default:
				Local_enuErrorState = ES_OUTOFRANGE;
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	77 c0       	rjmp	.+238    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
			}
			break;
			case INT_1:
				MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_2);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	83 7f       	andi	r24, 0xF3	; 243
    1424:	8c 93       	st	X, r24
				switch(Copy_u8SenceControl)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3f 83       	std	Y+7, r19	; 0x07
    142e:	2e 83       	std	Y+6, r18	; 0x06
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	91 05       	cpc	r25, r1
    1438:	51 f1       	breq	.+84     	; 0x148e <EXTI_enuSetSenceControl+0x15a>
    143a:	2e 81       	ldd	r18, Y+6	; 0x06
    143c:	3f 81       	ldd	r19, Y+7	; 0x07
    143e:	23 30       	cpi	r18, 0x03	; 3
    1440:	31 05       	cpc	r19, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <EXTI_enuSetSenceControl+0x11c>
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	51 f1       	breq	.+84     	; 0x14a2 <EXTI_enuSetSenceControl+0x16e>
    144e:	2c c0       	rjmp	.+88     	; 0x14a8 <EXTI_enuSetSenceControl+0x174>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	23 30       	cpi	r18, 0x03	; 3
    1456:	31 05       	cpc	r19, r1
    1458:	31 f0       	breq	.+12     	; 0x1466 <EXTI_enuSetSenceControl+0x132>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	84 30       	cpi	r24, 0x04	; 4
    1460:	91 05       	cpc	r25, r1
    1462:	59 f0       	breq	.+22     	; 0x147a <EXTI_enuSetSenceControl+0x146>
    1464:	21 c0       	rjmp	.+66     	; 0x14a8 <EXTI_enuSetSenceControl+0x174>
				{
				case FALLING_EDGE:
					MCUCR |= ( INT1_SET_FALLING<< BIT_2);
    1466:	a5 e5       	ldi	r26, 0x55	; 85
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e5       	ldi	r30, 0x55	; 85
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 60       	ori	r24, 0x08	; 8
    1472:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	46 c0       	rjmp	.+140    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				case RISING_EDGE:
					MCUCR |= ( INT1_SET_RISING<< BIT_2);
    147a:	a5 e5       	ldi	r26, 0x55	; 85
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e5       	ldi	r30, 0x55	; 85
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8c 60       	ori	r24, 0x0C	; 12
    1486:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	3c c0       	rjmp	.+120    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				case ON_CHANGE:
					MCUCR |= ( INT1_SET_ON_CHANGE<< BIT_2);
    148e:	a5 e5       	ldi	r26, 0x55	; 85
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e5       	ldi	r30, 0x55	; 85
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	84 60       	ori	r24, 0x04	; 4
    149a:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	32 c0       	rjmp	.+100    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				case LOW_LEVEL:
					Local_enuErrorState = ES_OK;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	2f c0       	rjmp	.+94     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				default:
					Local_enuErrorState = ES_OUTOFRANGE;
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	2c c0       	rjmp	.+88     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				}
				break;
				case INT_2:
					switch(Copy_u8SenceControl)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3d 83       	std	Y+5, r19	; 0x05
    14b6:	2c 83       	std	Y+4, r18	; 0x04
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	31 f0       	breq	.+12     	; 0x14ce <EXTI_enuSetSenceControl+0x19a>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	24 30       	cpi	r18, 0x04	; 4
    14c8:	31 05       	cpc	r19, r1
    14ca:	59 f0       	breq	.+22     	; 0x14e2 <EXTI_enuSetSenceControl+0x1ae>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <EXTI_enuSetSenceControl+0x1c2>
					{
					case FALLING_EDGE:
						MCUCSR &=~( BIT_MASKING<< BIT_6);
    14ce:	a4 e5       	ldi	r26, 0x54	; 84
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e5       	ldi	r30, 0x54	; 84
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7b       	andi	r24, 0xBF	; 191
    14da:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	12 c0       	rjmp	.+36     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
						break;
					case RISING_EDGE:
						MCUCSR |= ( INT2_SET_RISING<< BIT_6);
    14e2:	a4 e5       	ldi	r26, 0x54	; 84
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e5       	ldi	r30, 0x54	; 84
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 64       	ori	r24, 0x40	; 64
    14ee:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
						break;
					default:
						Local_enuErrorState = ES_OUTOFRANGE;
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					}
					break;
					default:
						Local_enuErrorState = ES_OUTOFRANGE;
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>

	}

	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	2b 96       	adiw	r28, 0x0b	; 11
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <EXTI_enuEnableINT>:

ES_T EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <EXTI_enuEnableINT+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <EXTI_enuEnableINT+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXTI_ID < MAX_INT_ID)
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	a0 f5       	brcc	.+104    	; 0x1598 <EXTI_enuEnableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	99 f0       	breq	.+38     	; 0x156a <EXTI_enuEnableINT+0x50>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	c1 f0       	breq	.+48     	; 0x157e <EXTI_enuEnableINT+0x64>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	f1 f4       	brne	.+60     	; 0x1592 <EXTI_enuEnableINT+0x78>
		{
		case INT_0:
			GICR |= (BIT_MASKING << GICR_BIT6);
    1556:	ab e5       	ldi	r26, 0x5B	; 91
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e5       	ldi	r30, 0x5B	; 91
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	19 c0       	rjmp	.+50     	; 0x159c <EXTI_enuEnableINT+0x82>
			break;
		case INT_1:
			GICR |= (BIT_MASKING << GICR_BIT7);
    156a:	ab e5       	ldi	r26, 0x5B	; 91
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb e5       	ldi	r30, 0x5B	; 91
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	0f c0       	rjmp	.+30     	; 0x159c <EXTI_enuEnableINT+0x82>
			break;
		case INT_2:
			GICR |= (BIT_MASKING << GICR_BIT5);
    157e:	ab e5       	ldi	r26, 0x5B	; 91
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e5       	ldi	r30, 0x5B	; 91
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 62       	ori	r24, 0x20	; 32
    158a:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	05 c0       	rjmp	.+10     	; 0x159c <EXTI_enuEnableINT+0x82>
			break;
		default:
			Local_enuErrorState = ES_OUTOFRANGE;
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	02 c0       	rjmp	.+4      	; 0x159c <EXTI_enuEnableINT+0x82>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <EXTI_enuDisableINT>:

ES_T EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <EXTI_enuDisableINT+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <EXTI_enuDisableINT+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXTI_ID < MAX_INT_ID)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	a0 f5       	brcc	.+104    	; 0x162a <EXTI_enuDisableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	99 f0       	breq	.+38     	; 0x15fc <EXTI_enuDisableINT+0x50>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <EXTI_enuDisableINT+0x64>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	f1 f4       	brne	.+60     	; 0x1624 <EXTI_enuDisableINT+0x78>
		{
		case INT_0:
			GICR &=~ (BIT_MASKING << GICR_BIT6);
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	19 c0       	rjmp	.+50     	; 0x162e <EXTI_enuDisableINT+0x82>
			break;
		case INT_1:
			GICR &=~ (BIT_MASKING << GICR_BIT7);
    15fc:	ab e5       	ldi	r26, 0x5B	; 91
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e5       	ldi	r30, 0x5B	; 91
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8f 77       	andi	r24, 0x7F	; 127
    1608:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0f c0       	rjmp	.+30     	; 0x162e <EXTI_enuDisableINT+0x82>
			break;
		case INT_2:
			GICR &=~ (BIT_MASKING << GICR_BIT5);
    1610:	ab e5       	ldi	r26, 0x5B	; 91
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e5       	ldi	r30, 0x5B	; 91
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7d       	andi	r24, 0xDF	; 223
    161c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	05 c0       	rjmp	.+10     	; 0x162e <EXTI_enuDisableINT+0x82>
			break;
		default:
			Local_enuErrorState = ES_OUTOFRANGE;
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	02 c0       	rjmp	.+4      	; 0x162e <EXTI_enuDisableINT+0x82>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <EXTI_enuCallBack>:
ES_T EXTI_enuCallBack(volatile void(*Copy_Pfun)(void) , u8 Copy_u8EXTI_ID)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <EXTI_enuCallBack+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <EXTI_enuCallBack+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	9b 83       	std	Y+3, r25	; 0x03
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1650:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pfun != NULL)
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	a9 f0       	breq	.+42     	; 0x1684 <EXTI_enuCallBack+0x46>
	{
		if(Copy_u8EXTI_ID < MAX_INT_ID)
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	78 f4       	brcc	.+30     	; 0x167e <EXTI_enuCallBack+0x40>
		{
			EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_Pfun;
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	fc 01       	movw	r30, r24
    166c:	ec 52       	subi	r30, 0x2C	; 44
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <EXTI_enuCallBack+0x4a>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <EXTI_enuCallBack+0x4a>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <__vector_1>:
ISR(VECTOR_INT0)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    16c2:	80 91 d4 01 	lds	r24, 0x01D4
    16c6:	90 91 d5 01 	lds	r25, 0x01D5
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <__vector_1+0x40>
	{
		EXTI_ApfunINTFun[0] ();
    16ce:	e0 91 d4 01 	lds	r30, 0x01D4
    16d2:	f0 91 d5 01 	lds	r31, 0x01D5
    16d6:	09 95       	icall
	}
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_2>:
ISR(VECTOR_INT1)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    1728:	80 91 d6 01 	lds	r24, 0x01D6
    172c:	90 91 d7 01 	lds	r25, 0x01D7
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	29 f0       	breq	.+10     	; 0x173e <__vector_2+0x40>
	{
		EXTI_ApfunINTFun[1] ();
    1734:	e0 91 d6 01 	lds	r30, 0x01D6
    1738:	f0 91 d7 01 	lds	r31, 0x01D7
    173c:	09 95       	icall
	}
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <__vector_3>:
ISR(VECTOR_INT2)
{
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	2f 93       	push	r18
    1770:	3f 93       	push	r19
    1772:	4f 93       	push	r20
    1774:	5f 93       	push	r21
    1776:	6f 93       	push	r22
    1778:	7f 93       	push	r23
    177a:	8f 93       	push	r24
    177c:	9f 93       	push	r25
    177e:	af 93       	push	r26
    1780:	bf 93       	push	r27
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    178e:	80 91 d8 01 	lds	r24, 0x01D8
    1792:	90 91 d9 01 	lds	r25, 0x01D9
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	29 f0       	breq	.+10     	; 0x17a4 <__vector_3+0x40>
	{
		EXTI_ApfunINTFun[2] ();
    179a:	e0 91 d8 01 	lds	r30, 0x01D8
    179e:	f0 91 d9 01 	lds	r31, 0x01D9
    17a2:	09 95       	icall
	}
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <DIO_enuInit>:

#include "DIO_config.h"
#include "DIO_private.h"

ES_T DIO_enuInit(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    17d4:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(DIO_U8PA_PIN7_DIR,DIO_U8PA_PIN6_DIR,DIO_U8PA_PIN5_DIR,DIO_U8PA_PIN4_DIR,DIO_U8PA_PIN3_DIR,DIO_U8PA_PIN2_DIR,DIO_U8PA_PIN1_DIR,DIO_U8PA_PIN0_DIR);
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	80 83       	st	Z, r24
	DDRB = CONC(DIO_U8PB_PIN7_DIR,DIO_U8PB_PIN6_DIR,DIO_U8PB_PIN5_DIR,DIO_U8PB_PIN4_DIR,DIO_U8PB_PIN3_DIR,DIO_U8PB_PIN2_DIR,DIO_U8PB_PIN1_DIR,DIO_U8PB_PIN0_DIR);
    17de:	e7 e3       	ldi	r30, 0x37	; 55
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	80 83       	st	Z, r24
	DDRC = CONC(DIO_U8PC_PIN7_DIR,DIO_U8PC_PIN6_DIR,DIO_U8PC_PIN5_DIR,DIO_U8PC_PIN4_DIR,DIO_U8PC_PIN3_DIR,DIO_U8PC_PIN2_DIR,DIO_U8PC_PIN1_DIR,DIO_U8PC_PIN0_DIR);
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	80 83       	st	Z, r24
	DDRD = CONC(DIO_U8PD_PIN7_DIR,DIO_U8PD_PIN6_DIR,DIO_U8PD_PIN5_DIR,DIO_U8PD_PIN4_DIR,DIO_U8PD_PIN3_DIR,DIO_U8PD_PIN2_DIR,DIO_U8PD_PIN1_DIR,DIO_U8PD_PIN0_DIR);
    17ee:	e1 e3       	ldi	r30, 0x31	; 49
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	80 83       	st	Z, r24

	PORTA = CONC(DIO_U8PA_PIN7_VAL,DIO_U8PA_PIN6_VAL,DIO_U8PA_PIN5_VAL,DIO_U8PA_PIN4_VAL,DIO_U8PA_PIN3_VAL,DIO_U8PA_PIN2_VAL,DIO_U8PA_PIN1_VAL,DIO_U8PA_PIN0_VAL);
    17f6:	eb e3       	ldi	r30, 0x3B	; 59
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	10 82       	st	Z, r1
	PORTB = CONC(DIO_U8PB_PIN7_VAL,DIO_U8PB_PIN6_VAL,DIO_U8PB_PIN5_VAL,DIO_U8PB_PIN4_VAL,DIO_U8PB_PIN3_VAL,DIO_U8PB_PIN2_VAL,DIO_U8PB_PIN1_VAL,DIO_U8PB_PIN0_VAL);
    17fc:	e8 e3       	ldi	r30, 0x38	; 56
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	10 82       	st	Z, r1
	PORTC = CONC(DIO_U8PC_PIN7_VAL,DIO_U8PC_PIN6_VAL,DIO_U8PC_PIN5_VAL,DIO_U8PC_PIN4_VAL,DIO_U8PC_PIN3_VAL,DIO_U8PC_PIN2_VAL,DIO_U8PC_PIN1_VAL,DIO_U8PC_PIN0_VAL);
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	10 82       	st	Z, r1
	PORTD = CONC(DIO_U8PD_PIN7_VAL,DIO_U8PD_PIN6_VAL,DIO_U8PD_PIN5_VAL,DIO_U8PD_PIN4_VAL,DIO_U8PD_PIN3_VAL,DIO_U8PD_PIN2_VAL,DIO_U8PD_PIN1_VAL,DIO_U8PD_PIN0_VAL);
    1808:	e2 e3       	ldi	r30, 0x32	; 50
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <DIO_enuSetPortDirection>:
ES_T DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <DIO_enuSetPortDirection+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <DIO_enuSetPortDirection+0x8>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	8a 83       	std	Y+2, r24	; 0x02
    182c:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    182e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	a8 f5       	brcc	.+106    	; 0x18a0 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3d 83       	std	Y+5, r19	; 0x05
    183e:	2c 83       	std	Y+4, r18	; 0x04
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	d1 f0       	breq	.+52     	; 0x187e <DIO_enuSetPortDirection+0x62>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <DIO_enuSetPortDirection+0x42>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	61 f0       	breq	.+24     	; 0x1874 <DIO_enuSetPortDirection+0x58>
    185c:	1e c0       	rjmp	.+60     	; 0x189a <DIO_enuSetPortDirection+0x7e>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <DIO_enuSetPortDirection+0x6c>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <DIO_enuSetPortDirection+0x76>
    1872:	13 c0       	rjmp	.+38     	; 0x189a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_U8PORTA:
			DDRA = Copy_u8Value;
    1874:	ea e3       	ldi	r30, 0x3A	; 58
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	80 83       	st	Z, r24
    187c:	0e c0       	rjmp	.+28     	; 0x189a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTB:
			DDRB = Copy_u8Value;
    187e:	e7 e3       	ldi	r30, 0x37	; 55
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	80 83       	st	Z, r24
    1886:	09 c0       	rjmp	.+18     	; 0x189a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTC:
			DDRC = Copy_u8Value;
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	80 83       	st	Z, r24
    1890:	04 c0       	rjmp	.+8      	; 0x189a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTD:
			DDRD = Copy_u8Value;
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <DIO_enuSetPortValue>:

ES_T DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <DIO_enuSetPortValue+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <DIO_enuSetPortValue+0x8>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	a8 f5       	brcc	.+106    	; 0x193a <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	91 05       	cpc	r25, r1
    18e2:	d1 f0       	breq	.+52     	; 0x1918 <DIO_enuSetPortValue+0x62>
    18e4:	2c 81       	ldd	r18, Y+4	; 0x04
    18e6:	3d 81       	ldd	r19, Y+5	; 0x05
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <DIO_enuSetPortValue+0x42>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	61 f0       	breq	.+24     	; 0x190e <DIO_enuSetPortValue+0x58>
    18f6:	1e c0       	rjmp	.+60     	; 0x1934 <DIO_enuSetPortValue+0x7e>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	81 f0       	breq	.+32     	; 0x1922 <DIO_enuSetPortValue+0x6c>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	91 05       	cpc	r25, r1
    190a:	81 f0       	breq	.+32     	; 0x192c <DIO_enuSetPortValue+0x76>
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_U8PORTA:
			PORTA = Copy_u8Value;
    190e:	eb e3       	ldi	r30, 0x3B	; 59
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	80 83       	st	Z, r24
    1916:	0e c0       	rjmp	.+28     	; 0x1934 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTB:
			PORTB = Copy_u8Value;
    1918:	e8 e3       	ldi	r30, 0x38	; 56
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	80 83       	st	Z, r24
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTC:
			PORTC = Copy_u8Value;
    1922:	e5 e3       	ldi	r30, 0x35	; 53
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	80 83       	st	Z, r24
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTD:
			PORTD = Copy_u8Value;
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <DIO_enuTogglePortValue>:

ES_T DIO_enuTogglePortValue(u8 Copy_u8PortID)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_enuTogglePortValue+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <DIO_enuTogglePortValue+0x8>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    195e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	08 f0       	brcs	.+2      	; 0x1968 <DIO_enuTogglePortValue+0x18>
    1966:	41 c0       	rjmp	.+130    	; 0x19ea <DIO_enuTogglePortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	3c 83       	std	Y+4, r19	; 0x04
    1970:	2b 83       	std	Y+3, r18	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 05       	cpc	r25, r1
    197a:	e9 f0       	breq	.+58     	; 0x19b6 <DIO_enuTogglePortValue+0x66>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	2c f4       	brge	.+10     	; 0x1990 <DIO_enuTogglePortValue+0x40>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	61 f0       	breq	.+24     	; 0x19a6 <DIO_enuTogglePortValue+0x56>
    198e:	2a c0       	rjmp	.+84     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
    1990:	2b 81       	ldd	r18, Y+3	; 0x03
    1992:	3c 81       	ldd	r19, Y+4	; 0x04
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	b1 f0       	breq	.+44     	; 0x19c6 <DIO_enuTogglePortValue+0x76>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	c9 f0       	breq	.+50     	; 0x19d6 <DIO_enuTogglePortValue+0x86>
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
		{
		case DIO_U8PORTA:
			PORTA = ~PORTA;
    19a6:	ab e3       	ldi	r26, 0x3B	; 59
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 95       	com	r24
    19b2:	8c 93       	st	X, r24
    19b4:	17 c0       	rjmp	.+46     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTB:
			PORTB = ~PORTB;
    19b6:	a8 e3       	ldi	r26, 0x38	; 56
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 95       	com	r24
    19c2:	8c 93       	st	X, r24
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTC:
			PORTC = ~PORTC;
    19c6:	a5 e3       	ldi	r26, 0x35	; 53
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e3       	ldi	r30, 0x35	; 53
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 95       	com	r24
    19d2:	8c 93       	st	X, r24
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTD:
			PORTD = ~PORTD;
    19d6:	a2 e3       	ldi	r26, 0x32	; 50
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	80 95       	com	r24
    19e2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_enuTogglePortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DIO_enuGetPortValue>:

ES_T DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_Pu8Value)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <DIO_enuGetPortValue+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <DIO_enuGetPortValue+0x8>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <DIO_enuGetPortValue+0xa>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
    1a0e:	7c 83       	std	Y+4, r23	; 0x04
    1a10:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1a12:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8Value != NULL)
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <DIO_enuGetPortValue+0x20>
    1a1c:	43 c0       	rjmp	.+134    	; 0x1aa4 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_U8PORTD)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	e8 f5       	brcc	.+122    	; 0x1a9e <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3e 83       	std	Y+6, r19	; 0x06
    1a2c:	2d 83       	std	Y+5, r18	; 0x05
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	e1 f0       	breq	.+56     	; 0x1a70 <DIO_enuGetPortValue+0x72>
    1a38:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <DIO_enuGetPortValue+0x4e>
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <DIO_enuGetPortValue+0x64>
    1a4a:	26 c0       	rjmp	.+76     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
    1a4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	a1 f0       	breq	.+40     	; 0x1a7e <DIO_enuGetPortValue+0x80>
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	b1 f0       	breq	.+44     	; 0x1a8c <DIO_enuGetPortValue+0x8e>
    1a60:	1b c0       	rjmp	.+54     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_U8PORTA:
				*Copy_Pu8Value = PINA;
    1a62:	e9 e3       	ldi	r30, 0x39	; 57
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6c:	80 83       	st	Z, r24
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTB:
				*Copy_Pu8Value = PINB;
    1a70:	e6 e3       	ldi	r30, 0x36	; 54
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	eb 81       	ldd	r30, Y+3	; 0x03
    1a78:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7a:	80 83       	st	Z, r24
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTC:
				*Copy_Pu8Value = PINC;
    1a7e:	e3 e3       	ldi	r30, 0x33	; 51
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	eb 81       	ldd	r30, Y+3	; 0x03
    1a86:	fc 81       	ldd	r31, Y+4	; 0x04
    1a88:	80 83       	st	Z, r24
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTD:
				*Copy_Pu8Value = PIND;
    1a8c:	e0 e3       	ldi	r30, 0x30	; 48
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	eb 81       	ldd	r30, Y+3	; 0x03
    1a94:	fc 81       	ldd	r31, Y+4	; 0x04
    1a96:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	26 96       	adiw	r28, 0x06	; 6
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <DIO_enuSetPinDirection>:
ES_T DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <DIO_enuSetPinDirection+0x6>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <DIO_enuSetPinDirection+0x8>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <DIO_enuSetPinDirection+0xa>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	8a 83       	std	Y+2, r24	; 0x02
    1acc:	6b 83       	std	Y+3, r22	; 0x03
    1ace:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD &&
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	84 30       	cpi	r24, 0x04	; 4
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <DIO_enuSetPinDirection+0x1e>
    1ad8:	d1 c0       	rjmp	.+418    	; 0x1c7c <DIO_enuSetPinDirection+0x1c0>
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 30       	cpi	r24, 0x08	; 8
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <DIO_enuSetPinDirection+0x26>
    1ae0:	cd c0       	rjmp	.+410    	; 0x1c7c <DIO_enuSetPinDirection+0x1c0>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <DIO_enuSetPinDirection+0x2e>
    1ae8:	c9 c0       	rjmp	.+402    	; 0x1c7c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_U8PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch(Copy_u8PortID)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3e 83       	std	Y+6, r19	; 0x06
    1af2:	2d 83       	std	Y+5, r18	; 0x05
    1af4:	6d 81       	ldd	r22, Y+5	; 0x05
    1af6:	7e 81       	ldd	r23, Y+6	; 0x06
    1af8:	61 30       	cpi	r22, 0x01	; 1
    1afa:	71 05       	cpc	r23, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <DIO_enuSetPinDirection+0x44>
    1afe:	41 c0       	rjmp	.+130    	; 0x1b82 <DIO_enuSetPinDirection+0xc6>
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	91 05       	cpc	r25, r1
    1b08:	34 f4       	brge	.+12     	; 0x1b16 <DIO_enuSetPinDirection+0x5a>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	21 15       	cp	r18, r1
    1b10:	31 05       	cpc	r19, r1
    1b12:	71 f0       	breq	.+28     	; 0x1b30 <DIO_enuSetPinDirection+0x74>
    1b14:	b0 c0       	rjmp	.+352    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
    1b16:	6d 81       	ldd	r22, Y+5	; 0x05
    1b18:	7e 81       	ldd	r23, Y+6	; 0x06
    1b1a:	62 30       	cpi	r22, 0x02	; 2
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <DIO_enuSetPinDirection+0x66>
    1b20:	59 c0       	rjmp	.+178    	; 0x1bd4 <DIO_enuSetPinDirection+0x118>
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <DIO_enuSetPinDirection+0x72>
    1b2c:	7c c0       	rjmp	.+248    	; 0x1c26 <DIO_enuSetPinDirection+0x16a>
    1b2e:	a3 c0       	rjmp	.+326    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_U8PORTA:
			DDRA &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1b30:	aa e3       	ldi	r26, 0x3A	; 58
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ea e3       	ldi	r30, 0x3A	; 58
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_enuSetPinDirection+0x90>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	2a 95       	dec	r18
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_enuSetPinDirection+0x8c>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    1b56:	aa e3       	ldi	r26, 0x3A	; 58
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ea e3       	ldi	r30, 0x3A	; 58
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	b9 01       	movw	r22, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_enuSetPinDirection+0xba>
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	8a 95       	dec	r24
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_enuSetPinDirection+0xb6>
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	84 2b       	or	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	7a c0       	rjmp	.+244    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTB:
			DDRB &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1b82:	a7 e3       	ldi	r26, 0x37	; 55
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e7 e3       	ldi	r30, 0x37	; 55
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <DIO_enuSetPinDirection+0xe2>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	2a 95       	dec	r18
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <DIO_enuSetPinDirection+0xde>
    1ba2:	80 95       	com	r24
    1ba4:	84 23       	and	r24, r20
    1ba6:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    1ba8:	a7 e3       	ldi	r26, 0x37	; 55
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e3       	ldi	r30, 0x37	; 55
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_enuSetPinDirection+0x10c>
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_enuSetPinDirection+0x108>
    1bcc:	cb 01       	movw	r24, r22
    1bce:	84 2b       	or	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	51 c0       	rjmp	.+162    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTC:
			DDRC &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1bd4:	a4 e3       	ldi	r26, 0x34	; 52
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e4 e3       	ldi	r30, 0x34	; 52
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_enuSetPinDirection+0x134>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	2a 95       	dec	r18
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_enuSetPinDirection+0x130>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    1bfa:	a4 e3       	ldi	r26, 0x34	; 52
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	b9 01       	movw	r22, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_enuSetPinDirection+0x15e>
    1c16:	66 0f       	add	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	8a 95       	dec	r24
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_enuSetPinDirection+0x15a>
    1c1e:	cb 01       	movw	r24, r22
    1c20:	84 2b       	or	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	28 c0       	rjmp	.+80     	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTD:
			DDRD &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1c26:	a1 e3       	ldi	r26, 0x31	; 49
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e1 e3       	ldi	r30, 0x31	; 49
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_enuSetPinDirection+0x186>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	2a 95       	dec	r18
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_enuSetPinDirection+0x182>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    1c4c:	a1 e3       	ldi	r26, 0x31	; 49
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	b9 01       	movw	r22, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_enuSetPinDirection+0x1b0>
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_enuSetPinDirection+0x1ac>
    1c70:	cb 01       	movw	r24, r22
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c82:	26 96       	adiw	r28, 0x06	; 6
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <DIO_enuSetPinValue>:
ES_T DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <DIO_enuSetPinValue+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <DIO_enuSetPinValue+0x8>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <DIO_enuSetPinValue+0xa>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	8a 83       	std	Y+2, r24	; 0x02
    1ca4:	6b 83       	std	Y+3, r22	; 0x03
    1ca6:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorstate = ES_NOK;
    1ca8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_U8PORTD &&
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <DIO_enuSetPinValue+0x1e>
    1cb0:	d1 c0       	rjmp	.+418    	; 0x1e54 <DIO_enuSetPinValue+0x1c0>
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	88 30       	cpi	r24, 0x08	; 8
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <DIO_enuSetPinValue+0x26>
    1cb8:	cd c0       	rjmp	.+410    	; 0x1e54 <DIO_enuSetPinValue+0x1c0>
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <DIO_enuSetPinValue+0x2e>
    1cc0:	c9 c0       	rjmp	.+402    	; 0x1e54 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_U8PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3e 83       	std	Y+6, r19	; 0x06
    1cca:	2d 83       	std	Y+5, r18	; 0x05
    1ccc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cce:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd0:	61 30       	cpi	r22, 0x01	; 1
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <DIO_enuSetPinValue+0x44>
    1cd6:	41 c0       	rjmp	.+130    	; 0x1d5a <DIO_enuSetPinValue+0xc6>
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	91 05       	cpc	r25, r1
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <DIO_enuSetPinValue+0x5a>
    1ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce6:	21 15       	cp	r18, r1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	71 f0       	breq	.+28     	; 0x1d08 <DIO_enuSetPinValue+0x74>
    1cec:	b0 c0       	rjmp	.+352    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
    1cee:	6d 81       	ldd	r22, Y+5	; 0x05
    1cf0:	7e 81       	ldd	r23, Y+6	; 0x06
    1cf2:	62 30       	cpi	r22, 0x02	; 2
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <DIO_enuSetPinValue+0x66>
    1cf8:	59 c0       	rjmp	.+178    	; 0x1dac <DIO_enuSetPinValue+0x118>
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <DIO_enuSetPinValue+0x72>
    1d04:	7c c0       	rjmp	.+248    	; 0x1dfe <DIO_enuSetPinValue+0x16a>
    1d06:	a3 c0       	rjmp	.+326    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_U8PORTA:
			PORTA &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_enuSetPinValue+0x90>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	2a 95       	dec	r18
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_enuSetPinValue+0x8c>
    1d28:	80 95       	com	r24
    1d2a:	84 23       	and	r24, r20
    1d2c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	b9 01       	movw	r22, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_enuSetPinValue+0xba>
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_enuSetPinValue+0xb6>
    1d52:	cb 01       	movw	r24, r22
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	7a c0       	rjmp	.+244    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTB:
			PORTB &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1d5a:	a8 e3       	ldi	r26, 0x38	; 56
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_enuSetPinValue+0xe2>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	2a 95       	dec	r18
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_enuSetPinValue+0xde>
    1d7a:	80 95       	com	r24
    1d7c:	84 23       	and	r24, r20
    1d7e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1d80:	a8 e3       	ldi	r26, 0x38	; 56
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e8 e3       	ldi	r30, 0x38	; 56
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	b9 01       	movw	r22, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_enuSetPinValue+0x10c>
    1d9c:	66 0f       	add	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	8a 95       	dec	r24
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_enuSetPinValue+0x108>
    1da4:	cb 01       	movw	r24, r22
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	51 c0       	rjmp	.+162    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTC:
			PORTC &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1dac:	a5 e3       	ldi	r26, 0x35	; 53
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e3       	ldi	r30, 0x35	; 53
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <DIO_enuSetPinValue+0x134>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	2a 95       	dec	r18
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <DIO_enuSetPinValue+0x130>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1dd2:	a5 e3       	ldi	r26, 0x35	; 53
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e5 e3       	ldi	r30, 0x35	; 53
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	b9 01       	movw	r22, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_enuSetPinValue+0x15e>
    1dee:	66 0f       	add	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	8a 95       	dec	r24
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_enuSetPinValue+0x15a>
    1df6:	cb 01       	movw	r24, r22
    1df8:	84 2b       	or	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	28 c0       	rjmp	.+80     	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTD:
			PORTD &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1dfe:	a2 e3       	ldi	r26, 0x32	; 50
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e2 e3       	ldi	r30, 0x32	; 50
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_enuSetPinValue+0x186>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	2a 95       	dec	r18
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_enuSetPinValue+0x182>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1e24:	a2 e3       	ldi	r26, 0x32	; 50
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e2 e3       	ldi	r30, 0x32	; 50
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	b9 01       	movw	r22, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_enuSetPinValue+0x1b0>
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	8a 95       	dec	r24
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_enuSetPinValue+0x1ac>
    1e48:	cb 01       	movw	r24, r22
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUTOFRANGE;
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5a:	26 96       	adiw	r28, 0x06	; 6
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <DIO_enuToggelPinValue>:
ES_T DIO_enuToggelPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <DIO_enuToggelPinValue+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <DIO_enuToggelPinValue+0x8>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_U8PORTD &&
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <DIO_enuToggelPinValue+0x1c>
    1e86:	75 c0       	rjmp	.+234    	; 0x1f72 <DIO_enuToggelPinValue+0x106>
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <DIO_enuToggelPinValue+0x24>
    1e8e:	71 c0       	rjmp	.+226    	; 0x1f72 <DIO_enuToggelPinValue+0x106>
			Copy_u8PinID <= DIO_U8PIN7)
	{
		switch (Copy_u8PortID)
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	3d 83       	std	Y+5, r19	; 0x05
    1e98:	2c 83       	std	Y+4, r18	; 0x04
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	49 f1       	breq	.+82     	; 0x1ef6 <DIO_enuToggelPinValue+0x8a>
    1ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea8:	22 30       	cpi	r18, 0x02	; 2
    1eaa:	31 05       	cpc	r19, r1
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <DIO_enuToggelPinValue+0x4c>
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	61 f0       	breq	.+24     	; 0x1ece <DIO_enuToggelPinValue+0x62>
    1eb6:	5a c0       	rjmp	.+180    	; 0x1f6c <DIO_enuToggelPinValue+0x100>
    1eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eba:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	71 f1       	breq	.+92     	; 0x1f1e <DIO_enuToggelPinValue+0xb2>
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	e9 f1       	breq	.+122    	; 0x1f46 <DIO_enuToggelPinValue+0xda>
    1ecc:	4f c0       	rjmp	.+158    	; 0x1f6c <DIO_enuToggelPinValue+0x100>
		{
		case DIO_U8PORTA:
			PORTA ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1ece:	ab e3       	ldi	r26, 0x3B	; 59
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	eb e3       	ldi	r30, 0x3B	; 59
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_enuToggelPinValue+0x80>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_enuToggelPinValue+0x7c>
    1ef0:	84 27       	eor	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	3b c0       	rjmp	.+118    	; 0x1f6c <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTB:
			PORTB ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1ef6:	a8 e3       	ldi	r26, 0x38	; 56
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e8 e3       	ldi	r30, 0x38	; 56
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_enuToggelPinValue+0xa8>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_enuToggelPinValue+0xa4>
    1f18:	84 27       	eor	r24, r20
    1f1a:	8c 93       	st	X, r24
    1f1c:	27 c0       	rjmp	.+78     	; 0x1f6c <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTC:
			PORTC ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1f1e:	a5 e3       	ldi	r26, 0x35	; 53
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e5 e3       	ldi	r30, 0x35	; 53
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_enuToggelPinValue+0xd0>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_enuToggelPinValue+0xcc>
    1f40:	84 27       	eor	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	13 c0       	rjmp	.+38     	; 0x1f6c <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTD:
			PORTD ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1f46:	a2 e3       	ldi	r26, 0x32	; 50
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e2 e3       	ldi	r30, 0x32	; 50
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_enuToggelPinValue+0xf8>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_enuToggelPinValue+0xf4>
    1f68:	84 27       	eor	r24, r20
    1f6a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_enuToggelPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <DIO_enuGetPinValue>:
ES_T DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 * Copy_Pu8Value)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	27 97       	sbiw	r28, 0x07	; 7
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
    1f9e:	6b 83       	std	Y+3, r22	; 0x03
    1fa0:	5d 83       	std	Y+5, r21	; 0x05
    1fa2:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1fa4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pu8Value != NULL)
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <DIO_enuGetPinValue+0x28>
    1fae:	7e c0       	rjmp	.+252    	; 0x20ac <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_U8PORTD &&
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <DIO_enuGetPinValue+0x30>
    1fb6:	77 c0       	rjmp	.+238    	; 0x20a6 <DIO_enuGetPinValue+0x11e>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 30       	cpi	r24, 0x08	; 8
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <DIO_enuGetPinValue+0x38>
    1fbe:	73 c0       	rjmp	.+230    	; 0x20a6 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_U8PIN7)
		{
			switch (Copy_u8PortID)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3f 83       	std	Y+7, r19	; 0x07
    1fc8:	2e 83       	std	Y+6, r18	; 0x06
    1fca:	4e 81       	ldd	r20, Y+6	; 0x06
    1fcc:	5f 81       	ldd	r21, Y+7	; 0x07
    1fce:	41 30       	cpi	r20, 0x01	; 1
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	59 f1       	breq	.+86     	; 0x202a <DIO_enuGetPinValue+0xa2>
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	91 05       	cpc	r25, r1
    1fdc:	34 f4       	brge	.+12     	; 0x1fea <DIO_enuGetPinValue+0x62>
    1fde:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fe2:	21 15       	cp	r18, r1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	69 f0       	breq	.+26     	; 0x2002 <DIO_enuGetPinValue+0x7a>
    1fe8:	5b c0       	rjmp	.+182    	; 0x20a0 <DIO_enuGetPinValue+0x118>
    1fea:	4e 81       	ldd	r20, Y+6	; 0x06
    1fec:	5f 81       	ldd	r21, Y+7	; 0x07
    1fee:	42 30       	cpi	r20, 0x02	; 2
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	79 f1       	breq	.+94     	; 0x2052 <DIO_enuGetPinValue+0xca>
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <DIO_enuGetPinValue+0x78>
    1ffe:	3d c0       	rjmp	.+122    	; 0x207a <DIO_enuGetPinValue+0xf2>
    2000:	4f c0       	rjmp	.+158    	; 0x20a0 <DIO_enuGetPinValue+0x118>
			{
			case DIO_U8PORTA:
				*Copy_Pu8Value = ((PINA>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    2002:	e9 e3       	ldi	r30, 0x39	; 57
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a9 01       	movw	r20, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_enuGetPinValue+0x92>
    2016:	55 95       	asr	r21
    2018:	47 95       	ror	r20
    201a:	8a 95       	dec	r24
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_enuGetPinValue+0x8e>
    201e:	ca 01       	movw	r24, r20
    2020:	81 70       	andi	r24, 0x01	; 1
    2022:	ec 81       	ldd	r30, Y+4	; 0x04
    2024:	fd 81       	ldd	r31, Y+5	; 0x05
    2026:	80 83       	st	Z, r24
    2028:	3b c0       	rjmp	.+118    	; 0x20a0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_U8PORTB:
				*Copy_Pu8Value = ((PINB>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    202a:	e6 e3       	ldi	r30, 0x36	; 54
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a9 01       	movw	r20, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <DIO_enuGetPinValue+0xba>
    203e:	55 95       	asr	r21
    2040:	47 95       	ror	r20
    2042:	8a 95       	dec	r24
    2044:	e2 f7       	brpl	.-8      	; 0x203e <DIO_enuGetPinValue+0xb6>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	ec 81       	ldd	r30, Y+4	; 0x04
    204c:	fd 81       	ldd	r31, Y+5	; 0x05
    204e:	80 83       	st	Z, r24
    2050:	27 c0       	rjmp	.+78     	; 0x20a0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_U8PORTC:
				*Copy_Pu8Value = ((PINC>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    2052:	e3 e3       	ldi	r30, 0x33	; 51
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a9 01       	movw	r20, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_enuGetPinValue+0xe2>
    2066:	55 95       	asr	r21
    2068:	47 95       	ror	r20
    206a:	8a 95       	dec	r24
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_enuGetPinValue+0xde>
    206e:	ca 01       	movw	r24, r20
    2070:	81 70       	andi	r24, 0x01	; 1
    2072:	ec 81       	ldd	r30, Y+4	; 0x04
    2074:	fd 81       	ldd	r31, Y+5	; 0x05
    2076:	80 83       	st	Z, r24
    2078:	13 c0       	rjmp	.+38     	; 0x20a0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_U8PORTD:
				*Copy_Pu8Value = ((PIND>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    207a:	e0 e3       	ldi	r30, 0x30	; 48
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a9 01       	movw	r20, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_enuGetPinValue+0x10a>
    208e:	55 95       	asr	r21
    2090:	47 95       	ror	r20
    2092:	8a 95       	dec	r24
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_enuGetPinValue+0x106>
    2096:	ca 01       	movw	r24, r20
    2098:	81 70       	andi	r24, 0x01	; 1
    209a:	ec 81       	ldd	r30, Y+4	; 0x04
    209c:	fd 81       	ldd	r31, Y+5	; 0x05
    209e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b2:	27 96       	adiw	r28, 0x07	; 7
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <SW_enuInit>:
#include "Switch_Config.h"

#include "../../MCAL/DIO/DIO_Interface.h"

ES_T SW_enuInit(SW_T * Copy_PstrSwState)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <SW_enuInit+0x6>
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <SW_enuInit+0x8>
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    20d4:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PstrSwState != NULL)
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <SW_enuInit+0x1c>
    20de:	5d c0       	rjmp	.+186    	; 0x219a <SW_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    20e0:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
    20e2:	19 82       	std	Y+1, r1	; 0x01
    20e4:	55 c0       	rjmp	.+170    	; 0x2190 <SW_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_PstrSwState[Local_u8Iterator].SW_PortID ,Copy_PstrSwState[Local_u8Iterator].SW_PinID,DIO_u8INPUT);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	c9 01       	movw	r24, r18
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	28 0f       	add	r18, r24
    20f4:	39 1f       	adc	r19, r25
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	40 81       	ld	r20, Z
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	c9 01       	movw	r24, r18
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	28 0f       	add	r18, r24
    2110:	39 1f       	adc	r19, r25
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	fc 01       	movw	r30, r24
    2118:	e2 0f       	add	r30, r18
    211a:	f3 1f       	adc	r31, r19
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	84 2f       	mov	r24, r20
    2120:	69 2f       	mov	r22, r25
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    2128:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PstrSwState[Local_u8Iterator].SW_PortID ,Copy_PstrSwState[Local_u8Iterator].SW_PinID,Copy_PstrSwState[Local_u8Iterator].SW_Status);
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	c9 01       	movw	r24, r18
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	28 0f       	add	r18, r24
    2138:	39 1f       	adc	r19, r25
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	fc 01       	movw	r30, r24
    2140:	e2 0f       	add	r30, r18
    2142:	f3 1f       	adc	r31, r19
    2144:	50 81       	ld	r21, Z
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	c9 01       	movw	r24, r18
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	28 0f       	add	r18, r24
    2154:	39 1f       	adc	r19, r25
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	fc 01       	movw	r30, r24
    215c:	e2 0f       	add	r30, r18
    215e:	f3 1f       	adc	r31, r19
    2160:	41 81       	ldd	r20, Z+1	; 0x01
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	c9 01       	movw	r24, r18
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	28 0f       	add	r18, r24
    2170:	39 1f       	adc	r19, r25
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	92 81       	ldd	r25, Z+2	; 0x02
    217e:	85 2f       	mov	r24, r21
    2180:	64 2f       	mov	r22, r20
    2182:	49 2f       	mov	r20, r25
    2184:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2188:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	if(Copy_PstrSwState != NULL)
	{
		u8 Local_u8Iterator = 0;
		for(Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	08 f4       	brcc	.+2      	; 0x2198 <SW_enuInit+0xd4>
    2196:	a7 cf       	rjmp	.-178    	; 0x20e6 <SW_enuInit+0x22>
    2198:	02 c0       	rjmp	.+4      	; 0x219e <SW_enuInit+0xda>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <SW_enuGetState>:

ES_T SW_enuGetState(SW_T * Copy_PstrSwState , u8 * Copy_Pu8SwState)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <SW_enuGetState+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <SW_enuGetState+0x8>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9b 83       	std	Y+3, r25	; 0x03
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	7d 83       	std	Y+5, r23	; 0x05
    21c2:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    21c4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PstrSwState != NULL && Copy_Pu8SwState != NULL)
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	91 f0       	breq	.+36     	; 0x21f2 <SW_enuGetState+0x44>
    21ce:	8c 81       	ldd	r24, Y+4	; 0x04
    21d0:	9d 81       	ldd	r25, Y+5	; 0x05
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	71 f0       	breq	.+28     	; 0x21f2 <SW_enuGetState+0x44>
	{
			Local_enuErrorState = DIO_enuGetPinValue(Copy_PstrSwState->SW_PortID ,Copy_PstrSwState->SW_PinID , Copy_Pu8SwState);
    21d6:	ea 81       	ldd	r30, Y+2	; 0x02
    21d8:	fb 81       	ldd	r31, Y+3	; 0x03
    21da:	80 81       	ld	r24, Z
    21dc:	ea 81       	ldd	r30, Y+2	; 0x02
    21de:	fb 81       	ldd	r31, Y+3	; 0x03
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	2c 81       	ldd	r18, Y+4	; 0x04
    21e4:	3d 81       	ldd	r19, Y+5	; 0x05
    21e6:	69 2f       	mov	r22, r25
    21e8:	a9 01       	movw	r20, r18
    21ea:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_enuGetPinValue>
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <SW_enuGetState+0x48>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <LED_enuInit>:
#include "LED_Private.h"

#include "../../MCAL/DIO/DIO_interface.h"

ES_T LED_enuInit(LED_T *Copy_AstrLedConfig)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	00 d0       	rcall	.+0      	; 0x220e <LED_enuInit+0x6>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <LED_enuInit+0x8>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    2218:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_AstrLedConfig != NULL)
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	09 f4       	brne	.+2      	; 0x2224 <LED_enuInit+0x1c>
    2222:	23 c1       	rjmp	.+582    	; 0x246a <LED_enuInit+0x262>
	{
		u8 Local_u8Iterator=0;
    2224:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator=0 ; Local_u8Iterator < LED_NUM ; Local_u8Iterator++)
    2226:	19 82       	std	Y+1, r1	; 0x01
    2228:	1b c1       	rjmp	.+566    	; 0x2460 <LED_enuInit+0x258>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8OUTPUT);
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9c 01       	movw	r18, r24
    2232:	22 0f       	add	r18, r18
    2234:	33 1f       	adc	r19, r19
    2236:	22 0f       	add	r18, r18
    2238:	33 1f       	adc	r19, r19
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	40 81       	ld	r20, Z
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 01       	movw	r18, r24
    224e:	22 0f       	add	r18, r18
    2250:	33 1f       	adc	r19, r19
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	fc 01       	movw	r30, r24
    225c:	e2 0f       	add	r30, r18
    225e:	f3 1f       	adc	r31, r19
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	84 2f       	mov	r24, r20
    2264:	69 2f       	mov	r22, r25
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    226c:	8a 83       	std	Y+2, r24	; 0x02
			if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_U8SINK)
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 01       	movw	r18, r24
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	22 0f       	add	r18, r18
    227c:	33 1f       	adc	r19, r19
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	fc 01       	movw	r30, r24
    2284:	e2 0f       	add	r30, r18
    2286:	f3 1f       	adc	r31, r19
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	88 23       	and	r24, r24
    228c:	09 f0       	breq	.+2      	; 0x2290 <LED_enuInit+0x88>
    228e:	69 c0       	rjmp	.+210    	; 0x2362 <LED_enuInit+0x15a>
			{
				if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8ON)
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9c 01       	movw	r18, r24
    2298:	22 0f       	add	r18, r18
    229a:	33 1f       	adc	r19, r19
    229c:	22 0f       	add	r18, r18
    229e:	33 1f       	adc	r19, r19
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	fc 01       	movw	r30, r24
    22a6:	e2 0f       	add	r30, r18
    22a8:	f3 1f       	adc	r31, r19
    22aa:	83 81       	ldd	r24, Z+3	; 0x03
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	19 f5       	brne	.+70     	; 0x22f6 <LED_enuInit+0xee>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8LOW);
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9c 01       	movw	r18, r24
    22b8:	22 0f       	add	r18, r18
    22ba:	33 1f       	adc	r19, r19
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	40 81       	ld	r20, Z
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9c 01       	movw	r18, r24
    22d4:	22 0f       	add	r18, r18
    22d6:	33 1f       	adc	r19, r19
    22d8:	22 0f       	add	r18, r18
    22da:	33 1f       	adc	r19, r19
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	84 2f       	mov	r24, r20
    22ea:	69 2f       	mov	r22, r25
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	b2 c0       	rjmp	.+356    	; 0x245a <LED_enuInit+0x252>
				}
				else if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8OFF)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 01       	movw	r18, r24
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	fc 01       	movw	r30, r24
    230c:	e2 0f       	add	r30, r18
    230e:	f3 1f       	adc	r31, r19
    2310:	83 81       	ldd	r24, Z+3	; 0x03
    2312:	88 23       	and	r24, r24
    2314:	19 f5       	brne	.+70     	; 0x235c <LED_enuInit+0x154>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8HIGH);
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9c 01       	movw	r18, r24
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	fc 01       	movw	r30, r24
    232c:	e2 0f       	add	r30, r18
    232e:	f3 1f       	adc	r31, r19
    2330:	40 81       	ld	r20, Z
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9c 01       	movw	r18, r24
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	22 0f       	add	r18, r18
    2340:	33 1f       	adc	r19, r19
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	84 2f       	mov	r24, r20
    2350:	69 2f       	mov	r22, r25
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	7f c0       	rjmp	.+254    	; 0x245a <LED_enuInit+0x252>
				}
				else
				{
					Local_enuErrorState = ES_OUTOFRANGE;
    235c:	83 e0       	ldi	r24, 0x03	; 3
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	7c c0       	rjmp	.+248    	; 0x245a <LED_enuInit+0x252>
				}
			}
			else if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_U8SOURCE)
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9c 01       	movw	r18, r24
    236a:	22 0f       	add	r18, r18
    236c:	33 1f       	adc	r19, r19
    236e:	22 0f       	add	r18, r18
    2370:	33 1f       	adc	r19, r19
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	09 f0       	breq	.+2      	; 0x2384 <LED_enuInit+0x17c>
    2382:	69 c0       	rjmp	.+210    	; 0x2456 <LED_enuInit+0x24e>
			{
				if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8ON)
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9c 01       	movw	r18, r24
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	22 0f       	add	r18, r18
    2392:	33 1f       	adc	r19, r19
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	fc 01       	movw	r30, r24
    239a:	e2 0f       	add	r30, r18
    239c:	f3 1f       	adc	r31, r19
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	19 f5       	brne	.+70     	; 0x23ea <LED_enuInit+0x1e2>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8HIGH);
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 01       	movw	r18, r24
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	fc 01       	movw	r30, r24
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	40 81       	ld	r20, Z
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9c 01       	movw	r18, r24
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	fc 01       	movw	r30, r24
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	84 2f       	mov	r24, r20
    23de:	69 2f       	mov	r22, r25
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    23e6:	8a 83       	std	Y+2, r24	; 0x02
    23e8:	38 c0       	rjmp	.+112    	; 0x245a <LED_enuInit+0x252>
				}
				else if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8OFF)
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9c 01       	movw	r18, r24
    23f2:	22 0f       	add	r18, r18
    23f4:	33 1f       	adc	r19, r19
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	fc 01       	movw	r30, r24
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	83 81       	ldd	r24, Z+3	; 0x03
    2406:	88 23       	and	r24, r24
    2408:	19 f5       	brne	.+70     	; 0x2450 <LED_enuInit+0x248>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8LOW);
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9c 01       	movw	r18, r24
    2412:	22 0f       	add	r18, r18
    2414:	33 1f       	adc	r19, r19
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	fc 01       	movw	r30, r24
    2420:	e2 0f       	add	r30, r18
    2422:	f3 1f       	adc	r31, r19
    2424:	40 81       	ld	r20, Z
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 01       	movw	r18, r24
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	fc 01       	movw	r30, r24
    243c:	e2 0f       	add	r30, r18
    243e:	f3 1f       	adc	r31, r19
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	84 2f       	mov	r24, r20
    2444:	69 2f       	mov	r22, r25
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	05 c0       	rjmp	.+10     	; 0x245a <LED_enuInit+0x252>
				}
				else
				{
					Local_enuErrorState = ES_OUTOFRANGE;
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	8a 83       	std	Y+2, r24	; 0x02
    2454:	02 c0       	rjmp	.+4      	; 0x245a <LED_enuInit+0x252>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	if(Copy_AstrLedConfig != NULL)
	{
		u8 Local_u8Iterator=0;
		for(Local_u8Iterator=0 ; Local_u8Iterator < LED_NUM ; Local_u8Iterator++)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	08 f4       	brcc	.+2      	; 0x2468 <LED_enuInit+0x260>
    2466:	e1 ce       	rjmp	.-574    	; 0x222a <LED_enuInit+0x22>
    2468:	02 c0       	rjmp	.+4      	; 0x246e <LED_enuInit+0x266>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <LED_enuTurnOn>:

ES_T LED_enuTurnOn(LED_T *Copy_AstrLedConfig , u8 Copy_u8LedNum)
{
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <LED_enuTurnOn+0x6>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <LED_enuTurnOn+0x8>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9b 83       	std	Y+3, r25	; 0x03
    248c:	8a 83       	std	Y+2, r24	; 0x02
    248e:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    2490:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrLedConfig != NULL)
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	9b 81       	ldd	r25, Y+3	; 0x03
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	09 f4       	brne	.+2      	; 0x249c <LED_enuTurnOn+0x1e>
    249a:	70 c0       	rjmp	.+224    	; 0x257c <LED_enuTurnOn+0xfe>
	{
		if(Copy_u8LedNum < LED_NUM)
    249c:	8c 81       	ldd	r24, Y+4	; 0x04
    249e:	83 30       	cpi	r24, 0x03	; 3
    24a0:	08 f0       	brcs	.+2      	; 0x24a4 <LED_enuTurnOn+0x26>
    24a2:	69 c0       	rjmp	.+210    	; 0x2576 <LED_enuTurnOn+0xf8>
		{
			if(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SINK)
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 01       	movw	r18, r24
    24ac:	22 0f       	add	r18, r18
    24ae:	33 1f       	adc	r19, r19
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	88 23       	and	r24, r24
    24c2:	19 f5       	brne	.+70     	; 0x250a <LED_enuTurnOn+0x8c>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8LOW);
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9c 01       	movw	r18, r24
    24cc:	22 0f       	add	r18, r18
    24ce:	33 1f       	adc	r19, r19
    24d0:	22 0f       	add	r18, r18
    24d2:	33 1f       	adc	r19, r19
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	fc 01       	movw	r30, r24
    24da:	e2 0f       	add	r30, r18
    24dc:	f3 1f       	adc	r31, r19
    24de:	40 81       	ld	r20, Z
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	88 2f       	mov	r24, r24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9c 01       	movw	r18, r24
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	22 0f       	add	r18, r18
    24ee:	33 1f       	adc	r19, r19
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	9b 81       	ldd	r25, Y+3	; 0x03
    24f4:	fc 01       	movw	r30, r24
    24f6:	e2 0f       	add	r30, r18
    24f8:	f3 1f       	adc	r31, r19
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	84 2f       	mov	r24, r20
    24fe:	69 2f       	mov	r22, r25
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	3b c0       	rjmp	.+118    	; 0x2580 <LED_enuTurnOn+0x102>
			}
			else if (Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SOURCE)
    250a:	8c 81       	ldd	r24, Y+4	; 0x04
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9c 01       	movw	r18, r24
    2512:	22 0f       	add	r18, r18
    2514:	33 1f       	adc	r19, r19
    2516:	22 0f       	add	r18, r18
    2518:	33 1f       	adc	r19, r19
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	fc 01       	movw	r30, r24
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	19 f5       	brne	.+70     	; 0x2570 <LED_enuTurnOn+0xf2>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8HIGH);
    252a:	8c 81       	ldd	r24, Y+4	; 0x04
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9c 01       	movw	r18, r24
    2532:	22 0f       	add	r18, r18
    2534:	33 1f       	adc	r19, r19
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	fc 01       	movw	r30, r24
    2540:	e2 0f       	add	r30, r18
    2542:	f3 1f       	adc	r31, r19
    2544:	40 81       	ld	r20, Z
    2546:	8c 81       	ldd	r24, Y+4	; 0x04
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9c 01       	movw	r18, r24
    254e:	22 0f       	add	r18, r18
    2550:	33 1f       	adc	r19, r19
    2552:	22 0f       	add	r18, r18
    2554:	33 1f       	adc	r19, r19
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	9b 81       	ldd	r25, Y+3	; 0x03
    255a:	fc 01       	movw	r30, r24
    255c:	e2 0f       	add	r30, r18
    255e:	f3 1f       	adc	r31, r19
    2560:	91 81       	ldd	r25, Z+1	; 0x01
    2562:	84 2f       	mov	r24, r20
    2564:	69 2f       	mov	r22, r25
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	08 c0       	rjmp	.+16     	; 0x2580 <LED_enuTurnOn+0x102>
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	05 c0       	rjmp	.+10     	; 0x2580 <LED_enuTurnOn+0x102>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <LED_enuTurnOn+0x102>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <LED_enuTurnOff>:

ES_T LED_enuTurnOff(LED_T *Copy_AstrLedConfig , u8 Copy_u8LedNum)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <LED_enuTurnOff+0x6>
    2596:	00 d0       	rcall	.+0      	; 0x2598 <LED_enuTurnOff+0x8>
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	9b 83       	std	Y+3, r25	; 0x03
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    25a2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrLedConfig != NULL)
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	09 f4       	brne	.+2      	; 0x25ae <LED_enuTurnOff+0x1e>
    25ac:	70 c0       	rjmp	.+224    	; 0x268e <LED_enuTurnOff+0xfe>
	{
		if(Copy_u8LedNum < LED_NUM)
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	83 30       	cpi	r24, 0x03	; 3
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <LED_enuTurnOff+0x26>
    25b4:	69 c0       	rjmp	.+210    	; 0x2688 <LED_enuTurnOff+0xf8>
		{
			if(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SINK)
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9c 01       	movw	r18, r24
    25be:	22 0f       	add	r18, r18
    25c0:	33 1f       	adc	r19, r19
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	88 23       	and	r24, r24
    25d4:	19 f5       	brne	.+70     	; 0x261c <LED_enuTurnOff+0x8c>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8HIGH);
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9c 01       	movw	r18, r24
    25de:	22 0f       	add	r18, r18
    25e0:	33 1f       	adc	r19, r19
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	40 81       	ld	r20, Z
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9c 01       	movw	r18, r24
    25fa:	22 0f       	add	r18, r18
    25fc:	33 1f       	adc	r19, r19
    25fe:	22 0f       	add	r18, r18
    2600:	33 1f       	adc	r19, r19
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	fc 01       	movw	r30, r24
    2608:	e2 0f       	add	r30, r18
    260a:	f3 1f       	adc	r31, r19
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	84 2f       	mov	r24, r20
    2610:	69 2f       	mov	r22, r25
    2612:	41 e0       	ldi	r20, 0x01	; 1
    2614:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	3b c0       	rjmp	.+118    	; 0x2692 <LED_enuTurnOff+0x102>
			}
			else if (Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SOURCE)
    261c:	8c 81       	ldd	r24, Y+4	; 0x04
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 01       	movw	r18, r24
    2624:	22 0f       	add	r18, r18
    2626:	33 1f       	adc	r19, r19
    2628:	22 0f       	add	r18, r18
    262a:	33 1f       	adc	r19, r19
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	9b 81       	ldd	r25, Y+3	; 0x03
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	19 f5       	brne	.+70     	; 0x2682 <LED_enuTurnOff+0xf2>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8LOW);
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9c 01       	movw	r18, r24
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	22 0f       	add	r18, r18
    264a:	33 1f       	adc	r19, r19
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	40 81       	ld	r20, Z
    2658:	8c 81       	ldd	r24, Y+4	; 0x04
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 01       	movw	r18, r24
    2660:	22 0f       	add	r18, r18
    2662:	33 1f       	adc	r19, r19
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	84 2f       	mov	r24, r20
    2676:	69 2f       	mov	r22, r25
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	08 c0       	rjmp	.+16     	; 0x2692 <LED_enuTurnOff+0x102>
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2682:	83 e0       	ldi	r24, 0x03	; 3
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <LED_enuTurnOff+0x102>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <LED_enuTurnOff+0x102>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2692:	89 81       	ldd	r24, Y+1	; 0x01
}
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <LED_enuGetState>:

ES_T LED_enuGetState(LED_T *Copy_AstrLedConfig ,u8 Copy_u8LedNum, u8 *Copy_u8LedState)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <LED_enuGetState+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <LED_enuGetState+0x8>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <LED_enuGetState+0xa>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9b 83       	std	Y+3, r25	; 0x03
    26b2:	8a 83       	std	Y+2, r24	; 0x02
    26b4:	6c 83       	std	Y+4, r22	; 0x04
    26b6:	5e 83       	std	Y+6, r21	; 0x06
    26b8:	4d 83       	std	Y+5, r20	; 0x05
	ES_T Local_enuErrorState = ES_NOK;
    26ba:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_AstrLedConfig != NULL && Copy_u8LedState != NULL)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	9b 81       	ldd	r25, Y+3	; 0x03
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	79 f1       	breq	.+94     	; 0x2722 <LED_enuGetState+0x80>
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	59 f1       	breq	.+86     	; 0x2722 <LED_enuGetState+0x80>
    {
    	if(Copy_u8LedNum < LED_NUM)
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	28 f5       	brcc	.+74     	; 0x271c <LED_enuGetState+0x7a>
    	{
    	Local_enuErrorState = DIO_enuGetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,Copy_u8LedState);
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 01       	movw	r18, r24
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	22 0f       	add	r18, r18
    26e0:	33 1f       	adc	r19, r19
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	fc 01       	movw	r30, r24
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	40 81       	ld	r20, Z
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 01       	movw	r18, r24
    26f6:	22 0f       	add	r18, r18
    26f8:	33 1f       	adc	r19, r19
    26fa:	22 0f       	add	r18, r18
    26fc:	33 1f       	adc	r19, r19
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	2d 81       	ldd	r18, Y+5	; 0x05
    270c:	3e 81       	ldd	r19, Y+6	; 0x06
    270e:	84 2f       	mov	r24, r20
    2710:	69 2f       	mov	r22, r25
    2712:	a9 01       	movw	r20, r18
    2714:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_enuGetPinValue>
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <LED_enuGetState+0x84>
    	}
    	else
    	{
    		Local_enuErrorState = ES_OUTOFRANGE;
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <LED_enuGetState+0x84>
    	}
    }
    else
    {
    	Local_enuErrorState = ES_NULL_POINTER;
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_enuErrorState;
    2726:	89 81       	ldd	r24, Y+1	; 0x01
}
    2728:	26 96       	adiw	r28, 0x06	; 6
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_enuInit>:
#include "util/delay.h"

extern LCD_T  LCD_AstrLCDConfig [LCD_NUM];

ES_T LCD_enuInit(LCD_T *Copy_PsrtLCDConfig)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	ae 97       	sbiw	r28, 0x2e	; 46
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	9e a7       	std	Y+46, r25	; 0x2e
    2750:	8d a7       	std	Y+45, r24	; 0x2d
	ES_T Local_enuErrorState = ES_NOK;
    2752:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_u8Iterator=0;
    2754:	1b a6       	std	Y+43, r1	; 0x2b
	if(Copy_PsrtLCDConfig != NULL)
    2756:	8d a5       	ldd	r24, Y+45	; 0x2d
    2758:	9e a5       	ldd	r25, Y+46	; 0x2e
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	09 f4       	brne	.+2      	; 0x2760 <LCD_enuInit+0x26>
    275e:	f2 c3       	rjmp	.+2020   	; 0x2f44 <LCD_enuInit+0x80a>
	{
		for(Local_u8Iterator=0 ; Local_u8Iterator < LCD_NUM;Local_u8Iterator++)
    2760:	1b a6       	std	Y+43, r1	; 0x2b
    2762:	e9 c3       	rjmp	.+2002   	; 0x2f36 <LCD_enuInit+0x7fc>
		{
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RSPort,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RSPin, DIO_u8OUTPUT);
    2764:	8b a5       	ldd	r24, Y+43	; 0x2b
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	c9 01       	movw	r24, r18
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	82 0f       	add	r24, r18
    2772:	93 1f       	adc	r25, r19
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	ac 01       	movw	r20, r24
    2782:	42 1b       	sub	r20, r18
    2784:	53 0b       	sbc	r21, r19
    2786:	9a 01       	movw	r18, r20
    2788:	8d a5       	ldd	r24, Y+45	; 0x2d
    278a:	9e a5       	ldd	r25, Y+46	; 0x2e
    278c:	fc 01       	movw	r30, r24
    278e:	e2 0f       	add	r30, r18
    2790:	f3 1f       	adc	r31, r19
    2792:	40 81       	ld	r20, Z
    2794:	8b a5       	ldd	r24, Y+43	; 0x2b
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	c9 01       	movw	r24, r18
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	82 0f       	add	r24, r18
    27a2:	93 1f       	adc	r25, r19
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	bc 01       	movw	r22, r24
    27b2:	62 1b       	sub	r22, r18
    27b4:	73 0b       	sbc	r23, r19
    27b6:	9b 01       	movw	r18, r22
    27b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    27bc:	fc 01       	movw	r30, r24
    27be:	e2 0f       	add	r30, r18
    27c0:	f3 1f       	adc	r31, r19
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	84 2f       	mov	r24, r20
    27c6:	69 2f       	mov	r22, r25
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RWPort,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RWPin, DIO_u8OUTPUT);
    27ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	c9 01       	movw	r24, r18
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	82 0f       	add	r24, r18
    27dc:	93 1f       	adc	r25, r19
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	ac 01       	movw	r20, r24
    27ec:	42 1b       	sub	r20, r18
    27ee:	53 0b       	sbc	r21, r19
    27f0:	9a 01       	movw	r18, r20
    27f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    27f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f6:	fc 01       	movw	r30, r24
    27f8:	e2 0f       	add	r30, r18
    27fa:	f3 1f       	adc	r31, r19
    27fc:	42 81       	ldd	r20, Z+2	; 0x02
    27fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	c9 01       	movw	r24, r18
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	82 0f       	add	r24, r18
    280c:	93 1f       	adc	r25, r19
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	bc 01       	movw	r22, r24
    281c:	62 1b       	sub	r22, r18
    281e:	73 0b       	sbc	r23, r19
    2820:	9b 01       	movw	r18, r22
    2822:	8d a5       	ldd	r24, Y+45	; 0x2d
    2824:	9e a5       	ldd	r25, Y+46	; 0x2e
    2826:	fc 01       	movw	r30, r24
    2828:	e2 0f       	add	r30, r18
    282a:	f3 1f       	adc	r31, r19
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	84 2f       	mov	r24, r20
    2830:	69 2f       	mov	r22, r25
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8ENPort,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8ENPin, DIO_u8OUTPUT);
    2838:	8b a5       	ldd	r24, Y+43	; 0x2b
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	c9 01       	movw	r24, r18
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	82 0f       	add	r24, r18
    2846:	93 1f       	adc	r25, r19
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	ac 01       	movw	r20, r24
    2856:	42 1b       	sub	r20, r18
    2858:	53 0b       	sbc	r21, r19
    285a:	9a 01       	movw	r18, r20
    285c:	8d a5       	ldd	r24, Y+45	; 0x2d
    285e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2860:	fc 01       	movw	r30, r24
    2862:	e2 0f       	add	r30, r18
    2864:	f3 1f       	adc	r31, r19
    2866:	44 81       	ldd	r20, Z+4	; 0x04
    2868:	8b a5       	ldd	r24, Y+43	; 0x2b
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	c9 01       	movw	r24, r18
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	bc 01       	movw	r22, r24
    2886:	62 1b       	sub	r22, r18
    2888:	73 0b       	sbc	r23, r19
    288a:	9b 01       	movw	r18, r22
    288c:	8d a5       	ldd	r24, Y+45	; 0x2d
    288e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2890:	fc 01       	movw	r30, r24
    2892:	e2 0f       	add	r30, r18
    2894:	f3 1f       	adc	r31, r19
    2896:	95 81       	ldd	r25, Z+5	; 0x05
    2898:	84 2f       	mov	r24, r20
    289a:	69 2f       	mov	r22, r25
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D7Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D7Pin, DIO_u8OUTPUT);
    28a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	c9 01       	movw	r24, r18
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	82 0f       	add	r24, r18
    28b0:	93 1f       	adc	r25, r19
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	ac 01       	movw	r20, r24
    28c0:	42 1b       	sub	r20, r18
    28c2:	53 0b       	sbc	r21, r19
    28c4:	9a 01       	movw	r18, r20
    28c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28ca:	fc 01       	movw	r30, r24
    28cc:	e2 0f       	add	r30, r18
    28ce:	f3 1f       	adc	r31, r19
    28d0:	46 81       	ldd	r20, Z+6	; 0x06
    28d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	c9 01       	movw	r24, r18
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	82 0f       	add	r24, r18
    28e0:	93 1f       	adc	r25, r19
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	bc 01       	movw	r22, r24
    28f0:	62 1b       	sub	r22, r18
    28f2:	73 0b       	sbc	r23, r19
    28f4:	9b 01       	movw	r18, r22
    28f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	97 81       	ldd	r25, Z+7	; 0x07
    2902:	84 2f       	mov	r24, r20
    2904:	69 2f       	mov	r22, r25
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D6Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D6Pin, DIO_u8OUTPUT);
    290c:	8b a5       	ldd	r24, Y+43	; 0x2b
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	c9 01       	movw	r24, r18
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	82 0f       	add	r24, r18
    291a:	93 1f       	adc	r25, r19
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	ac 01       	movw	r20, r24
    292a:	42 1b       	sub	r20, r18
    292c:	53 0b       	sbc	r21, r19
    292e:	9a 01       	movw	r18, r20
    2930:	8d a5       	ldd	r24, Y+45	; 0x2d
    2932:	9e a5       	ldd	r25, Y+46	; 0x2e
    2934:	fc 01       	movw	r30, r24
    2936:	e2 0f       	add	r30, r18
    2938:	f3 1f       	adc	r31, r19
    293a:	40 85       	ldd	r20, Z+8	; 0x08
    293c:	8b a5       	ldd	r24, Y+43	; 0x2b
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	c9 01       	movw	r24, r18
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	82 0f       	add	r24, r18
    294a:	93 1f       	adc	r25, r19
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	bc 01       	movw	r22, r24
    295a:	62 1b       	sub	r22, r18
    295c:	73 0b       	sbc	r23, r19
    295e:	9b 01       	movw	r18, r22
    2960:	8d a5       	ldd	r24, Y+45	; 0x2d
    2962:	9e a5       	ldd	r25, Y+46	; 0x2e
    2964:	fc 01       	movw	r30, r24
    2966:	e2 0f       	add	r30, r18
    2968:	f3 1f       	adc	r31, r19
    296a:	91 85       	ldd	r25, Z+9	; 0x09
    296c:	84 2f       	mov	r24, r20
    296e:	69 2f       	mov	r22, r25
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D5Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D5Pin, DIO_u8OUTPUT);
    2976:	8b a5       	ldd	r24, Y+43	; 0x2b
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	c9 01       	movw	r24, r18
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	82 0f       	add	r24, r18
    2984:	93 1f       	adc	r25, r19
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	ac 01       	movw	r20, r24
    2994:	42 1b       	sub	r20, r18
    2996:	53 0b       	sbc	r21, r19
    2998:	9a 01       	movw	r18, r20
    299a:	8d a5       	ldd	r24, Y+45	; 0x2d
    299c:	9e a5       	ldd	r25, Y+46	; 0x2e
    299e:	fc 01       	movw	r30, r24
    29a0:	e2 0f       	add	r30, r18
    29a2:	f3 1f       	adc	r31, r19
    29a4:	42 85       	ldd	r20, Z+10	; 0x0a
    29a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	c9 01       	movw	r24, r18
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	82 0f       	add	r24, r18
    29b4:	93 1f       	adc	r25, r19
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	bc 01       	movw	r22, r24
    29c4:	62 1b       	sub	r22, r18
    29c6:	73 0b       	sbc	r23, r19
    29c8:	9b 01       	movw	r18, r22
    29ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    29cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ce:	fc 01       	movw	r30, r24
    29d0:	e2 0f       	add	r30, r18
    29d2:	f3 1f       	adc	r31, r19
    29d4:	93 85       	ldd	r25, Z+11	; 0x0b
    29d6:	84 2f       	mov	r24, r20
    29d8:	69 2f       	mov	r22, r25
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D4Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D4Pin, DIO_u8OUTPUT);
    29e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	c9 01       	movw	r24, r18
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	82 0f       	add	r24, r18
    29ee:	93 1f       	adc	r25, r19
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	ac 01       	movw	r20, r24
    29fe:	42 1b       	sub	r20, r18
    2a00:	53 0b       	sbc	r21, r19
    2a02:	9a 01       	movw	r18, r20
    2a04:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a06:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a08:	fc 01       	movw	r30, r24
    2a0a:	e2 0f       	add	r30, r18
    2a0c:	f3 1f       	adc	r31, r19
    2a0e:	44 85       	ldd	r20, Z+12	; 0x0c
    2a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	c9 01       	movw	r24, r18
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	82 0f       	add	r24, r18
    2a1e:	93 1f       	adc	r25, r19
    2a20:	88 0f       	add	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	62 1b       	sub	r22, r18
    2a30:	73 0b       	sbc	r23, r19
    2a32:	9b 01       	movw	r18, r22
    2a34:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a36:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	95 85       	ldd	r25, Z+13	; 0x0d
    2a40:	84 2f       	mov	r24, r20
    2a42:	69 2f       	mov	r22, r25
    2a44:	41 e0       	ldi	r20, 0x01	; 1
    2a46:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e2       	ldi	r26, 0x20	; 32
    2a50:	b2 e4       	ldi	r27, 0x42	; 66
    2a52:	8f a3       	std	Y+39, r24	; 0x27
    2a54:	98 a7       	std	Y+40, r25	; 0x28
    2a56:	a9 a7       	std	Y+41, r26	; 0x29
    2a58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	53 e4       	ldi	r21, 0x43	; 67
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8b a3       	std	Y+35, r24	; 0x23
    2a74:	9c a3       	std	Y+36, r25	; 0x24
    2a76:	ad a3       	std	Y+37, r26	; 0x25
    2a78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a80:	9e a1       	ldd	r25, Y+38	; 0x26
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_enuInit+0x362>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_enuInit+0x3e0>
	else if (__tmp > 65535)
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_enuInit+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ab6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9a a3       	std	Y+34, r25	; 0x22
    2ada:	89 a3       	std	Y+33, r24	; 0x21
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_enuInit+0x3c2>
    2ade:	82 e3       	ldi	r24, 0x32	; 50
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	98 a3       	std	Y+32, r25	; 0x20
    2ae4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ae6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae8:	98 a1       	ldd	r25, Y+32	; 0x20
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_enuInit+0x3b0>
    2aee:	98 a3       	std	Y+32, r25	; 0x20
    2af0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	89 a1       	ldd	r24, Y+33	; 0x21
    2af4:	9a a1       	ldd	r25, Y+34	; 0x22
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9a a3       	std	Y+34, r25	; 0x22
    2afa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	89 a1       	ldd	r24, Y+33	; 0x21
    2afe:	9a a1       	ldd	r25, Y+34	; 0x22
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_enuInit+0x3a4>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_enuInit+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6b a1       	ldd	r22, Y+35	; 0x23
    2b08:	7c a1       	ldd	r23, Y+36	; 0x24
    2b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9a a3       	std	Y+34, r25	; 0x22
    2b18:	89 a3       	std	Y+33, r24	; 0x21
    2b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
    2b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_enuInit+0x3ec>
    2b2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b2c:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(40);

			if(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8LCDMode==EIGHT_BIT)
    2b2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b30:	28 2f       	mov	r18, r24
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	c9 01       	movw	r24, r18
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	82 0f       	add	r24, r18
    2b3c:	93 1f       	adc	r25, r19
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	ac 01       	movw	r20, r24
    2b4c:	42 1b       	sub	r20, r18
    2b4e:	53 0b       	sbc	r21, r19
    2b50:	9a 01       	movw	r18, r20
    2b52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	86 89       	ldd	r24, Z+22	; 0x16
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <LCD_enuInit+0x42a>
    2b62:	d9 c0       	rjmp	.+434    	; 0x2d16 <LCD_enuInit+0x5dc>
			{
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D3Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D3Pin, DIO_u8OUTPUT);
    2b64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	c9 01       	movw	r24, r18
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	82 0f       	add	r24, r18
    2b72:	93 1f       	adc	r25, r19
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	bc 01       	movw	r22, r24
    2b82:	62 1b       	sub	r22, r18
    2b84:	73 0b       	sbc	r23, r19
    2b86:	9b 01       	movw	r18, r22
    2b88:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	e2 0f       	add	r30, r18
    2b90:	f3 1f       	adc	r31, r19
    2b92:	46 85       	ldd	r20, Z+14	; 0x0e
    2b94:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	c9 01       	movw	r24, r18
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	82 0f       	add	r24, r18
    2ba2:	93 1f       	adc	r25, r19
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	62 1b       	sub	r22, r18
    2bb4:	73 0b       	sbc	r23, r19
    2bb6:	9b 01       	movw	r18, r22
    2bb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bba:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 0f       	add	r30, r18
    2bc0:	f3 1f       	adc	r31, r19
    2bc2:	97 85       	ldd	r25, Z+15	; 0x0f
    2bc4:	84 2f       	mov	r24, r20
    2bc6:	69 2f       	mov	r22, r25
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D2Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D2Pin, DIO_u8OUTPUT);
    2bce:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	c9 01       	movw	r24, r18
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	82 0f       	add	r24, r18
    2bdc:	93 1f       	adc	r25, r19
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	ac 01       	movw	r20, r24
    2bec:	42 1b       	sub	r20, r18
    2bee:	53 0b       	sbc	r21, r19
    2bf0:	9a 01       	movw	r18, r20
    2bf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	e2 0f       	add	r30, r18
    2bfa:	f3 1f       	adc	r31, r19
    2bfc:	40 89       	ldd	r20, Z+16	; 0x10
    2bfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	c9 01       	movw	r24, r18
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	82 0f       	add	r24, r18
    2c0c:	93 1f       	adc	r25, r19
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	62 1b       	sub	r22, r18
    2c1e:	73 0b       	sbc	r23, r19
    2c20:	9b 01       	movw	r18, r22
    2c22:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c24:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c26:	fc 01       	movw	r30, r24
    2c28:	e2 0f       	add	r30, r18
    2c2a:	f3 1f       	adc	r31, r19
    2c2c:	91 89       	ldd	r25, Z+17	; 0x11
    2c2e:	84 2f       	mov	r24, r20
    2c30:	69 2f       	mov	r22, r25
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D1Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D1Pin, DIO_u8OUTPUT);
    2c38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	c9 01       	movw	r24, r18
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	82 0f       	add	r24, r18
    2c46:	93 1f       	adc	r25, r19
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	ac 01       	movw	r20, r24
    2c56:	42 1b       	sub	r20, r18
    2c58:	53 0b       	sbc	r21, r19
    2c5a:	9a 01       	movw	r18, r20
    2c5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c60:	fc 01       	movw	r30, r24
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	42 89       	ldd	r20, Z+18	; 0x12
    2c68:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	c9 01       	movw	r24, r18
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	82 0f       	add	r24, r18
    2c76:	93 1f       	adc	r25, r19
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	bc 01       	movw	r22, r24
    2c86:	62 1b       	sub	r22, r18
    2c88:	73 0b       	sbc	r23, r19
    2c8a:	9b 01       	movw	r18, r22
    2c8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c90:	fc 01       	movw	r30, r24
    2c92:	e2 0f       	add	r30, r18
    2c94:	f3 1f       	adc	r31, r19
    2c96:	93 89       	ldd	r25, Z+19	; 0x13
    2c98:	84 2f       	mov	r24, r20
    2c9a:	69 2f       	mov	r22, r25
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D0Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D0Pin, DIO_u8OUTPUT);
    2ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	c9 01       	movw	r24, r18
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	82 0f       	add	r24, r18
    2cb0:	93 1f       	adc	r25, r19
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	ac 01       	movw	r20, r24
    2cc0:	42 1b       	sub	r20, r18
    2cc2:	53 0b       	sbc	r21, r19
    2cc4:	9a 01       	movw	r18, r20
    2cc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e2 0f       	add	r30, r18
    2cce:	f3 1f       	adc	r31, r19
    2cd0:	44 89       	ldd	r20, Z+20	; 0x14
    2cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	c9 01       	movw	r24, r18
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	82 0f       	add	r24, r18
    2ce0:	93 1f       	adc	r25, r19
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	bc 01       	movw	r22, r24
    2cf0:	62 1b       	sub	r22, r18
    2cf2:	73 0b       	sbc	r23, r19
    2cf4:	9b 01       	movw	r18, r22
    2cf6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cf8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	e2 0f       	add	r30, r18
    2cfe:	f3 1f       	adc	r31, r19
    2d00:	95 89       	ldd	r25, Z+21	; 0x15
    2d02:	84 2f       	mov	r24, r20
    2d04:	69 2f       	mov	r22, r25
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

				LCD_invidSendCommand(Local_u8Iterator,LCD_u8EightbitCommand);
    2d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d0e:	68 e3       	ldi	r22, 0x38	; 56
    2d10:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
    2d14:	21 c0       	rjmp	.+66     	; 0x2d58 <LCD_enuInit+0x61e>
			}
			else if(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8LCDMode==FOUR_BIT)
    2d16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	c9 01       	movw	r24, r18
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	82 0f       	add	r24, r18
    2d24:	93 1f       	adc	r25, r19
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	ac 01       	movw	r20, r24
    2d34:	42 1b       	sub	r20, r18
    2d36:	53 0b       	sbc	r21, r19
    2d38:	9a 01       	movw	r18, r20
    2d3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d3e:	fc 01       	movw	r30, r24
    2d40:	e2 0f       	add	r30, r18
    2d42:	f3 1f       	adc	r31, r19
    2d44:	86 89       	ldd	r24, Z+22	; 0x16
    2d46:	84 30       	cpi	r24, 0x04	; 4
    2d48:	29 f4       	brne	.+10     	; 0x2d54 <LCD_enuInit+0x61a>
			{
				LCD_invidSendCommand(Local_u8Iterator,LCD_u8FOURbitCommand);
    2d4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d4c:	68 e2       	ldi	r22, 0x28	; 40
    2d4e:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <LCD_enuInit+0x61e>
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2d54:	83 e0       	ldi	r24, 0x03	; 3
    2d56:	8c a7       	std	Y+44, r24	; 0x2c
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a0 e8       	ldi	r26, 0x80	; 128
    2d5e:	bf e3       	ldi	r27, 0x3F	; 63
    2d60:	89 8f       	std	Y+25, r24	; 0x19
    2d62:	9a 8f       	std	Y+26, r25	; 0x1a
    2d64:	ab 8f       	std	Y+27, r26	; 0x1b
    2d66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	69 8d       	ldd	r22, Y+25	; 0x19
    2d6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4a ef       	ldi	r20, 0xFA	; 250
    2d76:	53 e4       	ldi	r21, 0x43	; 67
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	8d 8b       	std	Y+21, r24	; 0x15
    2d82:	9e 8b       	std	Y+22, r25	; 0x16
    2d84:	af 8b       	std	Y+23, r26	; 0x17
    2d86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d88:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <LCD_enuInit+0x670>
		__ticks = 1;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9c 8b       	std	Y+20, r25	; 0x14
    2da6:	8b 8b       	std	Y+19, r24	; 0x13
    2da8:	3f c0       	rjmp	.+126    	; 0x2e28 <LCD_enuInit+0x6ee>
	else if (__tmp > 65535)
    2daa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dac:	7e 89       	ldd	r23, Y+22	; 0x16
    2dae:	8f 89       	ldd	r24, Y+23	; 0x17
    2db0:	98 8d       	ldd	r25, Y+24	; 0x18
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	3f ef       	ldi	r19, 0xFF	; 255
    2db6:	4f e7       	ldi	r20, 0x7F	; 127
    2db8:	57 e4       	ldi	r21, 0x47	; 71
    2dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dbe:	18 16       	cp	r1, r24
    2dc0:	4c f5       	brge	.+82     	; 0x2e14 <LCD_enuInit+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9c 8b       	std	Y+20, r25	; 0x14
    2de8:	8b 8b       	std	Y+19, r24	; 0x13
    2dea:	0f c0       	rjmp	.+30     	; 0x2e0a <LCD_enuInit+0x6d0>
    2dec:	82 e3       	ldi	r24, 0x32	; 50
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9a 8b       	std	Y+18, r25	; 0x12
    2df2:	89 8b       	std	Y+17, r24	; 0x11
    2df4:	89 89       	ldd	r24, Y+17	; 0x11
    2df6:	9a 89       	ldd	r25, Y+18	; 0x12
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <LCD_enuInit+0x6be>
    2dfc:	9a 8b       	std	Y+18, r25	; 0x12
    2dfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e00:	8b 89       	ldd	r24, Y+19	; 0x13
    2e02:	9c 89       	ldd	r25, Y+20	; 0x14
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	9c 8b       	std	Y+20, r25	; 0x14
    2e08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	69 f7       	brne	.-38     	; 0x2dec <LCD_enuInit+0x6b2>
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <LCD_enuInit+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	6d 89       	ldd	r22, Y+21	; 0x15
    2e16:	7e 89       	ldd	r23, Y+22	; 0x16
    2e18:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9c 8b       	std	Y+20, r25	; 0x14
    2e26:	8b 8b       	std	Y+19, r24	; 0x13
    2e28:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2c:	98 8b       	std	Y+16, r25	; 0x10
    2e2e:	8f 87       	std	Y+15, r24	; 0x0f
    2e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e32:	98 89       	ldd	r25, Y+16	; 0x10
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_enuInit+0x6fa>
    2e38:	98 8b       	std	Y+16, r25	; 0x10
    2e3a:	8f 87       	std	Y+15, r24	; 0x0f
			}
			_delay_ms(1);
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8ClearCommand);
    2e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e3e:	61 e0       	ldi	r22, 0x01	; 1
    2e40:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e4       	ldi	r27, 0x40	; 64
    2e4c:	8b 87       	std	Y+11, r24	; 0x0b
    2e4e:	9c 87       	std	Y+12, r25	; 0x0c
    2e50:	ad 87       	std	Y+13, r26	; 0x0d
    2e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a ef       	ldi	r20, 0xFA	; 250
    2e62:	53 e4       	ldi	r21, 0x43	; 67
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    2e70:	a9 87       	std	Y+9, r26	; 0x09
    2e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	2c f4       	brge	.+10     	; 0x2e96 <LCD_enuInit+0x75c>
		__ticks = 1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	3f c0       	rjmp	.+126    	; 0x2f14 <LCD_enuInit+0x7da>
	else if (__tmp > 65535)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eaa:	18 16       	cp	r1, r24
    2eac:	4c f5       	brge	.+82     	; 0x2f00 <LCD_enuInit+0x7c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <LCD_enuInit+0x7bc>
    2ed8:	82 e3       	ldi	r24, 0x32	; 50
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <LCD_enuInit+0x7aa>
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
    2eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	69 f7       	brne	.-38     	; 0x2ed8 <LCD_enuInit+0x79e>
    2efe:	14 c0       	rjmp	.+40     	; 0x2f28 <LCD_enuInit+0x7ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <LCD_enuInit+0x7e6>
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8MoveDirection);
    2f28:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f2a:	66 e0       	ldi	r22, 0x06	; 6
    2f2c:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
{
	ES_T Local_enuErrorState = ES_NOK;
	u8 Local_u8Iterator=0;
	if(Copy_PsrtLCDConfig != NULL)
	{
		for(Local_u8Iterator=0 ; Local_u8Iterator < LCD_NUM;Local_u8Iterator++)
    2f30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	8b a7       	std	Y+43, r24	; 0x2b
    2f36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f38:	88 23       	and	r24, r24
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <LCD_enuInit+0x804>
    2f3c:	13 cc       	rjmp	.-2010   	; 0x2764 <LCD_enuInit+0x2a>
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8ClearCommand);
			_delay_ms(2);
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8MoveDirection);

		}
		Local_enuErrorState = ES_OK;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	8c a7       	std	Y+44, r24	; 0x2c
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <LCD_enuInit+0x80e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	8c a7       	std	Y+44, r24	; 0x2c
	}

	return Local_enuErrorState;
    2f48:	8c a5       	ldd	r24, Y+44	; 0x2c
}
    2f4a:	ae 96       	adiw	r28, 0x2e	; 46
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <LCD_enuDisplayChar>:

ES_T LCD_enuDisplayChar(u8 Copy_u8LCDID , u8 Copy_u8Char)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <LCD_enuDisplayChar+0x6>
    2f62:	0f 92       	push	r0
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8a 83       	std	Y+2, r24	; 0x02
    2f6a:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    2f6c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID <LCD_NUM)
    2f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f70:	88 23       	and	r24, r24
    2f72:	a1 f5       	brne	.+104    	; 0x2fdc <LCD_enuDisplayChar+0x80>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	c9 01       	movw	r24, r18
    2f7c:	88 0f       	add	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	82 0f       	add	r24, r18
    2f82:	93 1f       	adc	r25, r19
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	82 1b       	sub	r24, r18
    2f92:	93 0b       	sbc	r25, r19
    2f94:	fc 01       	movw	r30, r24
    2f96:	ed 57       	subi	r30, 0x7D	; 125
    2f98:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9a:	40 81       	ld	r20, Z
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	c9 01       	movw	r24, r18
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	82 0f       	add	r24, r18
    2faa:	93 1f       	adc	r25, r19
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	82 1b       	sub	r24, r18
    2fba:	93 0b       	sbc	r25, r19
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	ec 57       	subi	r30, 0x7C	; 124
    2fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc2:	90 81       	ld	r25, Z
    2fc4:	84 2f       	mov	r24, r20
    2fc6:	69 2f       	mov	r22, r25
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendData(Copy_u8LCDID,Copy_u8Char);
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	6b 81       	ldd	r22, Y+3	; 0x03
    2fd2:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
		Local_enuErrorState = ES_OK;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <LCD_enuDisplayChar+0x84>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    2fde:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <LCD_enuDisplayString>:

ES_T LCD_enuDisplayString(u8 Copy_u8LCDID , u8 * Copy_u8ptrString)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <LCD_enuDisplayString+0x6>
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <LCD_enuDisplayString+0x8>
    2ff6:	0f 92       	push	r0
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
    2ffe:	7d 83       	std	Y+5, r23	; 0x05
    3000:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    3002:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator=0;
    3004:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID <LCD_NUM)
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	88 23       	and	r24, r24
    300a:	31 f5       	brne	.+76     	; 0x3058 <LCD_enuDisplayString+0x6a>
	{
		if(Copy_u8ptrString != NULL)
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	9d 81       	ldd	r25, Y+5	; 0x05
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	f9 f0       	breq	.+62     	; 0x3052 <LCD_enuDisplayString+0x64>
    3014:	10 c0       	rjmp	.+32     	; 0x3036 <LCD_enuDisplayString+0x48>
		{
			while(Copy_u8ptrString[Local_u8Iterator] != '\0')
			{
				LCD_invidSendData(Copy_u8LCDID,Copy_u8ptrString[Local_u8Iterator]);
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	fc 01       	movw	r30, r24
    3022:	e2 0f       	add	r30, r18
    3024:	f3 1f       	adc	r31, r19
    3026:	90 81       	ld	r25, Z
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	69 2f       	mov	r22, r25
    302c:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
				Local_u8Iterator++;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8Iterator=0;
	if(Copy_u8LCDID <LCD_NUM)
	{
		if(Copy_u8ptrString != NULL)
		{
			while(Copy_u8ptrString[Local_u8Iterator] != '\0')
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	8c 81       	ldd	r24, Y+4	; 0x04
    303e:	9d 81       	ldd	r25, Y+5	; 0x05
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	88 23       	and	r24, r24
    304a:	29 f7       	brne	.-54     	; 0x3016 <LCD_enuDisplayString+0x28>
			{
				LCD_invidSendData(Copy_u8LCDID,Copy_u8ptrString[Local_u8Iterator]);
				Local_u8Iterator++;
			}
			Local_enuErrorState = ES_OK;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	8a 83       	std	Y+2, r24	; 0x02
    3050:	05 c0       	rjmp	.+10     	; 0x305c <LCD_enuDisplayString+0x6e>
		}
		else
		{
			Local_enuErrorState=ES_NULL_POINTER;
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	8a 83       	std	Y+2, r24	; 0x02
    3056:	02 c0       	rjmp	.+4      	; 0x305c <LCD_enuDisplayString+0x6e>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <LCD_enuDisplayInteger>:

ES_T LCD_enuDisplayInteger(u8 Copy_u8LCDID , s32 Copy_s32Number)
{
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	28 97       	sbiw	r28, 0x08	; 8
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	8e 83       	std	Y+6, r24	; 0x06
    3084:	78 87       	std	Y+8, r23	; 0x08
    3086:	6f 83       	std	Y+7, r22	; 0x07
	ES_T Local_enuErrorState = ES_NOK;
    3088:	1d 82       	std	Y+5, r1	; 0x05

	s32 Local_s32Reverse=0;
    308a:	1c 82       	std	Y+4, r1	; 0x04
    308c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    308e:	1a 82       	std	Y+2, r1	; 0x02
    3090:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    3092:	8e 81       	ldd	r24, Y+6	; 0x06
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	c9 01       	movw	r24, r18
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	82 0f       	add	r24, r18
    30a0:	93 1f       	adc	r25, r19
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	82 1b       	sub	r24, r18
    30b0:	93 0b       	sbc	r25, r19
    30b2:	fc 01       	movw	r30, r24
    30b4:	ed 57       	subi	r30, 0x7D	; 125
    30b6:	fe 4f       	sbci	r31, 0xFE	; 254
    30b8:	40 81       	ld	r20, Z
    30ba:	8e 81       	ldd	r24, Y+6	; 0x06
    30bc:	28 2f       	mov	r18, r24
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	c9 01       	movw	r24, r18
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	82 0f       	add	r24, r18
    30c8:	93 1f       	adc	r25, r19
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	82 1b       	sub	r24, r18
    30d8:	93 0b       	sbc	r25, r19
    30da:	fc 01       	movw	r30, r24
    30dc:	ec 57       	subi	r30, 0x7C	; 124
    30de:	fe 4f       	sbci	r31, 0xFE	; 254
    30e0:	90 81       	ld	r25, Z
    30e2:	84 2f       	mov	r24, r20
    30e4:	69 2f       	mov	r22, r25
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
	if(Copy_u8LCDID < LCD_NUM)
    30ec:	8e 81       	ldd	r24, Y+6	; 0x06
    30ee:	88 23       	and	r24, r24
    30f0:	09 f0       	breq	.+2      	; 0x30f4 <LCD_enuDisplayInteger+0x86>
    30f2:	5f c0       	rjmp	.+190    	; 0x31b2 <LCD_enuDisplayInteger+0x144>
	{
		if(Copy_s32Number < 0)
    30f4:	8f 81       	ldd	r24, Y+7	; 0x07
    30f6:	98 85       	ldd	r25, Y+8	; 0x08
    30f8:	99 23       	and	r25, r25
    30fa:	a4 f5       	brge	.+104    	; 0x3164 <LCD_enuDisplayInteger+0xf6>
		{
			LCD_invidSendData(Copy_u8LCDID,'-');
    30fc:	8e 81       	ldd	r24, Y+6	; 0x06
    30fe:	6d e2       	ldi	r22, 0x2D	; 45
    3100:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
			Copy_s32Number *= -1 ;
    3104:	8f 81       	ldd	r24, Y+7	; 0x07
    3106:	98 85       	ldd	r25, Y+8	; 0x08
    3108:	90 95       	com	r25
    310a:	81 95       	neg	r24
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	98 87       	std	Y+8, r25	; 0x08
    3110:	8f 83       	std	Y+7, r24	; 0x07
    3112:	28 c0       	rjmp	.+80     	; 0x3164 <LCD_enuDisplayInteger+0xf6>
		}
		while(Copy_s32Number)
		{
			Local_u8Remainder = Copy_s32Number % 10;
    3114:	8f 81       	ldd	r24, Y+7	; 0x07
    3116:	98 85       	ldd	r25, Y+8	; 0x08
    3118:	2a e0       	ldi	r18, 0x0A	; 10
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	b9 01       	movw	r22, r18
    311e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    3122:	8a 83       	std	Y+2, r24	; 0x02
			Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	9c 81       	ldd	r25, Y+4	; 0x04
    3128:	9c 01       	movw	r18, r24
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	c9 01       	movw	r24, r18
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	28 0f       	add	r18, r24
    313a:	39 1f       	adc	r19, r25
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	82 0f       	add	r24, r18
    3144:	93 1f       	adc	r25, r19
    3146:	9c 83       	std	Y+4, r25	; 0x04
    3148:	8b 83       	std	Y+3, r24	; 0x03
			Copy_s32Number /=10;
    314a:	8f 81       	ldd	r24, Y+7	; 0x07
    314c:	98 85       	ldd	r25, Y+8	; 0x08
    314e:	2a e0       	ldi	r18, 0x0A	; 10
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	b9 01       	movw	r22, r18
    3154:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    3158:	cb 01       	movw	r24, r22
    315a:	98 87       	std	Y+8, r25	; 0x08
    315c:	8f 83       	std	Y+7, r24	; 0x07
			Local_u8NumDigit ++;
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	8f 5f       	subi	r24, 0xFF	; 255
    3162:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_s32Number < 0)
		{
			LCD_invidSendData(Copy_u8LCDID,'-');
			Copy_s32Number *= -1 ;
		}
		while(Copy_s32Number)
    3164:	8f 81       	ldd	r24, Y+7	; 0x07
    3166:	98 85       	ldd	r25, Y+8	; 0x08
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	a1 f6       	brne	.-88     	; 0x3114 <LCD_enuDisplayInteger+0xa6>
    316c:	1c c0       	rjmp	.+56     	; 0x31a6 <LCD_enuDisplayInteger+0x138>
			Copy_s32Number /=10;
			Local_u8NumDigit ++;
		}
		while(Local_u8NumDigit)
		{
			Local_u8Remainder = Local_s32Reverse % 10;
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	2a e0       	ldi	r18, 0x0A	; 10
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	b9 01       	movw	r22, r18
    3178:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    317c:	8a 83       	std	Y+2, r24	; 0x02
			LCD_invidSendData(Copy_u8LCDID,Local_u8Remainder + '0');
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	98 2f       	mov	r25, r24
    3182:	90 5d       	subi	r25, 0xD0	; 208
    3184:	8e 81       	ldd	r24, Y+6	; 0x06
    3186:	69 2f       	mov	r22, r25
    3188:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
			Local_s32Reverse /= 10;
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	2a e0       	ldi	r18, 0x0A	; 10
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	b9 01       	movw	r22, r18
    3196:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    319a:	cb 01       	movw	r24, r22
    319c:	9c 83       	std	Y+4, r25	; 0x04
    319e:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8NumDigit --;
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	81 50       	subi	r24, 0x01	; 1
    31a4:	89 83       	std	Y+1, r24	; 0x01
			Local_u8Remainder = Copy_s32Number % 10;
			Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
			Copy_s32Number /=10;
			Local_u8NumDigit ++;
		}
		while(Local_u8NumDigit)
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	88 23       	and	r24, r24
    31aa:	09 f7       	brne	.-62     	; 0x316e <LCD_enuDisplayInteger+0x100>
			Local_u8Remainder = Local_s32Reverse % 10;
			LCD_invidSendData(Copy_u8LCDID,Local_u8Remainder + '0');
			Local_s32Reverse /= 10;
			Local_u8NumDigit --;
		}
		Local_enuErrorState = ES_OK;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <LCD_enuDisplayInteger+0x148>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	8d 83       	std	Y+5, r24	; 0x05
	}


	return Local_enuErrorState;
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31b8:	28 96       	adiw	r28, 0x08	; 8
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <LCD_enuSendCommand>:

ES_T LCD_enuSendCommand(u8 Copy_u8LCDID , u8 Copy_u8Command)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <LCD_enuSendCommand+0x6>
    31d0:	0f 92       	push	r0
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    31da:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID <LCD_NUM)
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	88 23       	and	r24, r24
    31e0:	a1 f5       	brne	.+104    	; 0x324a <LCD_enuSendCommand+0x80>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	c9 01       	movw	r24, r18
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	82 0f       	add	r24, r18
    31f0:	93 1f       	adc	r25, r19
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	82 1b       	sub	r24, r18
    3200:	93 0b       	sbc	r25, r19
    3202:	fc 01       	movw	r30, r24
    3204:	ed 57       	subi	r30, 0x7D	; 125
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	40 81       	ld	r20, Z
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	28 2f       	mov	r18, r24
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	c9 01       	movw	r24, r18
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	82 0f       	add	r24, r18
    3218:	93 1f       	adc	r25, r19
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	82 1b       	sub	r24, r18
    3228:	93 0b       	sbc	r25, r19
    322a:	fc 01       	movw	r30, r24
    322c:	ec 57       	subi	r30, 0x7C	; 124
    322e:	fe 4f       	sbci	r31, 0xFE	; 254
    3230:	90 81       	ld	r25, Z
    3232:	84 2f       	mov	r24, r20
    3234:	69 2f       	mov	r22, r25
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendCommand(Copy_u8LCDID, Copy_u8Command);
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	6b 81       	ldd	r22, Y+3	; 0x03
    3240:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
		Local_enuErrorState = ES_OK;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	02 c0       	rjmp	.+4      	; 0x324e <LCD_enuSendCommand+0x84>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    324a:	83 e0       	ldi	r24, 0x03	; 3
    324c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    324e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <LCD_enuSetPosition>:

ES_T LCD_enuSetPosition(u8 Copy_u8LCDID , u8 Copy_u8Row , u8 Copy_u8Col)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <LCD_enuSetPosition+0x6>
    3262:	00 d0       	rcall	.+0      	; 0x3264 <LCD_enuSetPosition+0x8>
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	8a 83       	std	Y+2, r24	; 0x02
    326a:	6b 83       	std	Y+3, r22	; 0x03
    326c:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    326e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID < LCD_NUM && Copy_u8Row<LCD_u8Row2 && Copy_u8Col < LCD_u8Col16)
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	88 23       	and	r24, r24
    3274:	09 f0       	breq	.+2      	; 0x3278 <LCD_enuSetPosition+0x1c>
    3276:	7a c0       	rjmp	.+244    	; 0x336c <LCD_enuSetPosition+0x110>
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	82 30       	cpi	r24, 0x02	; 2
    327c:	08 f0       	brcs	.+2      	; 0x3280 <LCD_enuSetPosition+0x24>
    327e:	76 c0       	rjmp	.+236    	; 0x336c <LCD_enuSetPosition+0x110>
    3280:	8c 81       	ldd	r24, Y+4	; 0x04
    3282:	80 31       	cpi	r24, 0x10	; 16
    3284:	08 f0       	brcs	.+2      	; 0x3288 <LCD_enuSetPosition+0x2c>
    3286:	72 c0       	rjmp	.+228    	; 0x336c <LCD_enuSetPosition+0x110>
	{
		if(Copy_u8Row == LCD_u8Row1)
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	a9 f5       	brne	.+106    	; 0x32f8 <LCD_enuSetPosition+0x9c>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	c9 01       	movw	r24, r18
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	82 1b       	sub	r24, r18
    32ac:	93 0b       	sbc	r25, r19
    32ae:	fc 01       	movw	r30, r24
    32b0:	ed 57       	subi	r30, 0x7D	; 125
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	40 81       	ld	r20, Z
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	28 2f       	mov	r18, r24
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	c9 01       	movw	r24, r18
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	82 0f       	add	r24, r18
    32c4:	93 1f       	adc	r25, r19
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	82 1b       	sub	r24, r18
    32d4:	93 0b       	sbc	r25, r19
    32d6:	fc 01       	movw	r30, r24
    32d8:	ec 57       	subi	r30, 0x7C	; 124
    32da:	fe 4f       	sbci	r31, 0xFE	; 254
    32dc:	90 81       	ld	r25, Z
    32de:	84 2f       	mov	r24, r20
    32e0:	69 2f       	mov	r22, r25
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			LCD_invidSendCommand(Copy_u8LCDID , ((LCD_u8R1Command)+Copy_u8Col) );
    32e8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ea:	98 2f       	mov	r25, r24
    32ec:	90 58       	subi	r25, 0x80	; 128
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	69 2f       	mov	r22, r25
    32f2:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
    32f6:	37 c0       	rjmp	.+110    	; 0x3366 <LCD_enuSetPosition+0x10a>
		}
		else if(Copy_u8Row == LCD_u8Row2)
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	82 30       	cpi	r24, 0x02	; 2
    32fc:	a1 f5       	brne	.+104    	; 0x3366 <LCD_enuSetPosition+0x10a>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	c9 01       	movw	r24, r18
    3306:	88 0f       	add	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	88 0f       	add	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	82 1b       	sub	r24, r18
    331c:	93 0b       	sbc	r25, r19
    331e:	fc 01       	movw	r30, r24
    3320:	ed 57       	subi	r30, 0x7D	; 125
    3322:	fe 4f       	sbci	r31, 0xFE	; 254
    3324:	40 81       	ld	r20, Z
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	c9 01       	movw	r24, r18
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	82 0f       	add	r24, r18
    3334:	93 1f       	adc	r25, r19
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	88 0f       	add	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	82 1b       	sub	r24, r18
    3344:	93 0b       	sbc	r25, r19
    3346:	fc 01       	movw	r30, r24
    3348:	ec 57       	subi	r30, 0x7C	; 124
    334a:	fe 4f       	sbci	r31, 0xFE	; 254
    334c:	90 81       	ld	r25, Z
    334e:	84 2f       	mov	r24, r20
    3350:	69 2f       	mov	r22, r25
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			LCD_invidSendCommand(Copy_u8LCDID , ((LCD_u8R2Command)+Copy_u8Col) );
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	98 2f       	mov	r25, r24
    335c:	90 54       	subi	r25, 0x40	; 64
    335e:	8a 81       	ldd	r24, Y+2	; 0x02
    3360:	69 2f       	mov	r22, r25
    3362:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_invidSendCommand>
		}
		Local_enuErrorState = ES_OK;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <LCD_enuSetPosition+0x114>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    336c:	83 e0       	ldi	r24, 0x03	; 3
    336e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <LCD_invidSendCommand>:
	}
	return Local_enuErrorState;
}
*/
static inline void  LCD_invidSendCommand(u8 Copy_u8LCDID , u8 Copy_u8Command)
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	6e 97       	sbiw	r28, 0x1e	; 30
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	8d 8f       	std	Y+29, r24	; 0x1d
    3396:	6e 8f       	std	Y+30, r22	; 0x1e
	if(Copy_u8LCDID < LCD_NUM)
    3398:	8d 8d       	ldd	r24, Y+29	; 0x1d
    339a:	88 23       	and	r24, r24
    339c:	09 f0       	breq	.+2      	; 0x33a0 <LCD_invidSendCommand+0x20>
    339e:	fb c2       	rjmp	.+1526   	; 0x3996 <LCD_invidSendCommand+0x616>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    33a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a2:	28 2f       	mov	r18, r24
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	c9 01       	movw	r24, r18
    33a8:	88 0f       	add	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	82 0f       	add	r24, r18
    33ae:	93 1f       	adc	r25, r19
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	88 0f       	add	r24, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	82 1b       	sub	r24, r18
    33be:	93 0b       	sbc	r25, r19
    33c0:	fc 01       	movw	r30, r24
    33c2:	ed 57       	subi	r30, 0x7D	; 125
    33c4:	fe 4f       	sbci	r31, 0xFE	; 254
    33c6:	40 81       	ld	r20, Z
    33c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ca:	28 2f       	mov	r18, r24
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	c9 01       	movw	r24, r18
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	82 0f       	add	r24, r18
    33d6:	93 1f       	adc	r25, r19
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	82 1b       	sub	r24, r18
    33e6:	93 0b       	sbc	r25, r19
    33e8:	fc 01       	movw	r30, r24
    33ea:	ec 57       	subi	r30, 0x7C	; 124
    33ec:	fe 4f       	sbci	r31, 0xFE	; 254
    33ee:	90 81       	ld	r25, Z
    33f0:	84 2f       	mov	r24, r20
    33f2:	69 2f       	mov	r22, r25
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPin,DIO_u8LOW);
    33fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	c9 01       	movw	r24, r18
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	82 0f       	add	r24, r18
    3408:	93 1f       	adc	r25, r19
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	82 1b       	sub	r24, r18
    3418:	93 0b       	sbc	r25, r19
    341a:	fc 01       	movw	r30, r24
    341c:	eb 57       	subi	r30, 0x7B	; 123
    341e:	fe 4f       	sbci	r31, 0xFE	; 254
    3420:	40 81       	ld	r20, Z
    3422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	c9 01       	movw	r24, r18
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	82 0f       	add	r24, r18
    3430:	93 1f       	adc	r25, r19
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	82 1b       	sub	r24, r18
    3440:	93 0b       	sbc	r25, r19
    3442:	fc 01       	movw	r30, r24
    3444:	ea 57       	subi	r30, 0x7A	; 122
    3446:	fe 4f       	sbci	r31, 0xFE	; 254
    3448:	90 81       	ld	r25, Z
    344a:	84 2f       	mov	r24, r20
    344c:	69 2f       	mov	r22, r25
    344e:	40 e0       	ldi	r20, 0x00	; 0
    3450:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    3454:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3456:	28 2f       	mov	r18, r24
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	c9 01       	movw	r24, r18
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	82 0f       	add	r24, r18
    3462:	93 1f       	adc	r25, r19
    3464:	88 0f       	add	r24, r24
    3466:	99 1f       	adc	r25, r25
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	88 0f       	add	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	82 1b       	sub	r24, r18
    3472:	93 0b       	sbc	r25, r19
    3474:	fc 01       	movw	r30, r24
    3476:	e9 57       	subi	r30, 0x79	; 121
    3478:	fe 4f       	sbci	r31, 0xFE	; 254
    347a:	40 81       	ld	r20, Z
    347c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    347e:	28 2f       	mov	r18, r24
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	c9 01       	movw	r24, r18
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	82 0f       	add	r24, r18
    348a:	93 1f       	adc	r25, r19
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	82 1b       	sub	r24, r18
    349a:	93 0b       	sbc	r25, r19
    349c:	fc 01       	movw	r30, r24
    349e:	e8 57       	subi	r30, 0x78	; 120
    34a0:	fe 4f       	sbci	r31, 0xFE	; 254
    34a2:	90 81       	ld	r25, Z
    34a4:	84 2f       	mov	r24, r20
    34a6:	69 2f       	mov	r22, r25
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Pin,(Copy_u8Command>>BIT_SEVEN)&BIT_MASKING);
    34ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b0:	28 2f       	mov	r18, r24
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	c9 01       	movw	r24, r18
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	82 0f       	add	r24, r18
    34bc:	93 1f       	adc	r25, r19
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	82 1b       	sub	r24, r18
    34cc:	93 0b       	sbc	r25, r19
    34ce:	fc 01       	movw	r30, r24
    34d0:	e7 57       	subi	r30, 0x77	; 119
    34d2:	fe 4f       	sbci	r31, 0xFE	; 254
    34d4:	40 81       	ld	r20, Z
    34d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	c9 01       	movw	r24, r18
    34de:	88 0f       	add	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	82 0f       	add	r24, r18
    34e4:	93 1f       	adc	r25, r19
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	82 1b       	sub	r24, r18
    34f4:	93 0b       	sbc	r25, r19
    34f6:	fc 01       	movw	r30, r24
    34f8:	e6 57       	subi	r30, 0x76	; 118
    34fa:	fe 4f       	sbci	r31, 0xFE	; 254
    34fc:	20 81       	ld	r18, Z
    34fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3500:	98 2f       	mov	r25, r24
    3502:	99 1f       	adc	r25, r25
    3504:	99 27       	eor	r25, r25
    3506:	99 1f       	adc	r25, r25
    3508:	84 2f       	mov	r24, r20
    350a:	62 2f       	mov	r22, r18
    350c:	49 2f       	mov	r20, r25
    350e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Pin,(Copy_u8Command>>BIT_SIX)&BIT_MASKING);
    3512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	c9 01       	movw	r24, r18
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	82 0f       	add	r24, r18
    3520:	93 1f       	adc	r25, r19
    3522:	88 0f       	add	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	88 0f       	add	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	82 1b       	sub	r24, r18
    3530:	93 0b       	sbc	r25, r19
    3532:	fc 01       	movw	r30, r24
    3534:	e5 57       	subi	r30, 0x75	; 117
    3536:	fe 4f       	sbci	r31, 0xFE	; 254
    3538:	40 81       	ld	r20, Z
    353a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	c9 01       	movw	r24, r18
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	82 0f       	add	r24, r18
    3548:	93 1f       	adc	r25, r19
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	82 1b       	sub	r24, r18
    3558:	93 0b       	sbc	r25, r19
    355a:	fc 01       	movw	r30, r24
    355c:	e4 57       	subi	r30, 0x74	; 116
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	20 81       	ld	r18, Z
    3562:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3564:	82 95       	swap	r24
    3566:	86 95       	lsr	r24
    3568:	86 95       	lsr	r24
    356a:	83 70       	andi	r24, 0x03	; 3
    356c:	98 2f       	mov	r25, r24
    356e:	91 70       	andi	r25, 0x01	; 1
    3570:	84 2f       	mov	r24, r20
    3572:	62 2f       	mov	r22, r18
    3574:	49 2f       	mov	r20, r25
    3576:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Pin,(Copy_u8Command>>BIT_FIVE)&BIT_MASKING);
    357a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	c9 01       	movw	r24, r18
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	82 0f       	add	r24, r18
    3588:	93 1f       	adc	r25, r19
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	82 1b       	sub	r24, r18
    3598:	93 0b       	sbc	r25, r19
    359a:	fc 01       	movw	r30, r24
    359c:	e3 57       	subi	r30, 0x73	; 115
    359e:	fe 4f       	sbci	r31, 0xFE	; 254
    35a0:	40 81       	ld	r20, Z
    35a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	c9 01       	movw	r24, r18
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	82 0f       	add	r24, r18
    35b0:	93 1f       	adc	r25, r19
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	82 1b       	sub	r24, r18
    35c0:	93 0b       	sbc	r25, r19
    35c2:	fc 01       	movw	r30, r24
    35c4:	e2 57       	subi	r30, 0x72	; 114
    35c6:	fe 4f       	sbci	r31, 0xFE	; 254
    35c8:	20 81       	ld	r18, Z
    35ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35cc:	82 95       	swap	r24
    35ce:	86 95       	lsr	r24
    35d0:	87 70       	andi	r24, 0x07	; 7
    35d2:	98 2f       	mov	r25, r24
    35d4:	91 70       	andi	r25, 0x01	; 1
    35d6:	84 2f       	mov	r24, r20
    35d8:	62 2f       	mov	r22, r18
    35da:	49 2f       	mov	r20, r25
    35dc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Pin,(Copy_u8Command>>BIT_FOUR)&BIT_MASKING);
    35e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	c9 01       	movw	r24, r18
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	82 0f       	add	r24, r18
    35ee:	93 1f       	adc	r25, r19
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	88 0f       	add	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	82 1b       	sub	r24, r18
    35fe:	93 0b       	sbc	r25, r19
    3600:	fc 01       	movw	r30, r24
    3602:	e1 57       	subi	r30, 0x71	; 113
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	40 81       	ld	r20, Z
    3608:	8d 8d       	ldd	r24, Y+29	; 0x1d
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	c9 01       	movw	r24, r18
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	82 0f       	add	r24, r18
    3616:	93 1f       	adc	r25, r19
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	82 1b       	sub	r24, r18
    3626:	93 0b       	sbc	r25, r19
    3628:	fc 01       	movw	r30, r24
    362a:	e0 57       	subi	r30, 0x70	; 112
    362c:	fe 4f       	sbci	r31, 0xFE	; 254
    362e:	20 81       	ld	r18, Z
    3630:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3632:	82 95       	swap	r24
    3634:	8f 70       	andi	r24, 0x0F	; 15
    3636:	98 2f       	mov	r25, r24
    3638:	91 70       	andi	r25, 0x01	; 1
    363a:	84 2f       	mov	r24, r20
    363c:	62 2f       	mov	r22, r18
    363e:	49 2f       	mov	r20, r25
    3640:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		if(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8LCDMode == EIGHT_BIT)
    3644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3646:	28 2f       	mov	r18, r24
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	c9 01       	movw	r24, r18
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	82 0f       	add	r24, r18
    3652:	93 1f       	adc	r25, r19
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	88 0f       	add	r24, r24
    365e:	99 1f       	adc	r25, r25
    3660:	82 1b       	sub	r24, r18
    3662:	93 0b       	sbc	r25, r19
    3664:	fc 01       	movw	r30, r24
    3666:	e7 56       	subi	r30, 0x67	; 103
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	80 81       	ld	r24, Z
    366c:	88 30       	cpi	r24, 0x08	; 8
    366e:	09 f0       	breq	.+2      	; 0x3672 <LCD_invidSendCommand+0x2f2>
    3670:	c6 c0       	rjmp	.+396    	; 0x37fe <LCD_invidSendCommand+0x47e>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Pin,(Copy_u8Command>>BIT_THREE)&BIT_MASKING);
    3672:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	c9 01       	movw	r24, r18
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	82 0f       	add	r24, r18
    3680:	93 1f       	adc	r25, r19
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	88 0f       	add	r24, r24
    368c:	99 1f       	adc	r25, r25
    368e:	82 1b       	sub	r24, r18
    3690:	93 0b       	sbc	r25, r19
    3692:	fc 01       	movw	r30, r24
    3694:	ef 56       	subi	r30, 0x6F	; 111
    3696:	fe 4f       	sbci	r31, 0xFE	; 254
    3698:	40 81       	ld	r20, Z
    369a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	c9 01       	movw	r24, r18
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	82 0f       	add	r24, r18
    36a8:	93 1f       	adc	r25, r19
    36aa:	88 0f       	add	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	82 1b       	sub	r24, r18
    36b8:	93 0b       	sbc	r25, r19
    36ba:	fc 01       	movw	r30, r24
    36bc:	ee 56       	subi	r30, 0x6E	; 110
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	20 81       	ld	r18, Z
    36c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36c4:	86 95       	lsr	r24
    36c6:	86 95       	lsr	r24
    36c8:	86 95       	lsr	r24
    36ca:	98 2f       	mov	r25, r24
    36cc:	91 70       	andi	r25, 0x01	; 1
    36ce:	84 2f       	mov	r24, r20
    36d0:	62 2f       	mov	r22, r18
    36d2:	49 2f       	mov	r20, r25
    36d4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Pin,(Copy_u8Command>>BIT_TWO)&BIT_MASKING);
    36d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36da:	28 2f       	mov	r18, r24
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	c9 01       	movw	r24, r18
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	82 0f       	add	r24, r18
    36e6:	93 1f       	adc	r25, r19
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	88 0f       	add	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	82 1b       	sub	r24, r18
    36f6:	93 0b       	sbc	r25, r19
    36f8:	fc 01       	movw	r30, r24
    36fa:	ed 56       	subi	r30, 0x6D	; 109
    36fc:	fe 4f       	sbci	r31, 0xFE	; 254
    36fe:	40 81       	ld	r20, Z
    3700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	c9 01       	movw	r24, r18
    3708:	88 0f       	add	r24, r24
    370a:	99 1f       	adc	r25, r25
    370c:	82 0f       	add	r24, r18
    370e:	93 1f       	adc	r25, r19
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	88 0f       	add	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	82 1b       	sub	r24, r18
    371e:	93 0b       	sbc	r25, r19
    3720:	fc 01       	movw	r30, r24
    3722:	ec 56       	subi	r30, 0x6C	; 108
    3724:	fe 4f       	sbci	r31, 0xFE	; 254
    3726:	20 81       	ld	r18, Z
    3728:	8e 8d       	ldd	r24, Y+30	; 0x1e
    372a:	86 95       	lsr	r24
    372c:	86 95       	lsr	r24
    372e:	98 2f       	mov	r25, r24
    3730:	91 70       	andi	r25, 0x01	; 1
    3732:	84 2f       	mov	r24, r20
    3734:	62 2f       	mov	r22, r18
    3736:	49 2f       	mov	r20, r25
    3738:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Pin,(Copy_u8Command>>BIT_ONE)&BIT_MASKING);
    373c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    373e:	28 2f       	mov	r18, r24
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	c9 01       	movw	r24, r18
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	82 0f       	add	r24, r18
    374a:	93 1f       	adc	r25, r19
    374c:	88 0f       	add	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	88 0f       	add	r24, r24
    3752:	99 1f       	adc	r25, r25
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	82 1b       	sub	r24, r18
    375a:	93 0b       	sbc	r25, r19
    375c:	fc 01       	movw	r30, r24
    375e:	eb 56       	subi	r30, 0x6B	; 107
    3760:	fe 4f       	sbci	r31, 0xFE	; 254
    3762:	40 81       	ld	r20, Z
    3764:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3766:	28 2f       	mov	r18, r24
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	c9 01       	movw	r24, r18
    376c:	88 0f       	add	r24, r24
    376e:	99 1f       	adc	r25, r25
    3770:	82 0f       	add	r24, r18
    3772:	93 1f       	adc	r25, r19
    3774:	88 0f       	add	r24, r24
    3776:	99 1f       	adc	r25, r25
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	88 0f       	add	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	82 1b       	sub	r24, r18
    3782:	93 0b       	sbc	r25, r19
    3784:	fc 01       	movw	r30, r24
    3786:	ea 56       	subi	r30, 0x6A	; 106
    3788:	fe 4f       	sbci	r31, 0xFE	; 254
    378a:	20 81       	ld	r18, Z
    378c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    378e:	86 95       	lsr	r24
    3790:	98 2f       	mov	r25, r24
    3792:	91 70       	andi	r25, 0x01	; 1
    3794:	84 2f       	mov	r24, r20
    3796:	62 2f       	mov	r22, r18
    3798:	49 2f       	mov	r20, r25
    379a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Pin,(Copy_u8Command>>BIT_ZERO)&BIT_MASKING);
    379e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37a0:	28 2f       	mov	r18, r24
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	c9 01       	movw	r24, r18
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	82 0f       	add	r24, r18
    37ac:	93 1f       	adc	r25, r19
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	82 1b       	sub	r24, r18
    37bc:	93 0b       	sbc	r25, r19
    37be:	fc 01       	movw	r30, r24
    37c0:	e9 56       	subi	r30, 0x69	; 105
    37c2:	fe 4f       	sbci	r31, 0xFE	; 254
    37c4:	40 81       	ld	r20, Z
    37c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	c9 01       	movw	r24, r18
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	82 0f       	add	r24, r18
    37d4:	93 1f       	adc	r25, r19
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	82 1b       	sub	r24, r18
    37e4:	93 0b       	sbc	r25, r19
    37e6:	fc 01       	movw	r30, r24
    37e8:	e8 56       	subi	r30, 0x68	; 104
    37ea:	fe 4f       	sbci	r31, 0xFE	; 254
    37ec:	20 81       	ld	r18, Z
    37ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37f0:	98 2f       	mov	r25, r24
    37f2:	91 70       	andi	r25, 0x01	; 1
    37f4:	84 2f       	mov	r24, r20
    37f6:	62 2f       	mov	r22, r18
    37f8:	49 2f       	mov	r20, r25
    37fa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		}
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8HIGH);
    37fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3800:	28 2f       	mov	r18, r24
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	c9 01       	movw	r24, r18
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	82 0f       	add	r24, r18
    380c:	93 1f       	adc	r25, r19
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	82 1b       	sub	r24, r18
    381c:	93 0b       	sbc	r25, r19
    381e:	fc 01       	movw	r30, r24
    3820:	e9 57       	subi	r30, 0x79	; 121
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	40 81       	ld	r20, Z
    3826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	c9 01       	movw	r24, r18
    382e:	88 0f       	add	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	82 0f       	add	r24, r18
    3834:	93 1f       	adc	r25, r19
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	88 0f       	add	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	82 1b       	sub	r24, r18
    3844:	93 0b       	sbc	r25, r19
    3846:	fc 01       	movw	r30, r24
    3848:	e8 57       	subi	r30, 0x78	; 120
    384a:	fe 4f       	sbci	r31, 0xFE	; 254
    384c:	90 81       	ld	r25, Z
    384e:	84 2f       	mov	r24, r20
    3850:	69 2f       	mov	r22, r25
    3852:	41 e0       	ldi	r20, 0x01	; 1
    3854:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	a0 e2       	ldi	r26, 0x20	; 32
    385e:	b1 e4       	ldi	r27, 0x41	; 65
    3860:	89 8f       	std	Y+25, r24	; 0x19
    3862:	9a 8f       	std	Y+26, r25	; 0x1a
    3864:	ab 8f       	std	Y+27, r26	; 0x1b
    3866:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3868:	69 8d       	ldd	r22, Y+25	; 0x19
    386a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    386c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    386e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	4a ef       	ldi	r20, 0xFA	; 250
    3876:	53 e4       	ldi	r21, 0x43	; 67
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	8d 8b       	std	Y+21, r24	; 0x15
    3882:	9e 8b       	std	Y+22, r25	; 0x16
    3884:	af 8b       	std	Y+23, r26	; 0x17
    3886:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3888:	6d 89       	ldd	r22, Y+21	; 0x15
    388a:	7e 89       	ldd	r23, Y+22	; 0x16
    388c:	8f 89       	ldd	r24, Y+23	; 0x17
    388e:	98 8d       	ldd	r25, Y+24	; 0x18
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    389c:	88 23       	and	r24, r24
    389e:	2c f4       	brge	.+10     	; 0x38aa <LCD_invidSendCommand+0x52a>
		__ticks = 1;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9c 8b       	std	Y+20, r25	; 0x14
    38a6:	8b 8b       	std	Y+19, r24	; 0x13
    38a8:	3f c0       	rjmp	.+126    	; 0x3928 <LCD_invidSendCommand+0x5a8>
	else if (__tmp > 65535)
    38aa:	6d 89       	ldd	r22, Y+21	; 0x15
    38ac:	7e 89       	ldd	r23, Y+22	; 0x16
    38ae:	8f 89       	ldd	r24, Y+23	; 0x17
    38b0:	98 8d       	ldd	r25, Y+24	; 0x18
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38be:	18 16       	cp	r1, r24
    38c0:	4c f5       	brge	.+82     	; 0x3914 <LCD_invidSendCommand+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c2:	69 8d       	ldd	r22, Y+25	; 0x19
    38c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	51 e4       	ldi	r21, 0x41	; 65
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9c 8b       	std	Y+20, r25	; 0x14
    38e8:	8b 8b       	std	Y+19, r24	; 0x13
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <LCD_invidSendCommand+0x58a>
    38ec:	82 e3       	ldi	r24, 0x32	; 50
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	9a 8b       	std	Y+18, r25	; 0x12
    38f2:	89 8b       	std	Y+17, r24	; 0x11
    38f4:	89 89       	ldd	r24, Y+17	; 0x11
    38f6:	9a 89       	ldd	r25, Y+18	; 0x12
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <LCD_invidSendCommand+0x578>
    38fc:	9a 8b       	std	Y+18, r25	; 0x12
    38fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3900:	8b 89       	ldd	r24, Y+19	; 0x13
    3902:	9c 89       	ldd	r25, Y+20	; 0x14
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	9c 8b       	std	Y+20, r25	; 0x14
    3908:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390a:	8b 89       	ldd	r24, Y+19	; 0x13
    390c:	9c 89       	ldd	r25, Y+20	; 0x14
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	69 f7       	brne	.-38     	; 0x38ec <LCD_invidSendCommand+0x56c>
    3912:	14 c0       	rjmp	.+40     	; 0x393c <LCD_invidSendCommand+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3914:	6d 89       	ldd	r22, Y+21	; 0x15
    3916:	7e 89       	ldd	r23, Y+22	; 0x16
    3918:	8f 89       	ldd	r24, Y+23	; 0x17
    391a:	98 8d       	ldd	r25, Y+24	; 0x18
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9c 8b       	std	Y+20, r25	; 0x14
    3926:	8b 8b       	std	Y+19, r24	; 0x13
    3928:	8b 89       	ldd	r24, Y+19	; 0x13
    392a:	9c 89       	ldd	r25, Y+20	; 0x14
    392c:	98 8b       	std	Y+16, r25	; 0x10
    392e:	8f 87       	std	Y+15, r24	; 0x0f
    3930:	8f 85       	ldd	r24, Y+15	; 0x0f
    3932:	98 89       	ldd	r25, Y+16	; 0x10
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_invidSendCommand+0x5b4>
    3938:	98 8b       	std	Y+16, r25	; 0x10
    393a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    393c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	c9 01       	movw	r24, r18
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	82 0f       	add	r24, r18
    394a:	93 1f       	adc	r25, r19
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	82 1b       	sub	r24, r18
    395a:	93 0b       	sbc	r25, r19
    395c:	fc 01       	movw	r30, r24
    395e:	e9 57       	subi	r30, 0x79	; 121
    3960:	fe 4f       	sbci	r31, 0xFE	; 254
    3962:	40 81       	ld	r20, Z
    3964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3966:	28 2f       	mov	r18, r24
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	c9 01       	movw	r24, r18
    396c:	88 0f       	add	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	82 0f       	add	r24, r18
    3972:	93 1f       	adc	r25, r19
    3974:	88 0f       	add	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	82 1b       	sub	r24, r18
    3982:	93 0b       	sbc	r25, r19
    3984:	fc 01       	movw	r30, r24
    3986:	e8 57       	subi	r30, 0x78	; 120
    3988:	fe 4f       	sbci	r31, 0xFE	; 254
    398a:	90 81       	ld	r25, Z
    398c:	84 2f       	mov	r24, r20
    398e:	69 2f       	mov	r22, r25
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 e2       	ldi	r26, 0x20	; 32
    399c:	b1 e4       	ldi	r27, 0x41	; 65
    399e:	8b 87       	std	Y+11, r24	; 0x0b
    39a0:	9c 87       	std	Y+12, r25	; 0x0c
    39a2:	ad 87       	std	Y+13, r26	; 0x0d
    39a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a ef       	ldi	r20, 0xFA	; 250
    39b4:	53 e4       	ldi	r21, 0x43	; 67
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8f 83       	std	Y+7, r24	; 0x07
    39c0:	98 87       	std	Y+8, r25	; 0x08
    39c2:	a9 87       	std	Y+9, r26	; 0x09
    39c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c6:	6f 81       	ldd	r22, Y+7	; 0x07
    39c8:	78 85       	ldd	r23, Y+8	; 0x08
    39ca:	89 85       	ldd	r24, Y+9	; 0x09
    39cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <LCD_invidSendCommand+0x668>
		__ticks = 1;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	3f c0       	rjmp	.+126    	; 0x3a66 <LCD_invidSendCommand+0x6e6>
	else if (__tmp > 65535)
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	4c f5       	brge	.+82     	; 0x3a52 <LCD_invidSendCommand+0x6d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e2       	ldi	r20, 0x20	; 32
    3a0e:	51 e4       	ldi	r21, 0x41	; 65
    3a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <LCD_invidSendCommand+0x6c8>
    3a2a:	82 e3       	ldi	r24, 0x32	; 50
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <LCD_invidSendCommand+0x6b6>
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a40:	9e 81       	ldd	r25, Y+6	; 0x06
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	9e 83       	std	Y+6, r25	; 0x06
    3a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a48:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <LCD_invidSendCommand+0x6aa>
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <LCD_invidSendCommand+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	8d 81       	ldd	r24, Y+5	; 0x05
    3a68:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <LCD_invidSendCommand+0x6f2>
    3a76:	9a 83       	std	Y+2, r25	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(10);
}
    3a7a:	6e 96       	adiw	r28, 0x1e	; 30
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <LCD_invidSendData>:

static void  LCD_invidSendData(u8 Copy_u8LCDID , u8 Copy_u8Data)
{
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	60 97       	sbiw	r28, 0x10	; 16
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	8f 87       	std	Y+15, r24	; 0x0f
    3aa2:	68 8b       	std	Y+16, r22	; 0x10
	if(Copy_u8LCDID < LCD_NUM)
    3aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa6:	88 23       	and	r24, r24
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <LCD_invidSendData+0x20>
    3aaa:	ce c2       	rjmp	.+1436   	; 0x4048 <LCD_invidSendData+0x5bc>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPin,DIO_u8LOW);
    3aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	c9 01       	movw	r24, r18
    3ab4:	88 0f       	add	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	82 0f       	add	r24, r18
    3aba:	93 1f       	adc	r25, r19
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	82 1b       	sub	r24, r18
    3aca:	93 0b       	sbc	r25, r19
    3acc:	fc 01       	movw	r30, r24
    3ace:	eb 57       	subi	r30, 0x7B	; 123
    3ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad2:	40 81       	ld	r20, Z
    3ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad6:	28 2f       	mov	r18, r24
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	c9 01       	movw	r24, r18
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	82 0f       	add	r24, r18
    3ae2:	93 1f       	adc	r25, r19
    3ae4:	88 0f       	add	r24, r24
    3ae6:	99 1f       	adc	r25, r25
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	82 1b       	sub	r24, r18
    3af2:	93 0b       	sbc	r25, r19
    3af4:	fc 01       	movw	r30, r24
    3af6:	ea 57       	subi	r30, 0x7A	; 122
    3af8:	fe 4f       	sbci	r31, 0xFE	; 254
    3afa:	90 81       	ld	r25, Z
    3afc:	84 2f       	mov	r24, r20
    3afe:	69 2f       	mov	r22, r25
    3b00:	40 e0       	ldi	r20, 0x00	; 0
    3b02:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    3b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b08:	28 2f       	mov	r18, r24
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	c9 01       	movw	r24, r18
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	82 0f       	add	r24, r18
    3b14:	93 1f       	adc	r25, r19
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	88 0f       	add	r24, r24
    3b1c:	99 1f       	adc	r25, r25
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	82 1b       	sub	r24, r18
    3b24:	93 0b       	sbc	r25, r19
    3b26:	fc 01       	movw	r30, r24
    3b28:	e9 57       	subi	r30, 0x79	; 121
    3b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b2c:	40 81       	ld	r20, Z
    3b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	c9 01       	movw	r24, r18
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	82 0f       	add	r24, r18
    3b3c:	93 1f       	adc	r25, r19
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	82 1b       	sub	r24, r18
    3b4c:	93 0b       	sbc	r25, r19
    3b4e:	fc 01       	movw	r30, r24
    3b50:	e8 57       	subi	r30, 0x78	; 120
    3b52:	fe 4f       	sbci	r31, 0xFE	; 254
    3b54:	90 81       	ld	r25, Z
    3b56:	84 2f       	mov	r24, r20
    3b58:	69 2f       	mov	r22, r25
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Pin,(Copy_u8Data>>BIT_SEVEN)&BIT_MASKING);
    3b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b62:	28 2f       	mov	r18, r24
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	c9 01       	movw	r24, r18
    3b68:	88 0f       	add	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	82 0f       	add	r24, r18
    3b6e:	93 1f       	adc	r25, r19
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	82 1b       	sub	r24, r18
    3b7e:	93 0b       	sbc	r25, r19
    3b80:	fc 01       	movw	r30, r24
    3b82:	e7 57       	subi	r30, 0x77	; 119
    3b84:	fe 4f       	sbci	r31, 0xFE	; 254
    3b86:	40 81       	ld	r20, Z
    3b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8a:	28 2f       	mov	r18, r24
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	c9 01       	movw	r24, r18
    3b90:	88 0f       	add	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	82 0f       	add	r24, r18
    3b96:	93 1f       	adc	r25, r19
    3b98:	88 0f       	add	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	88 0f       	add	r24, r24
    3b9e:	99 1f       	adc	r25, r25
    3ba0:	88 0f       	add	r24, r24
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	82 1b       	sub	r24, r18
    3ba6:	93 0b       	sbc	r25, r19
    3ba8:	fc 01       	movw	r30, r24
    3baa:	e6 57       	subi	r30, 0x76	; 118
    3bac:	fe 4f       	sbci	r31, 0xFE	; 254
    3bae:	20 81       	ld	r18, Z
    3bb0:	88 89       	ldd	r24, Y+16	; 0x10
    3bb2:	98 2f       	mov	r25, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	99 27       	eor	r25, r25
    3bb8:	99 1f       	adc	r25, r25
    3bba:	84 2f       	mov	r24, r20
    3bbc:	62 2f       	mov	r22, r18
    3bbe:	49 2f       	mov	r20, r25
    3bc0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Pin,(Copy_u8Data>>BIT_SIX)&BIT_MASKING);
    3bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	c9 01       	movw	r24, r18
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	82 0f       	add	r24, r18
    3bd2:	93 1f       	adc	r25, r19
    3bd4:	88 0f       	add	r24, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	88 0f       	add	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	82 1b       	sub	r24, r18
    3be2:	93 0b       	sbc	r25, r19
    3be4:	fc 01       	movw	r30, r24
    3be6:	e5 57       	subi	r30, 0x75	; 117
    3be8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bea:	40 81       	ld	r20, Z
    3bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bee:	28 2f       	mov	r18, r24
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	c9 01       	movw	r24, r18
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	82 0f       	add	r24, r18
    3bfa:	93 1f       	adc	r25, r19
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	82 1b       	sub	r24, r18
    3c0a:	93 0b       	sbc	r25, r19
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	e4 57       	subi	r30, 0x74	; 116
    3c10:	fe 4f       	sbci	r31, 0xFE	; 254
    3c12:	20 81       	ld	r18, Z
    3c14:	88 89       	ldd	r24, Y+16	; 0x10
    3c16:	82 95       	swap	r24
    3c18:	86 95       	lsr	r24
    3c1a:	86 95       	lsr	r24
    3c1c:	83 70       	andi	r24, 0x03	; 3
    3c1e:	98 2f       	mov	r25, r24
    3c20:	91 70       	andi	r25, 0x01	; 1
    3c22:	84 2f       	mov	r24, r20
    3c24:	62 2f       	mov	r22, r18
    3c26:	49 2f       	mov	r20, r25
    3c28:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Pin,(Copy_u8Data>>BIT_FIVE)&BIT_MASKING);
    3c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c2e:	28 2f       	mov	r18, r24
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	c9 01       	movw	r24, r18
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	82 0f       	add	r24, r18
    3c3a:	93 1f       	adc	r25, r19
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	88 0f       	add	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	82 1b       	sub	r24, r18
    3c4a:	93 0b       	sbc	r25, r19
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	e3 57       	subi	r30, 0x73	; 115
    3c50:	fe 4f       	sbci	r31, 0xFE	; 254
    3c52:	40 81       	ld	r20, Z
    3c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	c9 01       	movw	r24, r18
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	88 0f       	add	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	88 0f       	add	r24, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	88 0f       	add	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	82 1b       	sub	r24, r18
    3c72:	93 0b       	sbc	r25, r19
    3c74:	fc 01       	movw	r30, r24
    3c76:	e2 57       	subi	r30, 0x72	; 114
    3c78:	fe 4f       	sbci	r31, 0xFE	; 254
    3c7a:	20 81       	ld	r18, Z
    3c7c:	88 89       	ldd	r24, Y+16	; 0x10
    3c7e:	82 95       	swap	r24
    3c80:	86 95       	lsr	r24
    3c82:	87 70       	andi	r24, 0x07	; 7
    3c84:	98 2f       	mov	r25, r24
    3c86:	91 70       	andi	r25, 0x01	; 1
    3c88:	84 2f       	mov	r24, r20
    3c8a:	62 2f       	mov	r22, r18
    3c8c:	49 2f       	mov	r20, r25
    3c8e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Pin,(Copy_u8Data>>BIT_FOUR)&BIT_MASKING);
    3c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c94:	28 2f       	mov	r18, r24
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	c9 01       	movw	r24, r18
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	82 0f       	add	r24, r18
    3ca0:	93 1f       	adc	r25, r19
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	82 1b       	sub	r24, r18
    3cb0:	93 0b       	sbc	r25, r19
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	e1 57       	subi	r30, 0x71	; 113
    3cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb8:	40 81       	ld	r20, Z
    3cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cbc:	28 2f       	mov	r18, r24
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	c9 01       	movw	r24, r18
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	82 0f       	add	r24, r18
    3cc8:	93 1f       	adc	r25, r19
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	88 0f       	add	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	82 1b       	sub	r24, r18
    3cd8:	93 0b       	sbc	r25, r19
    3cda:	fc 01       	movw	r30, r24
    3cdc:	e0 57       	subi	r30, 0x70	; 112
    3cde:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce0:	20 81       	ld	r18, Z
    3ce2:	88 89       	ldd	r24, Y+16	; 0x10
    3ce4:	82 95       	swap	r24
    3ce6:	8f 70       	andi	r24, 0x0F	; 15
    3ce8:	98 2f       	mov	r25, r24
    3cea:	91 70       	andi	r25, 0x01	; 1
    3cec:	84 2f       	mov	r24, r20
    3cee:	62 2f       	mov	r22, r18
    3cf0:	49 2f       	mov	r20, r25
    3cf2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		if(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8LCDMode == EIGHT_BIT)
    3cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf8:	28 2f       	mov	r18, r24
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	c9 01       	movw	r24, r18
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	82 0f       	add	r24, r18
    3d04:	93 1f       	adc	r25, r19
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	88 0f       	add	r24, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	88 0f       	add	r24, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	82 1b       	sub	r24, r18
    3d14:	93 0b       	sbc	r25, r19
    3d16:	fc 01       	movw	r30, r24
    3d18:	e7 56       	subi	r30, 0x67	; 103
    3d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1c:	80 81       	ld	r24, Z
    3d1e:	88 30       	cpi	r24, 0x08	; 8
    3d20:	09 f0       	breq	.+2      	; 0x3d24 <LCD_invidSendData+0x298>
    3d22:	c6 c0       	rjmp	.+396    	; 0x3eb0 <LCD_invidSendData+0x424>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Pin,(Copy_u8Data>>BIT_THREE)&BIT_MASKING);
    3d24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d26:	28 2f       	mov	r18, r24
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	c9 01       	movw	r24, r18
    3d2c:	88 0f       	add	r24, r24
    3d2e:	99 1f       	adc	r25, r25
    3d30:	82 0f       	add	r24, r18
    3d32:	93 1f       	adc	r25, r19
    3d34:	88 0f       	add	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	82 1b       	sub	r24, r18
    3d42:	93 0b       	sbc	r25, r19
    3d44:	fc 01       	movw	r30, r24
    3d46:	ef 56       	subi	r30, 0x6F	; 111
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	40 81       	ld	r20, Z
    3d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	c9 01       	movw	r24, r18
    3d54:	88 0f       	add	r24, r24
    3d56:	99 1f       	adc	r25, r25
    3d58:	82 0f       	add	r24, r18
    3d5a:	93 1f       	adc	r25, r19
    3d5c:	88 0f       	add	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	88 0f       	add	r24, r24
    3d62:	99 1f       	adc	r25, r25
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	82 1b       	sub	r24, r18
    3d6a:	93 0b       	sbc	r25, r19
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	ee 56       	subi	r30, 0x6E	; 110
    3d70:	fe 4f       	sbci	r31, 0xFE	; 254
    3d72:	20 81       	ld	r18, Z
    3d74:	88 89       	ldd	r24, Y+16	; 0x10
    3d76:	86 95       	lsr	r24
    3d78:	86 95       	lsr	r24
    3d7a:	86 95       	lsr	r24
    3d7c:	98 2f       	mov	r25, r24
    3d7e:	91 70       	andi	r25, 0x01	; 1
    3d80:	84 2f       	mov	r24, r20
    3d82:	62 2f       	mov	r22, r18
    3d84:	49 2f       	mov	r20, r25
    3d86:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Pin,(Copy_u8Data>>BIT_TWO)&BIT_MASKING);
    3d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d8c:	28 2f       	mov	r18, r24
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	c9 01       	movw	r24, r18
    3d92:	88 0f       	add	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	82 0f       	add	r24, r18
    3d98:	93 1f       	adc	r25, r19
    3d9a:	88 0f       	add	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	82 1b       	sub	r24, r18
    3da8:	93 0b       	sbc	r25, r19
    3daa:	fc 01       	movw	r30, r24
    3dac:	ed 56       	subi	r30, 0x6D	; 109
    3dae:	fe 4f       	sbci	r31, 0xFE	; 254
    3db0:	40 81       	ld	r20, Z
    3db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3db4:	28 2f       	mov	r18, r24
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	c9 01       	movw	r24, r18
    3dba:	88 0f       	add	r24, r24
    3dbc:	99 1f       	adc	r25, r25
    3dbe:	82 0f       	add	r24, r18
    3dc0:	93 1f       	adc	r25, r19
    3dc2:	88 0f       	add	r24, r24
    3dc4:	99 1f       	adc	r25, r25
    3dc6:	88 0f       	add	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	88 0f       	add	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	82 1b       	sub	r24, r18
    3dd0:	93 0b       	sbc	r25, r19
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	ec 56       	subi	r30, 0x6C	; 108
    3dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd8:	20 81       	ld	r18, Z
    3dda:	88 89       	ldd	r24, Y+16	; 0x10
    3ddc:	86 95       	lsr	r24
    3dde:	86 95       	lsr	r24
    3de0:	98 2f       	mov	r25, r24
    3de2:	91 70       	andi	r25, 0x01	; 1
    3de4:	84 2f       	mov	r24, r20
    3de6:	62 2f       	mov	r22, r18
    3de8:	49 2f       	mov	r20, r25
    3dea:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Pin,(Copy_u8Data>>BIT_ONE)&BIT_MASKING);
    3dee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df0:	28 2f       	mov	r18, r24
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	c9 01       	movw	r24, r18
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	82 0f       	add	r24, r18
    3dfc:	93 1f       	adc	r25, r19
    3dfe:	88 0f       	add	r24, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	82 1b       	sub	r24, r18
    3e0c:	93 0b       	sbc	r25, r19
    3e0e:	fc 01       	movw	r30, r24
    3e10:	eb 56       	subi	r30, 0x6B	; 107
    3e12:	fe 4f       	sbci	r31, 0xFE	; 254
    3e14:	40 81       	ld	r20, Z
    3e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e18:	28 2f       	mov	r18, r24
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	c9 01       	movw	r24, r18
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	82 0f       	add	r24, r18
    3e24:	93 1f       	adc	r25, r19
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	88 0f       	add	r24, r24
    3e2c:	99 1f       	adc	r25, r25
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	82 1b       	sub	r24, r18
    3e34:	93 0b       	sbc	r25, r19
    3e36:	fc 01       	movw	r30, r24
    3e38:	ea 56       	subi	r30, 0x6A	; 106
    3e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3c:	20 81       	ld	r18, Z
    3e3e:	88 89       	ldd	r24, Y+16	; 0x10
    3e40:	86 95       	lsr	r24
    3e42:	98 2f       	mov	r25, r24
    3e44:	91 70       	andi	r25, 0x01	; 1
    3e46:	84 2f       	mov	r24, r20
    3e48:	62 2f       	mov	r22, r18
    3e4a:	49 2f       	mov	r20, r25
    3e4c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Pin,(Copy_u8Data>>BIT_ZERO)&BIT_MASKING);
    3e50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e52:	28 2f       	mov	r18, r24
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	c9 01       	movw	r24, r18
    3e58:	88 0f       	add	r24, r24
    3e5a:	99 1f       	adc	r25, r25
    3e5c:	82 0f       	add	r24, r18
    3e5e:	93 1f       	adc	r25, r19
    3e60:	88 0f       	add	r24, r24
    3e62:	99 1f       	adc	r25, r25
    3e64:	88 0f       	add	r24, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	88 0f       	add	r24, r24
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	82 1b       	sub	r24, r18
    3e6e:	93 0b       	sbc	r25, r19
    3e70:	fc 01       	movw	r30, r24
    3e72:	e9 56       	subi	r30, 0x69	; 105
    3e74:	fe 4f       	sbci	r31, 0xFE	; 254
    3e76:	40 81       	ld	r20, Z
    3e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e7a:	28 2f       	mov	r18, r24
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	c9 01       	movw	r24, r18
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25
    3e84:	82 0f       	add	r24, r18
    3e86:	93 1f       	adc	r25, r19
    3e88:	88 0f       	add	r24, r24
    3e8a:	99 1f       	adc	r25, r25
    3e8c:	88 0f       	add	r24, r24
    3e8e:	99 1f       	adc	r25, r25
    3e90:	88 0f       	add	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	82 1b       	sub	r24, r18
    3e96:	93 0b       	sbc	r25, r19
    3e98:	fc 01       	movw	r30, r24
    3e9a:	e8 56       	subi	r30, 0x68	; 104
    3e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9e:	20 81       	ld	r18, Z
    3ea0:	88 89       	ldd	r24, Y+16	; 0x10
    3ea2:	98 2f       	mov	r25, r24
    3ea4:	91 70       	andi	r25, 0x01	; 1
    3ea6:	84 2f       	mov	r24, r20
    3ea8:	62 2f       	mov	r22, r18
    3eaa:	49 2f       	mov	r20, r25
    3eac:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		}
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8HIGH);
    3eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb2:	28 2f       	mov	r18, r24
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	c9 01       	movw	r24, r18
    3eb8:	88 0f       	add	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	82 0f       	add	r24, r18
    3ebe:	93 1f       	adc	r25, r19
    3ec0:	88 0f       	add	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	88 0f       	add	r24, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	88 0f       	add	r24, r24
    3eca:	99 1f       	adc	r25, r25
    3ecc:	82 1b       	sub	r24, r18
    3ece:	93 0b       	sbc	r25, r19
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	e9 57       	subi	r30, 0x79	; 121
    3ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed6:	40 81       	ld	r20, Z
    3ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eda:	28 2f       	mov	r18, r24
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	c9 01       	movw	r24, r18
    3ee0:	88 0f       	add	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	82 0f       	add	r24, r18
    3ee6:	93 1f       	adc	r25, r19
    3ee8:	88 0f       	add	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	88 0f       	add	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	88 0f       	add	r24, r24
    3ef2:	99 1f       	adc	r25, r25
    3ef4:	82 1b       	sub	r24, r18
    3ef6:	93 0b       	sbc	r25, r19
    3ef8:	fc 01       	movw	r30, r24
    3efa:	e8 57       	subi	r30, 0x78	; 120
    3efc:	fe 4f       	sbci	r31, 0xFE	; 254
    3efe:	90 81       	ld	r25, Z
    3f00:	84 2f       	mov	r24, r20
    3f02:	69 2f       	mov	r22, r25
    3f04:	41 e0       	ldi	r20, 0x01	; 1
    3f06:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	a0 e2       	ldi	r26, 0x20	; 32
    3f10:	b1 e4       	ldi	r27, 0x41	; 65
    3f12:	8b 87       	std	Y+11, r24	; 0x0b
    3f14:	9c 87       	std	Y+12, r25	; 0x0c
    3f16:	ad 87       	std	Y+13, r26	; 0x0d
    3f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	4a ef       	ldi	r20, 0xFA	; 250
    3f28:	53 e4       	ldi	r21, 0x43	; 67
    3f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	8f 83       	std	Y+7, r24	; 0x07
    3f34:	98 87       	std	Y+8, r25	; 0x08
    3f36:	a9 87       	std	Y+9, r26	; 0x09
    3f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f3c:	78 85       	ldd	r23, Y+8	; 0x08
    3f3e:	89 85       	ldd	r24, Y+9	; 0x09
    3f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	40 e8       	ldi	r20, 0x80	; 128
    3f48:	5f e3       	ldi	r21, 0x3F	; 63
    3f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f4e:	88 23       	and	r24, r24
    3f50:	2c f4       	brge	.+10     	; 0x3f5c <LCD_invidSendData+0x4d0>
		__ticks = 1;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
    3f5a:	3f c0       	rjmp	.+126    	; 0x3fda <LCD_invidSendData+0x54e>
	else if (__tmp > 65535)
    3f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5e:	78 85       	ldd	r23, Y+8	; 0x08
    3f60:	89 85       	ldd	r24, Y+9	; 0x09
    3f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	3f ef       	ldi	r19, 0xFF	; 255
    3f68:	4f e7       	ldi	r20, 0x7F	; 127
    3f6a:	57 e4       	ldi	r21, 0x47	; 71
    3f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f70:	18 16       	cp	r1, r24
    3f72:	4c f5       	brge	.+82     	; 0x3fc6 <LCD_invidSendData+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e2       	ldi	r20, 0x20	; 32
    3f82:	51 e4       	ldi	r21, 0x41	; 65
    3f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	9e 83       	std	Y+6, r25	; 0x06
    3f9a:	8d 83       	std	Y+5, r24	; 0x05
    3f9c:	0f c0       	rjmp	.+30     	; 0x3fbc <LCD_invidSendData+0x530>
    3f9e:	82 e3       	ldi	r24, 0x32	; 50
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	9c 83       	std	Y+4, r25	; 0x04
    3fa4:	8b 83       	std	Y+3, r24	; 0x03
    3fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <LCD_invidSendData+0x51e>
    3fae:	9c 83       	std	Y+4, r25	; 0x04
    3fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	69 f7       	brne	.-38     	; 0x3f9e <LCD_invidSendData+0x512>
    3fc4:	14 c0       	rjmp	.+40     	; 0x3fee <LCD_invidSendData+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc8:	78 85       	ldd	r23, Y+8	; 0x08
    3fca:	89 85       	ldd	r24, Y+9	; 0x09
    3fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	9e 83       	std	Y+6, r25	; 0x06
    3fd8:	8d 83       	std	Y+5, r24	; 0x05
    3fda:	8d 81       	ldd	r24, Y+5	; 0x05
    3fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	f1 f7       	brne	.-4      	; 0x3fe6 <LCD_invidSendData+0x55a>
    3fea:	9a 83       	std	Y+2, r25	; 0x02
    3fec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    3fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ff0:	28 2f       	mov	r18, r24
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	c9 01       	movw	r24, r18
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	82 0f       	add	r24, r18
    3ffc:	93 1f       	adc	r25, r19
    3ffe:	88 0f       	add	r24, r24
    4000:	99 1f       	adc	r25, r25
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	88 0f       	add	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	82 1b       	sub	r24, r18
    400c:	93 0b       	sbc	r25, r19
    400e:	fc 01       	movw	r30, r24
    4010:	e9 57       	subi	r30, 0x79	; 121
    4012:	fe 4f       	sbci	r31, 0xFE	; 254
    4014:	40 81       	ld	r20, Z
    4016:	8f 85       	ldd	r24, Y+15	; 0x0f
    4018:	28 2f       	mov	r18, r24
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	c9 01       	movw	r24, r18
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	82 0f       	add	r24, r18
    4024:	93 1f       	adc	r25, r19
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	88 0f       	add	r24, r24
    4030:	99 1f       	adc	r25, r25
    4032:	82 1b       	sub	r24, r18
    4034:	93 0b       	sbc	r25, r19
    4036:	fc 01       	movw	r30, r24
    4038:	e8 57       	subi	r30, 0x78	; 120
    403a:	fe 4f       	sbci	r31, 0xFE	; 254
    403c:	90 81       	ld	r25, Z
    403e:	84 2f       	mov	r24, r20
    4040:	69 2f       	mov	r22, r25
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
	}
}
    4048:	60 96       	adiw	r28, 0x10	; 16
    404a:	0f b6       	in	r0, 0x3f	; 63
    404c:	f8 94       	cli
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	cd bf       	out	0x3d, r28	; 61
    4054:	cf 91       	pop	r28
    4056:	df 91       	pop	r29
    4058:	08 95       	ret

0000405a <LCD_enuDisplayFloatNum>:
ES_T LCD_enuDisplayFloatNum(u8 Copy_u8LCDID ,f32 Copy_f32Num)
{
    405a:	df 93       	push	r29
    405c:	cf 93       	push	r28
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	66 97       	sbiw	r28, 0x16	; 22
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	8a 8b       	std	Y+18, r24	; 0x12
    4070:	4b 8b       	std	Y+19, r20	; 0x13
    4072:	5c 8b       	std	Y+20, r21	; 0x14
    4074:	6d 8b       	std	Y+21, r22	; 0x15
    4076:	7e 8b       	std	Y+22, r23	; 0x16
	ES_T Local_enuErrorState = ES_NOK;
    4078:	19 8a       	std	Y+17, r1	; 0x11
	if(Copy_u8LCDID < LCD_NUM)
    407a:	8a 89       	ldd	r24, Y+18	; 0x12
    407c:	88 23       	and	r24, r24
    407e:	09 f0       	breq	.+2      	; 0x4082 <LCD_enuDisplayFloatNum+0x28>
    4080:	8a c1       	rjmp	.+788    	; 0x4396 <LCD_enuDisplayFloatNum+0x33c>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    4082:	8a 89       	ldd	r24, Y+18	; 0x12
    4084:	28 2f       	mov	r18, r24
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	c9 01       	movw	r24, r18
    408a:	88 0f       	add	r24, r24
    408c:	99 1f       	adc	r25, r25
    408e:	82 0f       	add	r24, r18
    4090:	93 1f       	adc	r25, r19
    4092:	88 0f       	add	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	88 0f       	add	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	82 1b       	sub	r24, r18
    40a0:	93 0b       	sbc	r25, r19
    40a2:	fc 01       	movw	r30, r24
    40a4:	ed 57       	subi	r30, 0x7D	; 125
    40a6:	fe 4f       	sbci	r31, 0xFE	; 254
    40a8:	40 81       	ld	r20, Z
    40aa:	8a 89       	ldd	r24, Y+18	; 0x12
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	c9 01       	movw	r24, r18
    40b2:	88 0f       	add	r24, r24
    40b4:	99 1f       	adc	r25, r25
    40b6:	82 0f       	add	r24, r18
    40b8:	93 1f       	adc	r25, r19
    40ba:	88 0f       	add	r24, r24
    40bc:	99 1f       	adc	r25, r25
    40be:	88 0f       	add	r24, r24
    40c0:	99 1f       	adc	r25, r25
    40c2:	88 0f       	add	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	82 1b       	sub	r24, r18
    40c8:	93 0b       	sbc	r25, r19
    40ca:	fc 01       	movw	r30, r24
    40cc:	ec 57       	subi	r30, 0x7C	; 124
    40ce:	fe 4f       	sbci	r31, 0xFE	; 254
    40d0:	90 81       	ld	r25, Z
    40d2:	84 2f       	mov	r24, r20
    40d4:	69 2f       	mov	r22, r25
    40d6:	41 e0       	ldi	r20, 0x01	; 1
    40d8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

	s32 Local_s32ReverseINT=0;
    40dc:	18 8a       	std	Y+16, r1	; 0x10
    40de:	1f 86       	std	Y+15, r1	; 0x0f
	s32 Local_s32ReverseDEC=0;
    40e0:	1e 86       	std	Y+14, r1	; 0x0e
    40e2:	1d 86       	std	Y+13, r1	; 0x0d
	u8 Local_u8RemainderINT=0 ,Local_u8RemainderDEC=0, Local_u8NumDigitINT=0 , Local_u8NumDigitDEC=0;
    40e4:	1c 86       	std	Y+12, r1	; 0x0c
    40e6:	1b 86       	std	Y+11, r1	; 0x0b
    40e8:	1a 86       	std	Y+10, r1	; 0x0a
    40ea:	19 86       	std	Y+9, r1	; 0x09

	u32 Local_u32IntPart1=0 ; f32 Local_f32FloatPart=0.0 ;
    40ec:	18 86       	std	Y+8, r1	; 0x08
    40ee:	1f 82       	std	Y+7, r1	; 0x07
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	a0 e0       	ldi	r26, 0x00	; 0
    40f6:	b0 e0       	ldi	r27, 0x00	; 0
    40f8:	8b 83       	std	Y+3, r24	; 0x03
    40fa:	9c 83       	std	Y+4, r25	; 0x04
    40fc:	ad 83       	std	Y+5, r26	; 0x05
    40fe:	be 83       	std	Y+6, r27	; 0x06
	u32 Local_u32IntPart2=0 ;
    4100:	1a 82       	std	Y+2, r1	; 0x02
    4102:	19 82       	std	Y+1, r1	; 0x01
	Local_u32IntPart1 = (u32) Copy_f32Num;
    4104:	6b 89       	ldd	r22, Y+19	; 0x13
    4106:	7c 89       	ldd	r23, Y+20	; 0x14
    4108:	8d 89       	ldd	r24, Y+21	; 0x15
    410a:	9e 89       	ldd	r25, Y+22	; 0x16
    410c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	98 87       	std	Y+8, r25	; 0x08
    4116:	8f 83       	std	Y+7, r24	; 0x07

	Local_f32FloatPart = Copy_f32Num - Local_u32IntPart1;
    4118:	8f 81       	ldd	r24, Y+7	; 0x07
    411a:	98 85       	ldd	r25, Y+8	; 0x08
    411c:	cc 01       	movw	r24, r24
    411e:	a0 e0       	ldi	r26, 0x00	; 0
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    412a:	9b 01       	movw	r18, r22
    412c:	ac 01       	movw	r20, r24
    412e:	6b 89       	ldd	r22, Y+19	; 0x13
    4130:	7c 89       	ldd	r23, Y+20	; 0x14
    4132:	8d 89       	ldd	r24, Y+21	; 0x15
    4134:	9e 89       	ldd	r25, Y+22	; 0x16
    4136:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	8b 83       	std	Y+3, r24	; 0x03
    4140:	9c 83       	std	Y+4, r25	; 0x04
    4142:	ad 83       	std	Y+5, r26	; 0x05
    4144:	be 83       	std	Y+6, r27	; 0x06
	Local_u32IntPart2 = Local_f32FloatPart * 10000;
    4146:	6b 81       	ldd	r22, Y+3	; 0x03
    4148:	7c 81       	ldd	r23, Y+4	; 0x04
    414a:	8d 81       	ldd	r24, Y+5	; 0x05
    414c:	9e 81       	ldd	r25, Y+6	; 0x06
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e4       	ldi	r19, 0x40	; 64
    4152:	4c e1       	ldi	r20, 0x1C	; 28
    4154:	56 e4       	ldi	r21, 0x46	; 70
    4156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	9a 83       	std	Y+2, r25	; 0x02
    416c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_f32Num <0)
    416e:	6b 89       	ldd	r22, Y+19	; 0x13
    4170:	7c 89       	ldd	r23, Y+20	; 0x14
    4172:	8d 89       	ldd	r24, Y+21	; 0x15
    4174:	9e 89       	ldd	r25, Y+22	; 0x16
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e0       	ldi	r20, 0x00	; 0
    417c:	50 e0       	ldi	r21, 0x00	; 0
    417e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4182:	88 23       	and	r24, r24
    4184:	b4 f5       	brge	.+108    	; 0x41f2 <LCD_enuDisplayFloatNum+0x198>
	{
		LCD_invidSendData(Copy_u8LCDID,'-');
    4186:	8a 89       	ldd	r24, Y+18	; 0x12
    4188:	6d e2       	ldi	r22, 0x2D	; 45
    418a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
		Copy_f32Num *= -1 ;
    418e:	8b 89       	ldd	r24, Y+19	; 0x13
    4190:	9c 89       	ldd	r25, Y+20	; 0x14
    4192:	ad 89       	ldd	r26, Y+21	; 0x15
    4194:	be 89       	ldd	r27, Y+22	; 0x16
    4196:	b0 58       	subi	r27, 0x80	; 128
    4198:	8b 8b       	std	Y+19, r24	; 0x13
    419a:	9c 8b       	std	Y+20, r25	; 0x14
    419c:	ad 8b       	std	Y+21, r26	; 0x15
    419e:	be 8b       	std	Y+22, r27	; 0x16
    41a0:	28 c0       	rjmp	.+80     	; 0x41f2 <LCD_enuDisplayFloatNum+0x198>
	}
	while (Local_u32IntPart1)
	{
		Local_u8RemainderINT = Local_u32IntPart1 % 10;
    41a2:	8f 81       	ldd	r24, Y+7	; 0x07
    41a4:	98 85       	ldd	r25, Y+8	; 0x08
    41a6:	2a e0       	ldi	r18, 0x0A	; 10
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	b9 01       	movw	r22, r18
    41ac:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <__udivmodhi4>
    41b0:	8c 87       	std	Y+12, r24	; 0x0c
		Local_s32ReverseINT = Local_s32ReverseINT * 10 + Local_u8RemainderINT;
    41b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b4:	98 89       	ldd	r25, Y+16	; 0x10
    41b6:	9c 01       	movw	r18, r24
    41b8:	22 0f       	add	r18, r18
    41ba:	33 1f       	adc	r19, r19
    41bc:	c9 01       	movw	r24, r18
    41be:	88 0f       	add	r24, r24
    41c0:	99 1f       	adc	r25, r25
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	28 0f       	add	r18, r24
    41c8:	39 1f       	adc	r19, r25
    41ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    41cc:	88 2f       	mov	r24, r24
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	82 0f       	add	r24, r18
    41d2:	93 1f       	adc	r25, r19
    41d4:	98 8b       	std	Y+16, r25	; 0x10
    41d6:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u32IntPart1 /=10;
    41d8:	8f 81       	ldd	r24, Y+7	; 0x07
    41da:	98 85       	ldd	r25, Y+8	; 0x08
    41dc:	2a e0       	ldi	r18, 0x0A	; 10
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	b9 01       	movw	r22, r18
    41e2:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <__udivmodhi4>
    41e6:	cb 01       	movw	r24, r22
    41e8:	98 87       	std	Y+8, r25	; 0x08
    41ea:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8NumDigitINT ++;
    41ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	8a 87       	std	Y+10, r24	; 0x0a
	if(Copy_f32Num <0)
	{
		LCD_invidSendData(Copy_u8LCDID,'-');
		Copy_f32Num *= -1 ;
	}
	while (Local_u32IntPart1)
    41f2:	8f 81       	ldd	r24, Y+7	; 0x07
    41f4:	98 85       	ldd	r25, Y+8	; 0x08
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	a1 f6       	brne	.-88     	; 0x41a2 <LCD_enuDisplayFloatNum+0x148>
    41fa:	28 c0       	rjmp	.+80     	; 0x424c <LCD_enuDisplayFloatNum+0x1f2>
		Local_u32IntPart1 /=10;
		Local_u8NumDigitINT ++;
	}
	while (Local_u32IntPart2)
	{
		Local_u8RemainderDEC = Local_u32IntPart2 % 10;
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4200:	2a e0       	ldi	r18, 0x0A	; 10
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	b9 01       	movw	r22, r18
    4206:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <__udivmodhi4>
    420a:	8b 87       	std	Y+11, r24	; 0x0b
		Local_s32ReverseDEC = Local_s32ReverseDEC * 10 + Local_u8RemainderDEC;
    420c:	8d 85       	ldd	r24, Y+13	; 0x0d
    420e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4210:	9c 01       	movw	r18, r24
    4212:	22 0f       	add	r18, r18
    4214:	33 1f       	adc	r19, r19
    4216:	c9 01       	movw	r24, r18
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	88 0f       	add	r24, r24
    421e:	99 1f       	adc	r25, r25
    4220:	28 0f       	add	r18, r24
    4222:	39 1f       	adc	r19, r25
    4224:	8b 85       	ldd	r24, Y+11	; 0x0b
    4226:	88 2f       	mov	r24, r24
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	82 0f       	add	r24, r18
    422c:	93 1f       	adc	r25, r19
    422e:	9e 87       	std	Y+14, r25	; 0x0e
    4230:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u32IntPart2 /=10;
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	2a e0       	ldi	r18, 0x0A	; 10
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	b9 01       	movw	r22, r18
    423c:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <__udivmodhi4>
    4240:	cb 01       	movw	r24, r22
    4242:	9a 83       	std	Y+2, r25	; 0x02
    4244:	89 83       	std	Y+1, r24	; 0x01
		Local_u8NumDigitDEC ++;
    4246:	89 85       	ldd	r24, Y+9	; 0x09
    4248:	8f 5f       	subi	r24, 0xFF	; 255
    424a:	89 87       	std	Y+9, r24	; 0x09
		Local_u8RemainderINT = Local_u32IntPart1 % 10;
		Local_s32ReverseINT = Local_s32ReverseINT * 10 + Local_u8RemainderINT;
		Local_u32IntPart1 /=10;
		Local_u8NumDigitINT ++;
	}
	while (Local_u32IntPart2)
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	9a 81       	ldd	r25, Y+2	; 0x02
    4250:	00 97       	sbiw	r24, 0x00	; 0
    4252:	a1 f6       	brne	.-88     	; 0x41fc <LCD_enuDisplayFloatNum+0x1a2>
    4254:	49 c0       	rjmp	.+146    	; 0x42e8 <LCD_enuDisplayFloatNum+0x28e>
		Local_u32IntPart2 /=10;
		Local_u8NumDigitDEC ++;
	}
	while (Local_u8NumDigitINT)
	{
		Local_u8RemainderINT = Local_s32ReverseINT % 10;
    4256:	8f 85       	ldd	r24, Y+15	; 0x0f
    4258:	98 89       	ldd	r25, Y+16	; 0x10
    425a:	2a e0       	ldi	r18, 0x0A	; 10
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	b9 01       	movw	r22, r18
    4260:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    4264:	8c 87       	std	Y+12, r24	; 0x0c
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    4266:	8a 89       	ldd	r24, Y+18	; 0x12
    4268:	28 2f       	mov	r18, r24
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	c9 01       	movw	r24, r18
    426e:	88 0f       	add	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	82 0f       	add	r24, r18
    4274:	93 1f       	adc	r25, r19
    4276:	88 0f       	add	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	88 0f       	add	r24, r24
    427c:	99 1f       	adc	r25, r25
    427e:	88 0f       	add	r24, r24
    4280:	99 1f       	adc	r25, r25
    4282:	82 1b       	sub	r24, r18
    4284:	93 0b       	sbc	r25, r19
    4286:	fc 01       	movw	r30, r24
    4288:	ed 57       	subi	r30, 0x7D	; 125
    428a:	fe 4f       	sbci	r31, 0xFE	; 254
    428c:	40 81       	ld	r20, Z
    428e:	8a 89       	ldd	r24, Y+18	; 0x12
    4290:	28 2f       	mov	r18, r24
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	c9 01       	movw	r24, r18
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	82 0f       	add	r24, r18
    429c:	93 1f       	adc	r25, r19
    429e:	88 0f       	add	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	88 0f       	add	r24, r24
    42a4:	99 1f       	adc	r25, r25
    42a6:	88 0f       	add	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	82 1b       	sub	r24, r18
    42ac:	93 0b       	sbc	r25, r19
    42ae:	fc 01       	movw	r30, r24
    42b0:	ec 57       	subi	r30, 0x7C	; 124
    42b2:	fe 4f       	sbci	r31, 0xFE	; 254
    42b4:	90 81       	ld	r25, Z
    42b6:	84 2f       	mov	r24, r20
    42b8:	69 2f       	mov	r22, r25
    42ba:	41 e0       	ldi	r20, 0x01	; 1
    42bc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderINT + '0'));
    42c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    42c2:	98 2f       	mov	r25, r24
    42c4:	90 5d       	subi	r25, 0xD0	; 208
    42c6:	8a 89       	ldd	r24, Y+18	; 0x12
    42c8:	69 2f       	mov	r22, r25
    42ca:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
		Local_s32ReverseINT /= 10;
    42ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d0:	98 89       	ldd	r25, Y+16	; 0x10
    42d2:	2a e0       	ldi	r18, 0x0A	; 10
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	b9 01       	movw	r22, r18
    42d8:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    42dc:	cb 01       	movw	r24, r22
    42de:	98 8b       	std	Y+16, r25	; 0x10
    42e0:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u8NumDigitINT --;
    42e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42e4:	81 50       	subi	r24, 0x01	; 1
    42e6:	8a 87       	std	Y+10, r24	; 0x0a
		Local_u8RemainderDEC = Local_u32IntPart2 % 10;
		Local_s32ReverseDEC = Local_s32ReverseDEC * 10 + Local_u8RemainderDEC;
		Local_u32IntPart2 /=10;
		Local_u8NumDigitDEC ++;
	}
	while (Local_u8NumDigitINT)
    42e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    42ea:	88 23       	and	r24, r24
    42ec:	09 f0       	breq	.+2      	; 0x42f0 <LCD_enuDisplayFloatNum+0x296>
    42ee:	b3 cf       	rjmp	.-154    	; 0x4256 <LCD_enuDisplayFloatNum+0x1fc>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderINT + '0'));
		Local_s32ReverseINT /= 10;
		Local_u8NumDigitINT --;
	}
	LCD_invidSendData(Copy_u8LCDID,'.');
    42f0:	8a 89       	ldd	r24, Y+18	; 0x12
    42f2:	6e e2       	ldi	r22, 0x2E	; 46
    42f4:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
    42f8:	49 c0       	rjmp	.+146    	; 0x438c <LCD_enuDisplayFloatNum+0x332>
	while (Local_u8NumDigitDEC)
	{
		Local_u8RemainderDEC = Local_s32ReverseDEC % 10;
    42fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fe:	2a e0       	ldi	r18, 0x0A	; 10
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	b9 01       	movw	r22, r18
    4304:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    4308:	8b 87       	std	Y+11, r24	; 0x0b
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    430a:	8a 89       	ldd	r24, Y+18	; 0x12
    430c:	28 2f       	mov	r18, r24
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	c9 01       	movw	r24, r18
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	82 0f       	add	r24, r18
    4318:	93 1f       	adc	r25, r19
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	88 0f       	add	r24, r24
    4320:	99 1f       	adc	r25, r25
    4322:	88 0f       	add	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	82 1b       	sub	r24, r18
    4328:	93 0b       	sbc	r25, r19
    432a:	fc 01       	movw	r30, r24
    432c:	ed 57       	subi	r30, 0x7D	; 125
    432e:	fe 4f       	sbci	r31, 0xFE	; 254
    4330:	40 81       	ld	r20, Z
    4332:	8a 89       	ldd	r24, Y+18	; 0x12
    4334:	28 2f       	mov	r18, r24
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	c9 01       	movw	r24, r18
    433a:	88 0f       	add	r24, r24
    433c:	99 1f       	adc	r25, r25
    433e:	82 0f       	add	r24, r18
    4340:	93 1f       	adc	r25, r19
    4342:	88 0f       	add	r24, r24
    4344:	99 1f       	adc	r25, r25
    4346:	88 0f       	add	r24, r24
    4348:	99 1f       	adc	r25, r25
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	82 1b       	sub	r24, r18
    4350:	93 0b       	sbc	r25, r19
    4352:	fc 01       	movw	r30, r24
    4354:	ec 57       	subi	r30, 0x7C	; 124
    4356:	fe 4f       	sbci	r31, 0xFE	; 254
    4358:	90 81       	ld	r25, Z
    435a:	84 2f       	mov	r24, r20
    435c:	69 2f       	mov	r22, r25
    435e:	41 e0       	ldi	r20, 0x01	; 1
    4360:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderDEC + '0'));
    4364:	8b 85       	ldd	r24, Y+11	; 0x0b
    4366:	98 2f       	mov	r25, r24
    4368:	90 5d       	subi	r25, 0xD0	; 208
    436a:	8a 89       	ldd	r24, Y+18	; 0x12
    436c:	69 2f       	mov	r22, r25
    436e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <LCD_invidSendData>
		Local_s32ReverseDEC /= 10;
    4372:	8d 85       	ldd	r24, Y+13	; 0x0d
    4374:	9e 85       	ldd	r25, Y+14	; 0x0e
    4376:	2a e0       	ldi	r18, 0x0A	; 10
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	b9 01       	movw	r22, r18
    437c:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
    4380:	cb 01       	movw	r24, r22
    4382:	9e 87       	std	Y+14, r25	; 0x0e
    4384:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u8NumDigitDEC --;
    4386:	89 85       	ldd	r24, Y+9	; 0x09
    4388:	81 50       	subi	r24, 0x01	; 1
    438a:	89 87       	std	Y+9, r24	; 0x09
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderINT + '0'));
		Local_s32ReverseINT /= 10;
		Local_u8NumDigitINT --;
	}
	LCD_invidSendData(Copy_u8LCDID,'.');
	while (Local_u8NumDigitDEC)
    438c:	89 85       	ldd	r24, Y+9	; 0x09
    438e:	88 23       	and	r24, r24
    4390:	09 f0       	breq	.+2      	; 0x4394 <LCD_enuDisplayFloatNum+0x33a>
    4392:	b3 cf       	rjmp	.-154    	; 0x42fa <LCD_enuDisplayFloatNum+0x2a0>
    4394:	02 c0       	rjmp	.+4      	; 0x439a <LCD_enuDisplayFloatNum+0x340>
		Local_u8NumDigitDEC --;
	}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    4396:	83 e0       	ldi	r24, 0x03	; 3
    4398:	89 8b       	std	Y+17, r24	; 0x11
	}
	return Local_enuErrorState;
    439a:	89 89       	ldd	r24, Y+17	; 0x11
}
    439c:	66 96       	adiw	r28, 0x16	; 22
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	f8 94       	cli
    43a2:	de bf       	out	0x3e, r29	; 62
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	cd bf       	out	0x3d, r28	; 61
    43a8:	cf 91       	pop	r28
    43aa:	df 91       	pop	r29
    43ac:	08 95       	ret

000043ae <Seven_Segment_enuInit>:
#include "7-Seg_Private.h"

extern SEG_T SEVSEG_AstrSegConfig [SEVEN_SEG_NUM];

ES_T Seven_Segment_enuInit(SEG_T *Copy_PstrSegConfig)
{
    43ae:	df 93       	push	r29
    43b0:	cf 93       	push	r28
    43b2:	00 d0       	rcall	.+0      	; 0x43b4 <Seven_Segment_enuInit+0x6>
    43b4:	00 d0       	rcall	.+0      	; 0x43b6 <Seven_Segment_enuInit+0x8>
    43b6:	0f 92       	push	r0
    43b8:	cd b7       	in	r28, 0x3d	; 61
    43ba:	de b7       	in	r29, 0x3e	; 62
    43bc:	9c 83       	std	Y+4, r25	; 0x04
    43be:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    43c0:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iter =0;
    43c2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PstrSegConfig != NULL)
    43c4:	8b 81       	ldd	r24, Y+3	; 0x03
    43c6:	9c 81       	ldd	r25, Y+4	; 0x04
    43c8:	00 97       	sbiw	r24, 0x00	; 0
    43ca:	09 f4       	brne	.+2      	; 0x43ce <Seven_Segment_enuInit+0x20>
    43cc:	55 c2       	rjmp	.+1194   	; 0x4878 <Seven_Segment_enuInit+0x4ca>
	{
		for (Local_u8Iter=0; Local_u8Iter < SEVEN_SEG_NUM; Local_u8Iter++)
    43ce:	19 82       	std	Y+1, r1	; 0x01
    43d0:	4a c2       	rjmp	.+1172   	; 0x4866 <Seven_Segment_enuInit+0x4b8>
		{
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8APort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8APin, DIO_u8OUTPUT);
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	48 2f       	mov	r20, r24
    43d6:	50 e0       	ldi	r21, 0x00	; 0
    43d8:	ca 01       	movw	r24, r20
    43da:	88 0f       	add	r24, r24
    43dc:	99 1f       	adc	r25, r25
    43de:	9c 01       	movw	r18, r24
    43e0:	22 0f       	add	r18, r18
    43e2:	33 1f       	adc	r19, r19
    43e4:	22 0f       	add	r18, r18
    43e6:	33 1f       	adc	r19, r19
    43e8:	22 0f       	add	r18, r18
    43ea:	33 1f       	adc	r19, r19
    43ec:	82 0f       	add	r24, r18
    43ee:	93 1f       	adc	r25, r19
    43f0:	9c 01       	movw	r18, r24
    43f2:	24 0f       	add	r18, r20
    43f4:	35 1f       	adc	r19, r21
    43f6:	8b 81       	ldd	r24, Y+3	; 0x03
    43f8:	9c 81       	ldd	r25, Y+4	; 0x04
    43fa:	fc 01       	movw	r30, r24
    43fc:	e2 0f       	add	r30, r18
    43fe:	f3 1f       	adc	r31, r19
    4400:	60 81       	ld	r22, Z
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	48 2f       	mov	r20, r24
    4406:	50 e0       	ldi	r21, 0x00	; 0
    4408:	ca 01       	movw	r24, r20
    440a:	88 0f       	add	r24, r24
    440c:	99 1f       	adc	r25, r25
    440e:	9c 01       	movw	r18, r24
    4410:	22 0f       	add	r18, r18
    4412:	33 1f       	adc	r19, r19
    4414:	22 0f       	add	r18, r18
    4416:	33 1f       	adc	r19, r19
    4418:	22 0f       	add	r18, r18
    441a:	33 1f       	adc	r19, r19
    441c:	82 0f       	add	r24, r18
    441e:	93 1f       	adc	r25, r19
    4420:	9c 01       	movw	r18, r24
    4422:	24 0f       	add	r18, r20
    4424:	35 1f       	adc	r19, r21
    4426:	8b 81       	ldd	r24, Y+3	; 0x03
    4428:	9c 81       	ldd	r25, Y+4	; 0x04
    442a:	fc 01       	movw	r30, r24
    442c:	e2 0f       	add	r30, r18
    442e:	f3 1f       	adc	r31, r19
    4430:	91 81       	ldd	r25, Z+1	; 0x01
    4432:	86 2f       	mov	r24, r22
    4434:	69 2f       	mov	r22, r25
    4436:	41 e0       	ldi	r20, 0x01	; 1
    4438:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8BPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8BPin, DIO_u8OUTPUT);
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	48 2f       	mov	r20, r24
    4440:	50 e0       	ldi	r21, 0x00	; 0
    4442:	ca 01       	movw	r24, r20
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	9c 01       	movw	r18, r24
    444a:	22 0f       	add	r18, r18
    444c:	33 1f       	adc	r19, r19
    444e:	22 0f       	add	r18, r18
    4450:	33 1f       	adc	r19, r19
    4452:	22 0f       	add	r18, r18
    4454:	33 1f       	adc	r19, r19
    4456:	82 0f       	add	r24, r18
    4458:	93 1f       	adc	r25, r19
    445a:	9c 01       	movw	r18, r24
    445c:	24 0f       	add	r18, r20
    445e:	35 1f       	adc	r19, r21
    4460:	8b 81       	ldd	r24, Y+3	; 0x03
    4462:	9c 81       	ldd	r25, Y+4	; 0x04
    4464:	fc 01       	movw	r30, r24
    4466:	e2 0f       	add	r30, r18
    4468:	f3 1f       	adc	r31, r19
    446a:	62 81       	ldd	r22, Z+2	; 0x02
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	48 2f       	mov	r20, r24
    4470:	50 e0       	ldi	r21, 0x00	; 0
    4472:	ca 01       	movw	r24, r20
    4474:	88 0f       	add	r24, r24
    4476:	99 1f       	adc	r25, r25
    4478:	9c 01       	movw	r18, r24
    447a:	22 0f       	add	r18, r18
    447c:	33 1f       	adc	r19, r19
    447e:	22 0f       	add	r18, r18
    4480:	33 1f       	adc	r19, r19
    4482:	22 0f       	add	r18, r18
    4484:	33 1f       	adc	r19, r19
    4486:	82 0f       	add	r24, r18
    4488:	93 1f       	adc	r25, r19
    448a:	9c 01       	movw	r18, r24
    448c:	24 0f       	add	r18, r20
    448e:	35 1f       	adc	r19, r21
    4490:	8b 81       	ldd	r24, Y+3	; 0x03
    4492:	9c 81       	ldd	r25, Y+4	; 0x04
    4494:	fc 01       	movw	r30, r24
    4496:	e2 0f       	add	r30, r18
    4498:	f3 1f       	adc	r31, r19
    449a:	93 81       	ldd	r25, Z+3	; 0x03
    449c:	86 2f       	mov	r24, r22
    449e:	69 2f       	mov	r22, r25
    44a0:	41 e0       	ldi	r20, 0x01	; 1
    44a2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8CPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8CPin, DIO_u8OUTPUT);
    44a6:	89 81       	ldd	r24, Y+1	; 0x01
    44a8:	48 2f       	mov	r20, r24
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	ca 01       	movw	r24, r20
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	9c 01       	movw	r18, r24
    44b4:	22 0f       	add	r18, r18
    44b6:	33 1f       	adc	r19, r19
    44b8:	22 0f       	add	r18, r18
    44ba:	33 1f       	adc	r19, r19
    44bc:	22 0f       	add	r18, r18
    44be:	33 1f       	adc	r19, r19
    44c0:	82 0f       	add	r24, r18
    44c2:	93 1f       	adc	r25, r19
    44c4:	9c 01       	movw	r18, r24
    44c6:	24 0f       	add	r18, r20
    44c8:	35 1f       	adc	r19, r21
    44ca:	8b 81       	ldd	r24, Y+3	; 0x03
    44cc:	9c 81       	ldd	r25, Y+4	; 0x04
    44ce:	fc 01       	movw	r30, r24
    44d0:	e2 0f       	add	r30, r18
    44d2:	f3 1f       	adc	r31, r19
    44d4:	64 81       	ldd	r22, Z+4	; 0x04
    44d6:	89 81       	ldd	r24, Y+1	; 0x01
    44d8:	48 2f       	mov	r20, r24
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	ca 01       	movw	r24, r20
    44de:	88 0f       	add	r24, r24
    44e0:	99 1f       	adc	r25, r25
    44e2:	9c 01       	movw	r18, r24
    44e4:	22 0f       	add	r18, r18
    44e6:	33 1f       	adc	r19, r19
    44e8:	22 0f       	add	r18, r18
    44ea:	33 1f       	adc	r19, r19
    44ec:	22 0f       	add	r18, r18
    44ee:	33 1f       	adc	r19, r19
    44f0:	82 0f       	add	r24, r18
    44f2:	93 1f       	adc	r25, r19
    44f4:	9c 01       	movw	r18, r24
    44f6:	24 0f       	add	r18, r20
    44f8:	35 1f       	adc	r19, r21
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	9c 81       	ldd	r25, Y+4	; 0x04
    44fe:	fc 01       	movw	r30, r24
    4500:	e2 0f       	add	r30, r18
    4502:	f3 1f       	adc	r31, r19
    4504:	95 81       	ldd	r25, Z+5	; 0x05
    4506:	86 2f       	mov	r24, r22
    4508:	69 2f       	mov	r22, r25
    450a:	41 e0       	ldi	r20, 0x01	; 1
    450c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8DPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8DPin, DIO_u8OUTPUT);
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	48 2f       	mov	r20, r24
    4514:	50 e0       	ldi	r21, 0x00	; 0
    4516:	ca 01       	movw	r24, r20
    4518:	88 0f       	add	r24, r24
    451a:	99 1f       	adc	r25, r25
    451c:	9c 01       	movw	r18, r24
    451e:	22 0f       	add	r18, r18
    4520:	33 1f       	adc	r19, r19
    4522:	22 0f       	add	r18, r18
    4524:	33 1f       	adc	r19, r19
    4526:	22 0f       	add	r18, r18
    4528:	33 1f       	adc	r19, r19
    452a:	82 0f       	add	r24, r18
    452c:	93 1f       	adc	r25, r19
    452e:	9c 01       	movw	r18, r24
    4530:	24 0f       	add	r18, r20
    4532:	35 1f       	adc	r19, r21
    4534:	8b 81       	ldd	r24, Y+3	; 0x03
    4536:	9c 81       	ldd	r25, Y+4	; 0x04
    4538:	fc 01       	movw	r30, r24
    453a:	e2 0f       	add	r30, r18
    453c:	f3 1f       	adc	r31, r19
    453e:	66 81       	ldd	r22, Z+6	; 0x06
    4540:	89 81       	ldd	r24, Y+1	; 0x01
    4542:	48 2f       	mov	r20, r24
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	ca 01       	movw	r24, r20
    4548:	88 0f       	add	r24, r24
    454a:	99 1f       	adc	r25, r25
    454c:	9c 01       	movw	r18, r24
    454e:	22 0f       	add	r18, r18
    4550:	33 1f       	adc	r19, r19
    4552:	22 0f       	add	r18, r18
    4554:	33 1f       	adc	r19, r19
    4556:	22 0f       	add	r18, r18
    4558:	33 1f       	adc	r19, r19
    455a:	82 0f       	add	r24, r18
    455c:	93 1f       	adc	r25, r19
    455e:	9c 01       	movw	r18, r24
    4560:	24 0f       	add	r18, r20
    4562:	35 1f       	adc	r19, r21
    4564:	8b 81       	ldd	r24, Y+3	; 0x03
    4566:	9c 81       	ldd	r25, Y+4	; 0x04
    4568:	fc 01       	movw	r30, r24
    456a:	e2 0f       	add	r30, r18
    456c:	f3 1f       	adc	r31, r19
    456e:	97 81       	ldd	r25, Z+7	; 0x07
    4570:	86 2f       	mov	r24, r22
    4572:	69 2f       	mov	r22, r25
    4574:	41 e0       	ldi	r20, 0x01	; 1
    4576:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8EPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8EPin, DIO_u8OUTPUT);
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	48 2f       	mov	r20, r24
    457e:	50 e0       	ldi	r21, 0x00	; 0
    4580:	ca 01       	movw	r24, r20
    4582:	88 0f       	add	r24, r24
    4584:	99 1f       	adc	r25, r25
    4586:	9c 01       	movw	r18, r24
    4588:	22 0f       	add	r18, r18
    458a:	33 1f       	adc	r19, r19
    458c:	22 0f       	add	r18, r18
    458e:	33 1f       	adc	r19, r19
    4590:	22 0f       	add	r18, r18
    4592:	33 1f       	adc	r19, r19
    4594:	82 0f       	add	r24, r18
    4596:	93 1f       	adc	r25, r19
    4598:	9c 01       	movw	r18, r24
    459a:	24 0f       	add	r18, r20
    459c:	35 1f       	adc	r19, r21
    459e:	8b 81       	ldd	r24, Y+3	; 0x03
    45a0:	9c 81       	ldd	r25, Y+4	; 0x04
    45a2:	fc 01       	movw	r30, r24
    45a4:	e2 0f       	add	r30, r18
    45a6:	f3 1f       	adc	r31, r19
    45a8:	60 85       	ldd	r22, Z+8	; 0x08
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	48 2f       	mov	r20, r24
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	ca 01       	movw	r24, r20
    45b2:	88 0f       	add	r24, r24
    45b4:	99 1f       	adc	r25, r25
    45b6:	9c 01       	movw	r18, r24
    45b8:	22 0f       	add	r18, r18
    45ba:	33 1f       	adc	r19, r19
    45bc:	22 0f       	add	r18, r18
    45be:	33 1f       	adc	r19, r19
    45c0:	22 0f       	add	r18, r18
    45c2:	33 1f       	adc	r19, r19
    45c4:	82 0f       	add	r24, r18
    45c6:	93 1f       	adc	r25, r19
    45c8:	9c 01       	movw	r18, r24
    45ca:	24 0f       	add	r18, r20
    45cc:	35 1f       	adc	r19, r21
    45ce:	8b 81       	ldd	r24, Y+3	; 0x03
    45d0:	9c 81       	ldd	r25, Y+4	; 0x04
    45d2:	fc 01       	movw	r30, r24
    45d4:	e2 0f       	add	r30, r18
    45d6:	f3 1f       	adc	r31, r19
    45d8:	91 85       	ldd	r25, Z+9	; 0x09
    45da:	86 2f       	mov	r24, r22
    45dc:	69 2f       	mov	r22, r25
    45de:	41 e0       	ldi	r20, 0x01	; 1
    45e0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8FPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8FPin, DIO_u8OUTPUT);
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	48 2f       	mov	r20, r24
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	ca 01       	movw	r24, r20
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	9c 01       	movw	r18, r24
    45f2:	22 0f       	add	r18, r18
    45f4:	33 1f       	adc	r19, r19
    45f6:	22 0f       	add	r18, r18
    45f8:	33 1f       	adc	r19, r19
    45fa:	22 0f       	add	r18, r18
    45fc:	33 1f       	adc	r19, r19
    45fe:	82 0f       	add	r24, r18
    4600:	93 1f       	adc	r25, r19
    4602:	9c 01       	movw	r18, r24
    4604:	24 0f       	add	r18, r20
    4606:	35 1f       	adc	r19, r21
    4608:	8b 81       	ldd	r24, Y+3	; 0x03
    460a:	9c 81       	ldd	r25, Y+4	; 0x04
    460c:	fc 01       	movw	r30, r24
    460e:	e2 0f       	add	r30, r18
    4610:	f3 1f       	adc	r31, r19
    4612:	62 85       	ldd	r22, Z+10	; 0x0a
    4614:	89 81       	ldd	r24, Y+1	; 0x01
    4616:	48 2f       	mov	r20, r24
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	ca 01       	movw	r24, r20
    461c:	88 0f       	add	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	9c 01       	movw	r18, r24
    4622:	22 0f       	add	r18, r18
    4624:	33 1f       	adc	r19, r19
    4626:	22 0f       	add	r18, r18
    4628:	33 1f       	adc	r19, r19
    462a:	22 0f       	add	r18, r18
    462c:	33 1f       	adc	r19, r19
    462e:	82 0f       	add	r24, r18
    4630:	93 1f       	adc	r25, r19
    4632:	9c 01       	movw	r18, r24
    4634:	24 0f       	add	r18, r20
    4636:	35 1f       	adc	r19, r21
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	9c 81       	ldd	r25, Y+4	; 0x04
    463c:	fc 01       	movw	r30, r24
    463e:	e2 0f       	add	r30, r18
    4640:	f3 1f       	adc	r31, r19
    4642:	93 85       	ldd	r25, Z+11	; 0x0b
    4644:	86 2f       	mov	r24, r22
    4646:	69 2f       	mov	r22, r25
    4648:	41 e0       	ldi	r20, 0x01	; 1
    464a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8GPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8GPin, DIO_u8OUTPUT);
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	48 2f       	mov	r20, r24
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	ca 01       	movw	r24, r20
    4656:	88 0f       	add	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	9c 01       	movw	r18, r24
    465c:	22 0f       	add	r18, r18
    465e:	33 1f       	adc	r19, r19
    4660:	22 0f       	add	r18, r18
    4662:	33 1f       	adc	r19, r19
    4664:	22 0f       	add	r18, r18
    4666:	33 1f       	adc	r19, r19
    4668:	82 0f       	add	r24, r18
    466a:	93 1f       	adc	r25, r19
    466c:	9c 01       	movw	r18, r24
    466e:	24 0f       	add	r18, r20
    4670:	35 1f       	adc	r19, r21
    4672:	8b 81       	ldd	r24, Y+3	; 0x03
    4674:	9c 81       	ldd	r25, Y+4	; 0x04
    4676:	fc 01       	movw	r30, r24
    4678:	e2 0f       	add	r30, r18
    467a:	f3 1f       	adc	r31, r19
    467c:	64 85       	ldd	r22, Z+12	; 0x0c
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	48 2f       	mov	r20, r24
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	ca 01       	movw	r24, r20
    4686:	88 0f       	add	r24, r24
    4688:	99 1f       	adc	r25, r25
    468a:	9c 01       	movw	r18, r24
    468c:	22 0f       	add	r18, r18
    468e:	33 1f       	adc	r19, r19
    4690:	22 0f       	add	r18, r18
    4692:	33 1f       	adc	r19, r19
    4694:	22 0f       	add	r18, r18
    4696:	33 1f       	adc	r19, r19
    4698:	82 0f       	add	r24, r18
    469a:	93 1f       	adc	r25, r19
    469c:	9c 01       	movw	r18, r24
    469e:	24 0f       	add	r18, r20
    46a0:	35 1f       	adc	r19, r21
    46a2:	8b 81       	ldd	r24, Y+3	; 0x03
    46a4:	9c 81       	ldd	r25, Y+4	; 0x04
    46a6:	fc 01       	movw	r30, r24
    46a8:	e2 0f       	add	r30, r18
    46aa:	f3 1f       	adc	r31, r19
    46ac:	95 85       	ldd	r25, Z+13	; 0x0d
    46ae:	86 2f       	mov	r24, r22
    46b0:	69 2f       	mov	r22, r25
    46b2:	41 e0       	ldi	r20, 0x01	; 1
    46b4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

			if (Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Port != NOT_CONNECTED &&
    46b8:	89 81       	ldd	r24, Y+1	; 0x01
    46ba:	48 2f       	mov	r20, r24
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	ca 01       	movw	r24, r20
    46c0:	88 0f       	add	r24, r24
    46c2:	99 1f       	adc	r25, r25
    46c4:	9c 01       	movw	r18, r24
    46c6:	22 0f       	add	r18, r18
    46c8:	33 1f       	adc	r19, r19
    46ca:	22 0f       	add	r18, r18
    46cc:	33 1f       	adc	r19, r19
    46ce:	22 0f       	add	r18, r18
    46d0:	33 1f       	adc	r19, r19
    46d2:	82 0f       	add	r24, r18
    46d4:	93 1f       	adc	r25, r19
    46d6:	9c 01       	movw	r18, r24
    46d8:	24 0f       	add	r18, r20
    46da:	35 1f       	adc	r19, r21
    46dc:	8b 81       	ldd	r24, Y+3	; 0x03
    46de:	9c 81       	ldd	r25, Y+4	; 0x04
    46e0:	fc 01       	movw	r30, r24
    46e2:	e2 0f       	add	r30, r18
    46e4:	f3 1f       	adc	r31, r19
    46e6:	86 85       	ldd	r24, Z+14	; 0x0e
    46e8:	84 31       	cpi	r24, 0x14	; 20
    46ea:	09 f4       	brne	.+2      	; 0x46ee <Seven_Segment_enuInit+0x340>
    46ec:	4f c0       	rjmp	.+158    	; 0x478c <Seven_Segment_enuInit+0x3de>
    46ee:	89 81       	ldd	r24, Y+1	; 0x01
    46f0:	48 2f       	mov	r20, r24
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	ca 01       	movw	r24, r20
    46f6:	88 0f       	add	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	9c 01       	movw	r18, r24
    46fc:	22 0f       	add	r18, r18
    46fe:	33 1f       	adc	r19, r19
    4700:	22 0f       	add	r18, r18
    4702:	33 1f       	adc	r19, r19
    4704:	22 0f       	add	r18, r18
    4706:	33 1f       	adc	r19, r19
    4708:	82 0f       	add	r24, r18
    470a:	93 1f       	adc	r25, r19
    470c:	9c 01       	movw	r18, r24
    470e:	24 0f       	add	r18, r20
    4710:	35 1f       	adc	r19, r21
    4712:	8b 81       	ldd	r24, Y+3	; 0x03
    4714:	9c 81       	ldd	r25, Y+4	; 0x04
    4716:	fc 01       	movw	r30, r24
    4718:	e2 0f       	add	r30, r18
    471a:	f3 1f       	adc	r31, r19
    471c:	87 85       	ldd	r24, Z+15	; 0x0f
    471e:	84 31       	cpi	r24, 0x14	; 20
    4720:	a9 f1       	breq	.+106    	; 0x478c <Seven_Segment_enuInit+0x3de>
					Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Pin != NOT_CONNECTED)
			{
				DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Port ,Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Pin , DIO_u8OUTPUT );
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	48 2f       	mov	r20, r24
    4726:	50 e0       	ldi	r21, 0x00	; 0
    4728:	ca 01       	movw	r24, r20
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	9c 01       	movw	r18, r24
    4730:	22 0f       	add	r18, r18
    4732:	33 1f       	adc	r19, r19
    4734:	22 0f       	add	r18, r18
    4736:	33 1f       	adc	r19, r19
    4738:	22 0f       	add	r18, r18
    473a:	33 1f       	adc	r19, r19
    473c:	82 0f       	add	r24, r18
    473e:	93 1f       	adc	r25, r19
    4740:	9c 01       	movw	r18, r24
    4742:	24 0f       	add	r18, r20
    4744:	35 1f       	adc	r19, r21
    4746:	8b 81       	ldd	r24, Y+3	; 0x03
    4748:	9c 81       	ldd	r25, Y+4	; 0x04
    474a:	fc 01       	movw	r30, r24
    474c:	e2 0f       	add	r30, r18
    474e:	f3 1f       	adc	r31, r19
    4750:	66 85       	ldd	r22, Z+14	; 0x0e
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	48 2f       	mov	r20, r24
    4756:	50 e0       	ldi	r21, 0x00	; 0
    4758:	ca 01       	movw	r24, r20
    475a:	88 0f       	add	r24, r24
    475c:	99 1f       	adc	r25, r25
    475e:	9c 01       	movw	r18, r24
    4760:	22 0f       	add	r18, r18
    4762:	33 1f       	adc	r19, r19
    4764:	22 0f       	add	r18, r18
    4766:	33 1f       	adc	r19, r19
    4768:	22 0f       	add	r18, r18
    476a:	33 1f       	adc	r19, r19
    476c:	82 0f       	add	r24, r18
    476e:	93 1f       	adc	r25, r19
    4770:	9c 01       	movw	r18, r24
    4772:	24 0f       	add	r18, r20
    4774:	35 1f       	adc	r19, r21
    4776:	8b 81       	ldd	r24, Y+3	; 0x03
    4778:	9c 81       	ldd	r25, Y+4	; 0x04
    477a:	fc 01       	movw	r30, r24
    477c:	e2 0f       	add	r30, r18
    477e:	f3 1f       	adc	r31, r19
    4780:	97 85       	ldd	r25, Z+15	; 0x0f
    4782:	86 2f       	mov	r24, r22
    4784:	69 2f       	mov	r22, r25
    4786:	41 e0       	ldi	r20, 0x01	; 1
    4788:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			}

			if (Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Port != NOT_CONNECTED &&
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	48 2f       	mov	r20, r24
    4790:	50 e0       	ldi	r21, 0x00	; 0
    4792:	ca 01       	movw	r24, r20
    4794:	88 0f       	add	r24, r24
    4796:	99 1f       	adc	r25, r25
    4798:	9c 01       	movw	r18, r24
    479a:	22 0f       	add	r18, r18
    479c:	33 1f       	adc	r19, r19
    479e:	22 0f       	add	r18, r18
    47a0:	33 1f       	adc	r19, r19
    47a2:	22 0f       	add	r18, r18
    47a4:	33 1f       	adc	r19, r19
    47a6:	82 0f       	add	r24, r18
    47a8:	93 1f       	adc	r25, r19
    47aa:	9c 01       	movw	r18, r24
    47ac:	24 0f       	add	r18, r20
    47ae:	35 1f       	adc	r19, r21
    47b0:	8b 81       	ldd	r24, Y+3	; 0x03
    47b2:	9c 81       	ldd	r25, Y+4	; 0x04
    47b4:	fc 01       	movw	r30, r24
    47b6:	e2 0f       	add	r30, r18
    47b8:	f3 1f       	adc	r31, r19
    47ba:	80 89       	ldd	r24, Z+16	; 0x10
    47bc:	84 31       	cpi	r24, 0x14	; 20
    47be:	09 f4       	brne	.+2      	; 0x47c2 <Seven_Segment_enuInit+0x414>
    47c0:	4f c0       	rjmp	.+158    	; 0x4860 <Seven_Segment_enuInit+0x4b2>
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	48 2f       	mov	r20, r24
    47c6:	50 e0       	ldi	r21, 0x00	; 0
    47c8:	ca 01       	movw	r24, r20
    47ca:	88 0f       	add	r24, r24
    47cc:	99 1f       	adc	r25, r25
    47ce:	9c 01       	movw	r18, r24
    47d0:	22 0f       	add	r18, r18
    47d2:	33 1f       	adc	r19, r19
    47d4:	22 0f       	add	r18, r18
    47d6:	33 1f       	adc	r19, r19
    47d8:	22 0f       	add	r18, r18
    47da:	33 1f       	adc	r19, r19
    47dc:	82 0f       	add	r24, r18
    47de:	93 1f       	adc	r25, r19
    47e0:	9c 01       	movw	r18, r24
    47e2:	24 0f       	add	r18, r20
    47e4:	35 1f       	adc	r19, r21
    47e6:	8b 81       	ldd	r24, Y+3	; 0x03
    47e8:	9c 81       	ldd	r25, Y+4	; 0x04
    47ea:	fc 01       	movw	r30, r24
    47ec:	e2 0f       	add	r30, r18
    47ee:	f3 1f       	adc	r31, r19
    47f0:	81 89       	ldd	r24, Z+17	; 0x11
    47f2:	84 31       	cpi	r24, 0x14	; 20
    47f4:	a9 f1       	breq	.+106    	; 0x4860 <Seven_Segment_enuInit+0x4b2>
					Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Pin != NOT_CONNECTED)
			{
				DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Port ,Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Pin , DIO_u8OUTPUT );
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	48 2f       	mov	r20, r24
    47fa:	50 e0       	ldi	r21, 0x00	; 0
    47fc:	ca 01       	movw	r24, r20
    47fe:	88 0f       	add	r24, r24
    4800:	99 1f       	adc	r25, r25
    4802:	9c 01       	movw	r18, r24
    4804:	22 0f       	add	r18, r18
    4806:	33 1f       	adc	r19, r19
    4808:	22 0f       	add	r18, r18
    480a:	33 1f       	adc	r19, r19
    480c:	22 0f       	add	r18, r18
    480e:	33 1f       	adc	r19, r19
    4810:	82 0f       	add	r24, r18
    4812:	93 1f       	adc	r25, r19
    4814:	9c 01       	movw	r18, r24
    4816:	24 0f       	add	r18, r20
    4818:	35 1f       	adc	r19, r21
    481a:	8b 81       	ldd	r24, Y+3	; 0x03
    481c:	9c 81       	ldd	r25, Y+4	; 0x04
    481e:	fc 01       	movw	r30, r24
    4820:	e2 0f       	add	r30, r18
    4822:	f3 1f       	adc	r31, r19
    4824:	60 89       	ldd	r22, Z+16	; 0x10
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	48 2f       	mov	r20, r24
    482a:	50 e0       	ldi	r21, 0x00	; 0
    482c:	ca 01       	movw	r24, r20
    482e:	88 0f       	add	r24, r24
    4830:	99 1f       	adc	r25, r25
    4832:	9c 01       	movw	r18, r24
    4834:	22 0f       	add	r18, r18
    4836:	33 1f       	adc	r19, r19
    4838:	22 0f       	add	r18, r18
    483a:	33 1f       	adc	r19, r19
    483c:	22 0f       	add	r18, r18
    483e:	33 1f       	adc	r19, r19
    4840:	82 0f       	add	r24, r18
    4842:	93 1f       	adc	r25, r19
    4844:	9c 01       	movw	r18, r24
    4846:	24 0f       	add	r18, r20
    4848:	35 1f       	adc	r19, r21
    484a:	8b 81       	ldd	r24, Y+3	; 0x03
    484c:	9c 81       	ldd	r25, Y+4	; 0x04
    484e:	fc 01       	movw	r30, r24
    4850:	e2 0f       	add	r30, r18
    4852:	f3 1f       	adc	r31, r19
    4854:	91 89       	ldd	r25, Z+17	; 0x11
    4856:	86 2f       	mov	r24, r22
    4858:	69 2f       	mov	r22, r25
    485a:	41 e0       	ldi	r20, 0x01	; 1
    485c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
	ES_T Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter =0;
	if(Copy_PstrSegConfig != NULL)
	{
		for (Local_u8Iter=0; Local_u8Iter < SEVEN_SEG_NUM; Local_u8Iter++)
    4860:	89 81       	ldd	r24, Y+1	; 0x01
    4862:	8f 5f       	subi	r24, 0xFF	; 255
    4864:	89 83       	std	Y+1, r24	; 0x01
    4866:	89 81       	ldd	r24, Y+1	; 0x01
    4868:	82 30       	cpi	r24, 0x02	; 2
    486a:	08 f4       	brcc	.+2      	; 0x486e <Seven_Segment_enuInit+0x4c0>
    486c:	b2 cd       	rjmp	.-1180   	; 0x43d2 <Seven_Segment_enuInit+0x24>
	}
	else
	{
		return ES_NULL_POINTER;
	}
	Local_enuErrorState = ES_OK;
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
    4872:	8a 81       	ldd	r24, Y+2	; 0x02
    4874:	8d 83       	std	Y+5, r24	; 0x05
    4876:	02 c0       	rjmp	.+4      	; 0x487c <Seven_Segment_enuInit+0x4ce>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4878:	82 e0       	ldi	r24, 0x02	; 2
    487a:	8d 83       	std	Y+5, r24	; 0x05
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	Local_enuErrorState = ES_OK;

	return Local_enuErrorState;
}
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	cf 91       	pop	r28
    488a:	df 91       	pop	r29
    488c:	08 95       	ret

0000488e <Seven_Segment_enuDisplayNum>:
ES_T Seven_Segment_enuDisplayNum(u8 Copy_u8SegID,u8 Copy_u8Num)
{
    488e:	df 93       	push	r29
    4890:	cf 93       	push	r28
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	68 97       	sbiw	r28, 0x18	; 24
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	8a 83       	std	Y+2, r24	; 0x02
    48a4:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    48a6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Num <=SEVEN_SEG_U8MAXRANGE && Copy_u8SegID < SEVEN_SEG_NUM)
    48a8:	8b 81       	ldd	r24, Y+3	; 0x03
    48aa:	8a 30       	cpi	r24, 0x0A	; 10
    48ac:	08 f0       	brcs	.+2      	; 0x48b0 <Seven_Segment_enuDisplayNum+0x22>
    48ae:	a7 c3       	rjmp	.+1870   	; 0x4ffe <Seven_Segment_enuDisplayNum+0x770>
    48b0:	8a 81       	ldd	r24, Y+2	; 0x02
    48b2:	82 30       	cpi	r24, 0x02	; 2
    48b4:	08 f0       	brcs	.+2      	; 0x48b8 <Seven_Segment_enuDisplayNum+0x2a>
    48b6:	a3 c3       	rjmp	.+1862   	; 0x4ffe <Seven_Segment_enuDisplayNum+0x770>
	{
		if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ba:	48 2f       	mov	r20, r24
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	ca 01       	movw	r24, r20
    48c0:	88 0f       	add	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	9c 01       	movw	r18, r24
    48c6:	22 0f       	add	r18, r18
    48c8:	33 1f       	adc	r19, r19
    48ca:	22 0f       	add	r18, r18
    48cc:	33 1f       	adc	r19, r19
    48ce:	22 0f       	add	r18, r18
    48d0:	33 1f       	adc	r19, r19
    48d2:	82 0f       	add	r24, r18
    48d4:	93 1f       	adc	r25, r19
    48d6:	84 0f       	add	r24, r20
    48d8:	95 1f       	adc	r25, r21
    48da:	fc 01       	movw	r30, r24
    48dc:	ea 54       	subi	r30, 0x4A	; 74
    48de:	fe 4f       	sbci	r31, 0xFE	; 254
    48e0:	80 81       	ld	r24, Z
    48e2:	81 30       	cpi	r24, 0x01	; 1
    48e4:	09 f0       	breq	.+2      	; 0x48e8 <Seven_Segment_enuDisplayNum+0x5a>
    48e6:	9a c1       	rjmp	.+820    	; 0x4c1c <Seven_Segment_enuDisplayNum+0x38e>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , ((SEG_Au8NumDisplay[Copy_u8Num]>>ZERO_U8RSH)&BIT_U8MASKING) );
    48e8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ea:	48 2f       	mov	r20, r24
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	ca 01       	movw	r24, r20
    48f0:	88 0f       	add	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	9c 01       	movw	r18, r24
    48f6:	22 0f       	add	r18, r18
    48f8:	33 1f       	adc	r19, r19
    48fa:	22 0f       	add	r18, r18
    48fc:	33 1f       	adc	r19, r19
    48fe:	22 0f       	add	r18, r18
    4900:	33 1f       	adc	r19, r19
    4902:	82 0f       	add	r24, r18
    4904:	93 1f       	adc	r25, r19
    4906:	84 0f       	add	r24, r20
    4908:	95 1f       	adc	r25, r21
    490a:	fc 01       	movw	r30, r24
    490c:	ec 55       	subi	r30, 0x5C	; 92
    490e:	fe 4f       	sbci	r31, 0xFE	; 254
    4910:	60 81       	ld	r22, Z
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	48 2f       	mov	r20, r24
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	ca 01       	movw	r24, r20
    491a:	88 0f       	add	r24, r24
    491c:	99 1f       	adc	r25, r25
    491e:	9c 01       	movw	r18, r24
    4920:	22 0f       	add	r18, r18
    4922:	33 1f       	adc	r19, r19
    4924:	22 0f       	add	r18, r18
    4926:	33 1f       	adc	r19, r19
    4928:	22 0f       	add	r18, r18
    492a:	33 1f       	adc	r19, r19
    492c:	82 0f       	add	r24, r18
    492e:	93 1f       	adc	r25, r19
    4930:	84 0f       	add	r24, r20
    4932:	95 1f       	adc	r25, r21
    4934:	fc 01       	movw	r30, r24
    4936:	eb 55       	subi	r30, 0x5B	; 91
    4938:	fe 4f       	sbci	r31, 0xFE	; 254
    493a:	20 81       	ld	r18, Z
    493c:	8b 81       	ldd	r24, Y+3	; 0x03
    493e:	88 2f       	mov	r24, r24
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	fc 01       	movw	r30, r24
    4944:	e6 53       	subi	r30, 0x36	; 54
    4946:	fe 4f       	sbci	r31, 0xFE	; 254
    4948:	80 81       	ld	r24, Z
    494a:	98 2f       	mov	r25, r24
    494c:	91 70       	andi	r25, 0x01	; 1
    494e:	86 2f       	mov	r24, r22
    4950:	62 2f       	mov	r22, r18
    4952:	49 2f       	mov	r20, r25
    4954:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>ONE_U8RSH)&BIT_U8MASKING) );
    4958:	8a 81       	ldd	r24, Y+2	; 0x02
    495a:	48 2f       	mov	r20, r24
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	ca 01       	movw	r24, r20
    4960:	88 0f       	add	r24, r24
    4962:	99 1f       	adc	r25, r25
    4964:	9c 01       	movw	r18, r24
    4966:	22 0f       	add	r18, r18
    4968:	33 1f       	adc	r19, r19
    496a:	22 0f       	add	r18, r18
    496c:	33 1f       	adc	r19, r19
    496e:	22 0f       	add	r18, r18
    4970:	33 1f       	adc	r19, r19
    4972:	82 0f       	add	r24, r18
    4974:	93 1f       	adc	r25, r19
    4976:	84 0f       	add	r24, r20
    4978:	95 1f       	adc	r25, r21
    497a:	fc 01       	movw	r30, r24
    497c:	ea 55       	subi	r30, 0x5A	; 90
    497e:	fe 4f       	sbci	r31, 0xFE	; 254
    4980:	60 81       	ld	r22, Z
    4982:	8a 81       	ldd	r24, Y+2	; 0x02
    4984:	48 2f       	mov	r20, r24
    4986:	50 e0       	ldi	r21, 0x00	; 0
    4988:	ca 01       	movw	r24, r20
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	9c 01       	movw	r18, r24
    4990:	22 0f       	add	r18, r18
    4992:	33 1f       	adc	r19, r19
    4994:	22 0f       	add	r18, r18
    4996:	33 1f       	adc	r19, r19
    4998:	22 0f       	add	r18, r18
    499a:	33 1f       	adc	r19, r19
    499c:	82 0f       	add	r24, r18
    499e:	93 1f       	adc	r25, r19
    49a0:	84 0f       	add	r24, r20
    49a2:	95 1f       	adc	r25, r21
    49a4:	fc 01       	movw	r30, r24
    49a6:	e9 55       	subi	r30, 0x59	; 89
    49a8:	fe 4f       	sbci	r31, 0xFE	; 254
    49aa:	20 81       	ld	r18, Z
    49ac:	8b 81       	ldd	r24, Y+3	; 0x03
    49ae:	88 2f       	mov	r24, r24
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	fc 01       	movw	r30, r24
    49b4:	e6 53       	subi	r30, 0x36	; 54
    49b6:	fe 4f       	sbci	r31, 0xFE	; 254
    49b8:	80 81       	ld	r24, Z
    49ba:	86 95       	lsr	r24
    49bc:	98 2f       	mov	r25, r24
    49be:	91 70       	andi	r25, 0x01	; 1
    49c0:	86 2f       	mov	r24, r22
    49c2:	62 2f       	mov	r22, r18
    49c4:	49 2f       	mov	r20, r25
    49c6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>TWO_U8RSH)&BIT_U8MASKING));
    49ca:	8a 81       	ldd	r24, Y+2	; 0x02
    49cc:	48 2f       	mov	r20, r24
    49ce:	50 e0       	ldi	r21, 0x00	; 0
    49d0:	ca 01       	movw	r24, r20
    49d2:	88 0f       	add	r24, r24
    49d4:	99 1f       	adc	r25, r25
    49d6:	9c 01       	movw	r18, r24
    49d8:	22 0f       	add	r18, r18
    49da:	33 1f       	adc	r19, r19
    49dc:	22 0f       	add	r18, r18
    49de:	33 1f       	adc	r19, r19
    49e0:	22 0f       	add	r18, r18
    49e2:	33 1f       	adc	r19, r19
    49e4:	82 0f       	add	r24, r18
    49e6:	93 1f       	adc	r25, r19
    49e8:	84 0f       	add	r24, r20
    49ea:	95 1f       	adc	r25, r21
    49ec:	fc 01       	movw	r30, r24
    49ee:	e8 55       	subi	r30, 0x58	; 88
    49f0:	fe 4f       	sbci	r31, 0xFE	; 254
    49f2:	60 81       	ld	r22, Z
    49f4:	8a 81       	ldd	r24, Y+2	; 0x02
    49f6:	48 2f       	mov	r20, r24
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	ca 01       	movw	r24, r20
    49fc:	88 0f       	add	r24, r24
    49fe:	99 1f       	adc	r25, r25
    4a00:	9c 01       	movw	r18, r24
    4a02:	22 0f       	add	r18, r18
    4a04:	33 1f       	adc	r19, r19
    4a06:	22 0f       	add	r18, r18
    4a08:	33 1f       	adc	r19, r19
    4a0a:	22 0f       	add	r18, r18
    4a0c:	33 1f       	adc	r19, r19
    4a0e:	82 0f       	add	r24, r18
    4a10:	93 1f       	adc	r25, r19
    4a12:	84 0f       	add	r24, r20
    4a14:	95 1f       	adc	r25, r21
    4a16:	fc 01       	movw	r30, r24
    4a18:	e7 55       	subi	r30, 0x57	; 87
    4a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a1c:	20 81       	ld	r18, Z
    4a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a20:	88 2f       	mov	r24, r24
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	fc 01       	movw	r30, r24
    4a26:	e6 53       	subi	r30, 0x36	; 54
    4a28:	fe 4f       	sbci	r31, 0xFE	; 254
    4a2a:	80 81       	ld	r24, Z
    4a2c:	86 95       	lsr	r24
    4a2e:	86 95       	lsr	r24
    4a30:	98 2f       	mov	r25, r24
    4a32:	91 70       	andi	r25, 0x01	; 1
    4a34:	86 2f       	mov	r24, r22
    4a36:	62 2f       	mov	r22, r18
    4a38:	49 2f       	mov	r20, r25
    4a3a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>THREE_U8RSH)&BIT_U8MASKING));
    4a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a40:	48 2f       	mov	r20, r24
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	ca 01       	movw	r24, r20
    4a46:	88 0f       	add	r24, r24
    4a48:	99 1f       	adc	r25, r25
    4a4a:	9c 01       	movw	r18, r24
    4a4c:	22 0f       	add	r18, r18
    4a4e:	33 1f       	adc	r19, r19
    4a50:	22 0f       	add	r18, r18
    4a52:	33 1f       	adc	r19, r19
    4a54:	22 0f       	add	r18, r18
    4a56:	33 1f       	adc	r19, r19
    4a58:	82 0f       	add	r24, r18
    4a5a:	93 1f       	adc	r25, r19
    4a5c:	84 0f       	add	r24, r20
    4a5e:	95 1f       	adc	r25, r21
    4a60:	fc 01       	movw	r30, r24
    4a62:	e6 55       	subi	r30, 0x56	; 86
    4a64:	fe 4f       	sbci	r31, 0xFE	; 254
    4a66:	60 81       	ld	r22, Z
    4a68:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6a:	48 2f       	mov	r20, r24
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	ca 01       	movw	r24, r20
    4a70:	88 0f       	add	r24, r24
    4a72:	99 1f       	adc	r25, r25
    4a74:	9c 01       	movw	r18, r24
    4a76:	22 0f       	add	r18, r18
    4a78:	33 1f       	adc	r19, r19
    4a7a:	22 0f       	add	r18, r18
    4a7c:	33 1f       	adc	r19, r19
    4a7e:	22 0f       	add	r18, r18
    4a80:	33 1f       	adc	r19, r19
    4a82:	82 0f       	add	r24, r18
    4a84:	93 1f       	adc	r25, r19
    4a86:	84 0f       	add	r24, r20
    4a88:	95 1f       	adc	r25, r21
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	e5 55       	subi	r30, 0x55	; 85
    4a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a90:	20 81       	ld	r18, Z
    4a92:	8b 81       	ldd	r24, Y+3	; 0x03
    4a94:	88 2f       	mov	r24, r24
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	fc 01       	movw	r30, r24
    4a9a:	e6 53       	subi	r30, 0x36	; 54
    4a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a9e:	80 81       	ld	r24, Z
    4aa0:	86 95       	lsr	r24
    4aa2:	86 95       	lsr	r24
    4aa4:	86 95       	lsr	r24
    4aa6:	98 2f       	mov	r25, r24
    4aa8:	91 70       	andi	r25, 0x01	; 1
    4aaa:	86 2f       	mov	r24, r22
    4aac:	62 2f       	mov	r22, r18
    4aae:	49 2f       	mov	r20, r25
    4ab0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>FOUR_U8RSH)&BIT_U8MASKING));
    4ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab6:	48 2f       	mov	r20, r24
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	ca 01       	movw	r24, r20
    4abc:	88 0f       	add	r24, r24
    4abe:	99 1f       	adc	r25, r25
    4ac0:	9c 01       	movw	r18, r24
    4ac2:	22 0f       	add	r18, r18
    4ac4:	33 1f       	adc	r19, r19
    4ac6:	22 0f       	add	r18, r18
    4ac8:	33 1f       	adc	r19, r19
    4aca:	22 0f       	add	r18, r18
    4acc:	33 1f       	adc	r19, r19
    4ace:	82 0f       	add	r24, r18
    4ad0:	93 1f       	adc	r25, r19
    4ad2:	84 0f       	add	r24, r20
    4ad4:	95 1f       	adc	r25, r21
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	e4 55       	subi	r30, 0x54	; 84
    4ada:	fe 4f       	sbci	r31, 0xFE	; 254
    4adc:	60 81       	ld	r22, Z
    4ade:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae0:	48 2f       	mov	r20, r24
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	ca 01       	movw	r24, r20
    4ae6:	88 0f       	add	r24, r24
    4ae8:	99 1f       	adc	r25, r25
    4aea:	9c 01       	movw	r18, r24
    4aec:	22 0f       	add	r18, r18
    4aee:	33 1f       	adc	r19, r19
    4af0:	22 0f       	add	r18, r18
    4af2:	33 1f       	adc	r19, r19
    4af4:	22 0f       	add	r18, r18
    4af6:	33 1f       	adc	r19, r19
    4af8:	82 0f       	add	r24, r18
    4afa:	93 1f       	adc	r25, r19
    4afc:	84 0f       	add	r24, r20
    4afe:	95 1f       	adc	r25, r21
    4b00:	fc 01       	movw	r30, r24
    4b02:	e3 55       	subi	r30, 0x53	; 83
    4b04:	fe 4f       	sbci	r31, 0xFE	; 254
    4b06:	20 81       	ld	r18, Z
    4b08:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0a:	88 2f       	mov	r24, r24
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	fc 01       	movw	r30, r24
    4b10:	e6 53       	subi	r30, 0x36	; 54
    4b12:	fe 4f       	sbci	r31, 0xFE	; 254
    4b14:	80 81       	ld	r24, Z
    4b16:	82 95       	swap	r24
    4b18:	8f 70       	andi	r24, 0x0F	; 15
    4b1a:	98 2f       	mov	r25, r24
    4b1c:	91 70       	andi	r25, 0x01	; 1
    4b1e:	86 2f       	mov	r24, r22
    4b20:	62 2f       	mov	r22, r18
    4b22:	49 2f       	mov	r20, r25
    4b24:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>FIVE_U8RSH)&BIT_U8MASKING));
    4b28:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2a:	48 2f       	mov	r20, r24
    4b2c:	50 e0       	ldi	r21, 0x00	; 0
    4b2e:	ca 01       	movw	r24, r20
    4b30:	88 0f       	add	r24, r24
    4b32:	99 1f       	adc	r25, r25
    4b34:	9c 01       	movw	r18, r24
    4b36:	22 0f       	add	r18, r18
    4b38:	33 1f       	adc	r19, r19
    4b3a:	22 0f       	add	r18, r18
    4b3c:	33 1f       	adc	r19, r19
    4b3e:	22 0f       	add	r18, r18
    4b40:	33 1f       	adc	r19, r19
    4b42:	82 0f       	add	r24, r18
    4b44:	93 1f       	adc	r25, r19
    4b46:	84 0f       	add	r24, r20
    4b48:	95 1f       	adc	r25, r21
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	e2 55       	subi	r30, 0x52	; 82
    4b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b50:	60 81       	ld	r22, Z
    4b52:	8a 81       	ldd	r24, Y+2	; 0x02
    4b54:	48 2f       	mov	r20, r24
    4b56:	50 e0       	ldi	r21, 0x00	; 0
    4b58:	ca 01       	movw	r24, r20
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	9c 01       	movw	r18, r24
    4b60:	22 0f       	add	r18, r18
    4b62:	33 1f       	adc	r19, r19
    4b64:	22 0f       	add	r18, r18
    4b66:	33 1f       	adc	r19, r19
    4b68:	22 0f       	add	r18, r18
    4b6a:	33 1f       	adc	r19, r19
    4b6c:	82 0f       	add	r24, r18
    4b6e:	93 1f       	adc	r25, r19
    4b70:	84 0f       	add	r24, r20
    4b72:	95 1f       	adc	r25, r21
    4b74:	fc 01       	movw	r30, r24
    4b76:	e1 55       	subi	r30, 0x51	; 81
    4b78:	fe 4f       	sbci	r31, 0xFE	; 254
    4b7a:	20 81       	ld	r18, Z
    4b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7e:	88 2f       	mov	r24, r24
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	fc 01       	movw	r30, r24
    4b84:	e6 53       	subi	r30, 0x36	; 54
    4b86:	fe 4f       	sbci	r31, 0xFE	; 254
    4b88:	80 81       	ld	r24, Z
    4b8a:	82 95       	swap	r24
    4b8c:	86 95       	lsr	r24
    4b8e:	87 70       	andi	r24, 0x07	; 7
    4b90:	98 2f       	mov	r25, r24
    4b92:	91 70       	andi	r25, 0x01	; 1
    4b94:	86 2f       	mov	r24, r22
    4b96:	62 2f       	mov	r22, r18
    4b98:	49 2f       	mov	r20, r25
    4b9a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>SIX_U8RSH)&BIT_U8MASKING));
    4b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba0:	48 2f       	mov	r20, r24
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	ca 01       	movw	r24, r20
    4ba6:	88 0f       	add	r24, r24
    4ba8:	99 1f       	adc	r25, r25
    4baa:	9c 01       	movw	r18, r24
    4bac:	22 0f       	add	r18, r18
    4bae:	33 1f       	adc	r19, r19
    4bb0:	22 0f       	add	r18, r18
    4bb2:	33 1f       	adc	r19, r19
    4bb4:	22 0f       	add	r18, r18
    4bb6:	33 1f       	adc	r19, r19
    4bb8:	82 0f       	add	r24, r18
    4bba:	93 1f       	adc	r25, r19
    4bbc:	84 0f       	add	r24, r20
    4bbe:	95 1f       	adc	r25, r21
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	e0 55       	subi	r30, 0x50	; 80
    4bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc6:	60 81       	ld	r22, Z
    4bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bca:	48 2f       	mov	r20, r24
    4bcc:	50 e0       	ldi	r21, 0x00	; 0
    4bce:	ca 01       	movw	r24, r20
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	9c 01       	movw	r18, r24
    4bd6:	22 0f       	add	r18, r18
    4bd8:	33 1f       	adc	r19, r19
    4bda:	22 0f       	add	r18, r18
    4bdc:	33 1f       	adc	r19, r19
    4bde:	22 0f       	add	r18, r18
    4be0:	33 1f       	adc	r19, r19
    4be2:	82 0f       	add	r24, r18
    4be4:	93 1f       	adc	r25, r19
    4be6:	84 0f       	add	r24, r20
    4be8:	95 1f       	adc	r25, r21
    4bea:	fc 01       	movw	r30, r24
    4bec:	ef 54       	subi	r30, 0x4F	; 79
    4bee:	fe 4f       	sbci	r31, 0xFE	; 254
    4bf0:	20 81       	ld	r18, Z
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	88 2f       	mov	r24, r24
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	e6 53       	subi	r30, 0x36	; 54
    4bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfe:	80 81       	ld	r24, Z
    4c00:	82 95       	swap	r24
    4c02:	86 95       	lsr	r24
    4c04:	86 95       	lsr	r24
    4c06:	83 70       	andi	r24, 0x03	; 3
    4c08:	98 2f       	mov	r25, r24
    4c0a:	91 70       	andi	r25, 0x01	; 1
    4c0c:	86 2f       	mov	r24, r22
    4c0e:	62 2f       	mov	r22, r18
    4c10:	49 2f       	mov	r20, r25
    4c12:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	89 83       	std	Y+1, r24	; 0x01
    4c1a:	f3 c1       	rjmp	.+998    	; 0x5002 <Seven_Segment_enuDisplayNum+0x774>

		}
		else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    4c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1e:	48 2f       	mov	r20, r24
    4c20:	50 e0       	ldi	r21, 0x00	; 0
    4c22:	ca 01       	movw	r24, r20
    4c24:	88 0f       	add	r24, r24
    4c26:	99 1f       	adc	r25, r25
    4c28:	9c 01       	movw	r18, r24
    4c2a:	22 0f       	add	r18, r18
    4c2c:	33 1f       	adc	r19, r19
    4c2e:	22 0f       	add	r18, r18
    4c30:	33 1f       	adc	r19, r19
    4c32:	22 0f       	add	r18, r18
    4c34:	33 1f       	adc	r19, r19
    4c36:	82 0f       	add	r24, r18
    4c38:	93 1f       	adc	r25, r19
    4c3a:	84 0f       	add	r24, r20
    4c3c:	95 1f       	adc	r25, r21
    4c3e:	fc 01       	movw	r30, r24
    4c40:	ea 54       	subi	r30, 0x4A	; 74
    4c42:	fe 4f       	sbci	r31, 0xFE	; 254
    4c44:	80 81       	ld	r24, Z
    4c46:	82 30       	cpi	r24, 0x02	; 2
    4c48:	09 f0       	breq	.+2      	; 0x4c4c <Seven_Segment_enuDisplayNum+0x3be>
    4c4a:	db c1       	rjmp	.+950    	; 0x5002 <Seven_Segment_enuDisplayNum+0x774>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , !((SEG_Au8NumDisplay[Copy_u8Num]>>ZERO_U8RSH)&BIT_U8MASKING) );
    4c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c4e:	48 2f       	mov	r20, r24
    4c50:	50 e0       	ldi	r21, 0x00	; 0
    4c52:	ca 01       	movw	r24, r20
    4c54:	88 0f       	add	r24, r24
    4c56:	99 1f       	adc	r25, r25
    4c58:	9c 01       	movw	r18, r24
    4c5a:	22 0f       	add	r18, r18
    4c5c:	33 1f       	adc	r19, r19
    4c5e:	22 0f       	add	r18, r18
    4c60:	33 1f       	adc	r19, r19
    4c62:	22 0f       	add	r18, r18
    4c64:	33 1f       	adc	r19, r19
    4c66:	82 0f       	add	r24, r18
    4c68:	93 1f       	adc	r25, r19
    4c6a:	84 0f       	add	r24, r20
    4c6c:	95 1f       	adc	r25, r21
    4c6e:	fc 01       	movw	r30, r24
    4c70:	ec 55       	subi	r30, 0x5C	; 92
    4c72:	fe 4f       	sbci	r31, 0xFE	; 254
    4c74:	80 81       	ld	r24, Z
    4c76:	88 8f       	std	Y+24, r24	; 0x18
    4c78:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7a:	48 2f       	mov	r20, r24
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	ca 01       	movw	r24, r20
    4c80:	88 0f       	add	r24, r24
    4c82:	99 1f       	adc	r25, r25
    4c84:	9c 01       	movw	r18, r24
    4c86:	22 0f       	add	r18, r18
    4c88:	33 1f       	adc	r19, r19
    4c8a:	22 0f       	add	r18, r18
    4c8c:	33 1f       	adc	r19, r19
    4c8e:	22 0f       	add	r18, r18
    4c90:	33 1f       	adc	r19, r19
    4c92:	82 0f       	add	r24, r18
    4c94:	93 1f       	adc	r25, r19
    4c96:	84 0f       	add	r24, r20
    4c98:	95 1f       	adc	r25, r21
    4c9a:	fc 01       	movw	r30, r24
    4c9c:	eb 55       	subi	r30, 0x5B	; 91
    4c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca0:	80 81       	ld	r24, Z
    4ca2:	8f 8b       	std	Y+23, r24	; 0x17
    4ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca6:	88 2f       	mov	r24, r24
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	fc 01       	movw	r30, r24
    4cac:	e6 53       	subi	r30, 0x36	; 54
    4cae:	fe 4f       	sbci	r31, 0xFE	; 254
    4cb0:	80 81       	ld	r24, Z
    4cb2:	88 2f       	mov	r24, r24
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	81 70       	andi	r24, 0x01	; 1
    4cb8:	90 70       	andi	r25, 0x00	; 0
    4cba:	1e 8a       	std	Y+22, r1	; 0x16
    4cbc:	00 97       	sbiw	r24, 0x00	; 0
    4cbe:	11 f4       	brne	.+4      	; 0x4cc4 <Seven_Segment_enuDisplayNum+0x436>
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	8e 8b       	std	Y+22, r24	; 0x16
    4cc4:	88 8d       	ldd	r24, Y+24	; 0x18
    4cc6:	6f 89       	ldd	r22, Y+23	; 0x17
    4cc8:	4e 89       	ldd	r20, Y+22	; 0x16
    4cca:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>ONE_U8RSH)&BIT_U8MASKING) );
    4cce:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd0:	48 2f       	mov	r20, r24
    4cd2:	50 e0       	ldi	r21, 0x00	; 0
    4cd4:	ca 01       	movw	r24, r20
    4cd6:	88 0f       	add	r24, r24
    4cd8:	99 1f       	adc	r25, r25
    4cda:	9c 01       	movw	r18, r24
    4cdc:	22 0f       	add	r18, r18
    4cde:	33 1f       	adc	r19, r19
    4ce0:	22 0f       	add	r18, r18
    4ce2:	33 1f       	adc	r19, r19
    4ce4:	22 0f       	add	r18, r18
    4ce6:	33 1f       	adc	r19, r19
    4ce8:	82 0f       	add	r24, r18
    4cea:	93 1f       	adc	r25, r19
    4cec:	84 0f       	add	r24, r20
    4cee:	95 1f       	adc	r25, r21
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	ea 55       	subi	r30, 0x5A	; 90
    4cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf6:	80 81       	ld	r24, Z
    4cf8:	8d 8b       	std	Y+21, r24	; 0x15
    4cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfc:	48 2f       	mov	r20, r24
    4cfe:	50 e0       	ldi	r21, 0x00	; 0
    4d00:	ca 01       	movw	r24, r20
    4d02:	88 0f       	add	r24, r24
    4d04:	99 1f       	adc	r25, r25
    4d06:	9c 01       	movw	r18, r24
    4d08:	22 0f       	add	r18, r18
    4d0a:	33 1f       	adc	r19, r19
    4d0c:	22 0f       	add	r18, r18
    4d0e:	33 1f       	adc	r19, r19
    4d10:	22 0f       	add	r18, r18
    4d12:	33 1f       	adc	r19, r19
    4d14:	82 0f       	add	r24, r18
    4d16:	93 1f       	adc	r25, r19
    4d18:	84 0f       	add	r24, r20
    4d1a:	95 1f       	adc	r25, r21
    4d1c:	fc 01       	movw	r30, r24
    4d1e:	e9 55       	subi	r30, 0x59	; 89
    4d20:	fe 4f       	sbci	r31, 0xFE	; 254
    4d22:	80 81       	ld	r24, Z
    4d24:	8c 8b       	std	Y+20, r24	; 0x14
    4d26:	8b 81       	ldd	r24, Y+3	; 0x03
    4d28:	88 2f       	mov	r24, r24
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	e6 53       	subi	r30, 0x36	; 54
    4d30:	fe 4f       	sbci	r31, 0xFE	; 254
    4d32:	80 81       	ld	r24, Z
    4d34:	86 95       	lsr	r24
    4d36:	88 2f       	mov	r24, r24
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	81 70       	andi	r24, 0x01	; 1
    4d3c:	90 70       	andi	r25, 0x00	; 0
    4d3e:	1b 8a       	std	Y+19, r1	; 0x13
    4d40:	00 97       	sbiw	r24, 0x00	; 0
    4d42:	11 f4       	brne	.+4      	; 0x4d48 <Seven_Segment_enuDisplayNum+0x4ba>
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	8b 8b       	std	Y+19, r24	; 0x13
    4d48:	8d 89       	ldd	r24, Y+21	; 0x15
    4d4a:	6c 89       	ldd	r22, Y+20	; 0x14
    4d4c:	4b 89       	ldd	r20, Y+19	; 0x13
    4d4e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>TWO_U8RSH)&BIT_U8MASKING));
    4d52:	8a 81       	ldd	r24, Y+2	; 0x02
    4d54:	48 2f       	mov	r20, r24
    4d56:	50 e0       	ldi	r21, 0x00	; 0
    4d58:	ca 01       	movw	r24, r20
    4d5a:	88 0f       	add	r24, r24
    4d5c:	99 1f       	adc	r25, r25
    4d5e:	9c 01       	movw	r18, r24
    4d60:	22 0f       	add	r18, r18
    4d62:	33 1f       	adc	r19, r19
    4d64:	22 0f       	add	r18, r18
    4d66:	33 1f       	adc	r19, r19
    4d68:	22 0f       	add	r18, r18
    4d6a:	33 1f       	adc	r19, r19
    4d6c:	82 0f       	add	r24, r18
    4d6e:	93 1f       	adc	r25, r19
    4d70:	84 0f       	add	r24, r20
    4d72:	95 1f       	adc	r25, r21
    4d74:	fc 01       	movw	r30, r24
    4d76:	e8 55       	subi	r30, 0x58	; 88
    4d78:	fe 4f       	sbci	r31, 0xFE	; 254
    4d7a:	80 81       	ld	r24, Z
    4d7c:	8a 8b       	std	Y+18, r24	; 0x12
    4d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d80:	48 2f       	mov	r20, r24
    4d82:	50 e0       	ldi	r21, 0x00	; 0
    4d84:	ca 01       	movw	r24, r20
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	9c 01       	movw	r18, r24
    4d8c:	22 0f       	add	r18, r18
    4d8e:	33 1f       	adc	r19, r19
    4d90:	22 0f       	add	r18, r18
    4d92:	33 1f       	adc	r19, r19
    4d94:	22 0f       	add	r18, r18
    4d96:	33 1f       	adc	r19, r19
    4d98:	82 0f       	add	r24, r18
    4d9a:	93 1f       	adc	r25, r19
    4d9c:	84 0f       	add	r24, r20
    4d9e:	95 1f       	adc	r25, r21
    4da0:	fc 01       	movw	r30, r24
    4da2:	e7 55       	subi	r30, 0x57	; 87
    4da4:	fe 4f       	sbci	r31, 0xFE	; 254
    4da6:	80 81       	ld	r24, Z
    4da8:	89 8b       	std	Y+17, r24	; 0x11
    4daa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dac:	88 2f       	mov	r24, r24
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	fc 01       	movw	r30, r24
    4db2:	e6 53       	subi	r30, 0x36	; 54
    4db4:	fe 4f       	sbci	r31, 0xFE	; 254
    4db6:	80 81       	ld	r24, Z
    4db8:	86 95       	lsr	r24
    4dba:	86 95       	lsr	r24
    4dbc:	88 2f       	mov	r24, r24
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	81 70       	andi	r24, 0x01	; 1
    4dc2:	90 70       	andi	r25, 0x00	; 0
    4dc4:	18 8a       	std	Y+16, r1	; 0x10
    4dc6:	00 97       	sbiw	r24, 0x00	; 0
    4dc8:	11 f4       	brne	.+4      	; 0x4dce <Seven_Segment_enuDisplayNum+0x540>
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	88 8b       	std	Y+16, r24	; 0x10
    4dce:	8a 89       	ldd	r24, Y+18	; 0x12
    4dd0:	69 89       	ldd	r22, Y+17	; 0x11
    4dd2:	48 89       	ldd	r20, Y+16	; 0x10
    4dd4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>THREE_U8RSH)&BIT_U8MASKING));
    4dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dda:	48 2f       	mov	r20, r24
    4ddc:	50 e0       	ldi	r21, 0x00	; 0
    4dde:	ca 01       	movw	r24, r20
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	9c 01       	movw	r18, r24
    4de6:	22 0f       	add	r18, r18
    4de8:	33 1f       	adc	r19, r19
    4dea:	22 0f       	add	r18, r18
    4dec:	33 1f       	adc	r19, r19
    4dee:	22 0f       	add	r18, r18
    4df0:	33 1f       	adc	r19, r19
    4df2:	82 0f       	add	r24, r18
    4df4:	93 1f       	adc	r25, r19
    4df6:	84 0f       	add	r24, r20
    4df8:	95 1f       	adc	r25, r21
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	e6 55       	subi	r30, 0x56	; 86
    4dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    4e00:	80 81       	ld	r24, Z
    4e02:	8f 87       	std	Y+15, r24	; 0x0f
    4e04:	8a 81       	ldd	r24, Y+2	; 0x02
    4e06:	48 2f       	mov	r20, r24
    4e08:	50 e0       	ldi	r21, 0x00	; 0
    4e0a:	ca 01       	movw	r24, r20
    4e0c:	88 0f       	add	r24, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	9c 01       	movw	r18, r24
    4e12:	22 0f       	add	r18, r18
    4e14:	33 1f       	adc	r19, r19
    4e16:	22 0f       	add	r18, r18
    4e18:	33 1f       	adc	r19, r19
    4e1a:	22 0f       	add	r18, r18
    4e1c:	33 1f       	adc	r19, r19
    4e1e:	82 0f       	add	r24, r18
    4e20:	93 1f       	adc	r25, r19
    4e22:	84 0f       	add	r24, r20
    4e24:	95 1f       	adc	r25, r21
    4e26:	fc 01       	movw	r30, r24
    4e28:	e5 55       	subi	r30, 0x55	; 85
    4e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2c:	80 81       	ld	r24, Z
    4e2e:	8e 87       	std	Y+14, r24	; 0x0e
    4e30:	8b 81       	ldd	r24, Y+3	; 0x03
    4e32:	88 2f       	mov	r24, r24
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	fc 01       	movw	r30, r24
    4e38:	e6 53       	subi	r30, 0x36	; 54
    4e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3c:	80 81       	ld	r24, Z
    4e3e:	86 95       	lsr	r24
    4e40:	86 95       	lsr	r24
    4e42:	86 95       	lsr	r24
    4e44:	88 2f       	mov	r24, r24
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	81 70       	andi	r24, 0x01	; 1
    4e4a:	90 70       	andi	r25, 0x00	; 0
    4e4c:	1d 86       	std	Y+13, r1	; 0x0d
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	11 f4       	brne	.+4      	; 0x4e56 <Seven_Segment_enuDisplayNum+0x5c8>
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	8d 87       	std	Y+13, r24	; 0x0d
    4e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e58:	6e 85       	ldd	r22, Y+14	; 0x0e
    4e5a:	4d 85       	ldd	r20, Y+13	; 0x0d
    4e5c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>FOUR_U8RSH)&BIT_U8MASKING));
    4e60:	8a 81       	ldd	r24, Y+2	; 0x02
    4e62:	48 2f       	mov	r20, r24
    4e64:	50 e0       	ldi	r21, 0x00	; 0
    4e66:	ca 01       	movw	r24, r20
    4e68:	88 0f       	add	r24, r24
    4e6a:	99 1f       	adc	r25, r25
    4e6c:	9c 01       	movw	r18, r24
    4e6e:	22 0f       	add	r18, r18
    4e70:	33 1f       	adc	r19, r19
    4e72:	22 0f       	add	r18, r18
    4e74:	33 1f       	adc	r19, r19
    4e76:	22 0f       	add	r18, r18
    4e78:	33 1f       	adc	r19, r19
    4e7a:	82 0f       	add	r24, r18
    4e7c:	93 1f       	adc	r25, r19
    4e7e:	84 0f       	add	r24, r20
    4e80:	95 1f       	adc	r25, r21
    4e82:	fc 01       	movw	r30, r24
    4e84:	e4 55       	subi	r30, 0x54	; 84
    4e86:	fe 4f       	sbci	r31, 0xFE	; 254
    4e88:	80 81       	ld	r24, Z
    4e8a:	8c 87       	std	Y+12, r24	; 0x0c
    4e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8e:	48 2f       	mov	r20, r24
    4e90:	50 e0       	ldi	r21, 0x00	; 0
    4e92:	ca 01       	movw	r24, r20
    4e94:	88 0f       	add	r24, r24
    4e96:	99 1f       	adc	r25, r25
    4e98:	9c 01       	movw	r18, r24
    4e9a:	22 0f       	add	r18, r18
    4e9c:	33 1f       	adc	r19, r19
    4e9e:	22 0f       	add	r18, r18
    4ea0:	33 1f       	adc	r19, r19
    4ea2:	22 0f       	add	r18, r18
    4ea4:	33 1f       	adc	r19, r19
    4ea6:	82 0f       	add	r24, r18
    4ea8:	93 1f       	adc	r25, r19
    4eaa:	84 0f       	add	r24, r20
    4eac:	95 1f       	adc	r25, r21
    4eae:	fc 01       	movw	r30, r24
    4eb0:	e3 55       	subi	r30, 0x53	; 83
    4eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    4eb4:	80 81       	ld	r24, Z
    4eb6:	8b 87       	std	Y+11, r24	; 0x0b
    4eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eba:	88 2f       	mov	r24, r24
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	e6 53       	subi	r30, 0x36	; 54
    4ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec4:	80 81       	ld	r24, Z
    4ec6:	82 95       	swap	r24
    4ec8:	8f 70       	andi	r24, 0x0F	; 15
    4eca:	88 2f       	mov	r24, r24
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	81 70       	andi	r24, 0x01	; 1
    4ed0:	90 70       	andi	r25, 0x00	; 0
    4ed2:	1a 86       	std	Y+10, r1	; 0x0a
    4ed4:	00 97       	sbiw	r24, 0x00	; 0
    4ed6:	11 f4       	brne	.+4      	; 0x4edc <Seven_Segment_enuDisplayNum+0x64e>
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	8a 87       	std	Y+10, r24	; 0x0a
    4edc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ee0:	4a 85       	ldd	r20, Y+10	; 0x0a
    4ee2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>FIVE_U8RSH)&BIT_U8MASKING));
    4ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee8:	48 2f       	mov	r20, r24
    4eea:	50 e0       	ldi	r21, 0x00	; 0
    4eec:	ca 01       	movw	r24, r20
    4eee:	88 0f       	add	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	9c 01       	movw	r18, r24
    4ef4:	22 0f       	add	r18, r18
    4ef6:	33 1f       	adc	r19, r19
    4ef8:	22 0f       	add	r18, r18
    4efa:	33 1f       	adc	r19, r19
    4efc:	22 0f       	add	r18, r18
    4efe:	33 1f       	adc	r19, r19
    4f00:	82 0f       	add	r24, r18
    4f02:	93 1f       	adc	r25, r19
    4f04:	84 0f       	add	r24, r20
    4f06:	95 1f       	adc	r25, r21
    4f08:	fc 01       	movw	r30, r24
    4f0a:	e2 55       	subi	r30, 0x52	; 82
    4f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f0e:	80 81       	ld	r24, Z
    4f10:	89 87       	std	Y+9, r24	; 0x09
    4f12:	8a 81       	ldd	r24, Y+2	; 0x02
    4f14:	48 2f       	mov	r20, r24
    4f16:	50 e0       	ldi	r21, 0x00	; 0
    4f18:	ca 01       	movw	r24, r20
    4f1a:	88 0f       	add	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	9c 01       	movw	r18, r24
    4f20:	22 0f       	add	r18, r18
    4f22:	33 1f       	adc	r19, r19
    4f24:	22 0f       	add	r18, r18
    4f26:	33 1f       	adc	r19, r19
    4f28:	22 0f       	add	r18, r18
    4f2a:	33 1f       	adc	r19, r19
    4f2c:	82 0f       	add	r24, r18
    4f2e:	93 1f       	adc	r25, r19
    4f30:	84 0f       	add	r24, r20
    4f32:	95 1f       	adc	r25, r21
    4f34:	fc 01       	movw	r30, r24
    4f36:	e1 55       	subi	r30, 0x51	; 81
    4f38:	fe 4f       	sbci	r31, 0xFE	; 254
    4f3a:	80 81       	ld	r24, Z
    4f3c:	88 87       	std	Y+8, r24	; 0x08
    4f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f40:	88 2f       	mov	r24, r24
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	fc 01       	movw	r30, r24
    4f46:	e6 53       	subi	r30, 0x36	; 54
    4f48:	fe 4f       	sbci	r31, 0xFE	; 254
    4f4a:	80 81       	ld	r24, Z
    4f4c:	82 95       	swap	r24
    4f4e:	86 95       	lsr	r24
    4f50:	87 70       	andi	r24, 0x07	; 7
    4f52:	88 2f       	mov	r24, r24
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	81 70       	andi	r24, 0x01	; 1
    4f58:	90 70       	andi	r25, 0x00	; 0
    4f5a:	1f 82       	std	Y+7, r1	; 0x07
    4f5c:	00 97       	sbiw	r24, 0x00	; 0
    4f5e:	11 f4       	brne	.+4      	; 0x4f64 <Seven_Segment_enuDisplayNum+0x6d6>
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	8f 83       	std	Y+7, r24	; 0x07
    4f64:	89 85       	ldd	r24, Y+9	; 0x09
    4f66:	68 85       	ldd	r22, Y+8	; 0x08
    4f68:	4f 81       	ldd	r20, Y+7	; 0x07
    4f6a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>SIX_U8RSH)&BIT_U8MASKING));
    4f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f70:	48 2f       	mov	r20, r24
    4f72:	50 e0       	ldi	r21, 0x00	; 0
    4f74:	ca 01       	movw	r24, r20
    4f76:	88 0f       	add	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	9c 01       	movw	r18, r24
    4f7c:	22 0f       	add	r18, r18
    4f7e:	33 1f       	adc	r19, r19
    4f80:	22 0f       	add	r18, r18
    4f82:	33 1f       	adc	r19, r19
    4f84:	22 0f       	add	r18, r18
    4f86:	33 1f       	adc	r19, r19
    4f88:	82 0f       	add	r24, r18
    4f8a:	93 1f       	adc	r25, r19
    4f8c:	84 0f       	add	r24, r20
    4f8e:	95 1f       	adc	r25, r21
    4f90:	fc 01       	movw	r30, r24
    4f92:	e0 55       	subi	r30, 0x50	; 80
    4f94:	fe 4f       	sbci	r31, 0xFE	; 254
    4f96:	80 81       	ld	r24, Z
    4f98:	8e 83       	std	Y+6, r24	; 0x06
    4f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f9c:	48 2f       	mov	r20, r24
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	ca 01       	movw	r24, r20
    4fa2:	88 0f       	add	r24, r24
    4fa4:	99 1f       	adc	r25, r25
    4fa6:	9c 01       	movw	r18, r24
    4fa8:	22 0f       	add	r18, r18
    4faa:	33 1f       	adc	r19, r19
    4fac:	22 0f       	add	r18, r18
    4fae:	33 1f       	adc	r19, r19
    4fb0:	22 0f       	add	r18, r18
    4fb2:	33 1f       	adc	r19, r19
    4fb4:	82 0f       	add	r24, r18
    4fb6:	93 1f       	adc	r25, r19
    4fb8:	84 0f       	add	r24, r20
    4fba:	95 1f       	adc	r25, r21
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	ef 54       	subi	r30, 0x4F	; 79
    4fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    4fc2:	80 81       	ld	r24, Z
    4fc4:	8d 83       	std	Y+5, r24	; 0x05
    4fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc8:	88 2f       	mov	r24, r24
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	fc 01       	movw	r30, r24
    4fce:	e6 53       	subi	r30, 0x36	; 54
    4fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd2:	80 81       	ld	r24, Z
    4fd4:	82 95       	swap	r24
    4fd6:	86 95       	lsr	r24
    4fd8:	86 95       	lsr	r24
    4fda:	83 70       	andi	r24, 0x03	; 3
    4fdc:	88 2f       	mov	r24, r24
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	81 70       	andi	r24, 0x01	; 1
    4fe2:	90 70       	andi	r25, 0x00	; 0
    4fe4:	1c 82       	std	Y+4, r1	; 0x04
    4fe6:	00 97       	sbiw	r24, 0x00	; 0
    4fe8:	11 f4       	brne	.+4      	; 0x4fee <Seven_Segment_enuDisplayNum+0x760>
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	8c 83       	std	Y+4, r24	; 0x04
    4fee:	8e 81       	ldd	r24, Y+6	; 0x06
    4ff0:	6d 81       	ldd	r22, Y+5	; 0x05
    4ff2:	4c 81       	ldd	r20, Y+4	; 0x04
    4ff4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <Seven_Segment_enuDisplayNum+0x774>

		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    4ffe:	83 e0       	ldi	r24, 0x03	; 3
    5000:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    5002:	89 81       	ldd	r24, Y+1	; 0x01
}
    5004:	68 96       	adiw	r28, 0x18	; 24
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	cf 91       	pop	r28
    5012:	df 91       	pop	r29
    5014:	08 95       	ret

00005016 <Seven_Segment_enuEnableCommon>:
ES_T Seven_Segment_enuEnableCommon(u8 Copy_u8SegID)
{
    5016:	df 93       	push	r29
    5018:	cf 93       	push	r28
    501a:	00 d0       	rcall	.+0      	; 0x501c <Seven_Segment_enuEnableCommon+0x6>
    501c:	cd b7       	in	r28, 0x3d	; 61
    501e:	de b7       	in	r29, 0x3e	; 62
    5020:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    5022:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5024:	8a 81       	ldd	r24, Y+2	; 0x02
    5026:	82 30       	cpi	r24, 0x02	; 2
    5028:	08 f0       	brcs	.+2      	; 0x502c <Seven_Segment_enuEnableCommon+0x16>
    502a:	c8 c0       	rjmp	.+400    	; 0x51bc <Seven_Segment_enuEnableCommon+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED
    502c:	8a 81       	ldd	r24, Y+2	; 0x02
    502e:	48 2f       	mov	r20, r24
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	ca 01       	movw	r24, r20
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	9c 01       	movw	r18, r24
    503a:	22 0f       	add	r18, r18
    503c:	33 1f       	adc	r19, r19
    503e:	22 0f       	add	r18, r18
    5040:	33 1f       	adc	r19, r19
    5042:	22 0f       	add	r18, r18
    5044:	33 1f       	adc	r19, r19
    5046:	82 0f       	add	r24, r18
    5048:	93 1f       	adc	r25, r19
    504a:	84 0f       	add	r24, r20
    504c:	95 1f       	adc	r25, r21
    504e:	fc 01       	movw	r30, r24
    5050:	ee 54       	subi	r30, 0x4E	; 78
    5052:	fe 4f       	sbci	r31, 0xFE	; 254
    5054:	80 81       	ld	r24, Z
    5056:	84 31       	cpi	r24, 0x14	; 20
    5058:	09 f4       	brne	.+2      	; 0x505c <Seven_Segment_enuEnableCommon+0x46>
    505a:	ad c0       	rjmp	.+346    	; 0x51b6 <Seven_Segment_enuEnableCommon+0x1a0>
    505c:	8a 81       	ldd	r24, Y+2	; 0x02
    505e:	48 2f       	mov	r20, r24
    5060:	50 e0       	ldi	r21, 0x00	; 0
    5062:	ca 01       	movw	r24, r20
    5064:	88 0f       	add	r24, r24
    5066:	99 1f       	adc	r25, r25
    5068:	9c 01       	movw	r18, r24
    506a:	22 0f       	add	r18, r18
    506c:	33 1f       	adc	r19, r19
    506e:	22 0f       	add	r18, r18
    5070:	33 1f       	adc	r19, r19
    5072:	22 0f       	add	r18, r18
    5074:	33 1f       	adc	r19, r19
    5076:	82 0f       	add	r24, r18
    5078:	93 1f       	adc	r25, r19
    507a:	84 0f       	add	r24, r20
    507c:	95 1f       	adc	r25, r21
    507e:	fc 01       	movw	r30, r24
    5080:	ed 54       	subi	r30, 0x4D	; 77
    5082:	fe 4f       	sbci	r31, 0xFE	; 254
    5084:	80 81       	ld	r24, Z
    5086:	84 31       	cpi	r24, 0x14	; 20
    5088:	09 f4       	brne	.+2      	; 0x508c <Seven_Segment_enuEnableCommon+0x76>
    508a:	95 c0       	rjmp	.+298    	; 0x51b6 <Seven_Segment_enuEnableCommon+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    508c:	8a 81       	ldd	r24, Y+2	; 0x02
    508e:	48 2f       	mov	r20, r24
    5090:	50 e0       	ldi	r21, 0x00	; 0
    5092:	ca 01       	movw	r24, r20
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	9c 01       	movw	r18, r24
    509a:	22 0f       	add	r18, r18
    509c:	33 1f       	adc	r19, r19
    509e:	22 0f       	add	r18, r18
    50a0:	33 1f       	adc	r19, r19
    50a2:	22 0f       	add	r18, r18
    50a4:	33 1f       	adc	r19, r19
    50a6:	82 0f       	add	r24, r18
    50a8:	93 1f       	adc	r25, r19
    50aa:	84 0f       	add	r24, r20
    50ac:	95 1f       	adc	r25, r21
    50ae:	fc 01       	movw	r30, r24
    50b0:	ea 54       	subi	r30, 0x4A	; 74
    50b2:	fe 4f       	sbci	r31, 0xFE	; 254
    50b4:	80 81       	ld	r24, Z
    50b6:	81 30       	cpi	r24, 0x01	; 1
    50b8:	91 f5       	brne	.+100    	; 0x511e <Seven_Segment_enuEnableCommon+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8HIGH);
    50ba:	8a 81       	ldd	r24, Y+2	; 0x02
    50bc:	48 2f       	mov	r20, r24
    50be:	50 e0       	ldi	r21, 0x00	; 0
    50c0:	ca 01       	movw	r24, r20
    50c2:	88 0f       	add	r24, r24
    50c4:	99 1f       	adc	r25, r25
    50c6:	9c 01       	movw	r18, r24
    50c8:	22 0f       	add	r18, r18
    50ca:	33 1f       	adc	r19, r19
    50cc:	22 0f       	add	r18, r18
    50ce:	33 1f       	adc	r19, r19
    50d0:	22 0f       	add	r18, r18
    50d2:	33 1f       	adc	r19, r19
    50d4:	82 0f       	add	r24, r18
    50d6:	93 1f       	adc	r25, r19
    50d8:	84 0f       	add	r24, r20
    50da:	95 1f       	adc	r25, r21
    50dc:	fc 01       	movw	r30, r24
    50de:	ee 54       	subi	r30, 0x4E	; 78
    50e0:	fe 4f       	sbci	r31, 0xFE	; 254
    50e2:	60 81       	ld	r22, Z
    50e4:	8a 81       	ldd	r24, Y+2	; 0x02
    50e6:	48 2f       	mov	r20, r24
    50e8:	50 e0       	ldi	r21, 0x00	; 0
    50ea:	ca 01       	movw	r24, r20
    50ec:	88 0f       	add	r24, r24
    50ee:	99 1f       	adc	r25, r25
    50f0:	9c 01       	movw	r18, r24
    50f2:	22 0f       	add	r18, r18
    50f4:	33 1f       	adc	r19, r19
    50f6:	22 0f       	add	r18, r18
    50f8:	33 1f       	adc	r19, r19
    50fa:	22 0f       	add	r18, r18
    50fc:	33 1f       	adc	r19, r19
    50fe:	82 0f       	add	r24, r18
    5100:	93 1f       	adc	r25, r19
    5102:	84 0f       	add	r24, r20
    5104:	95 1f       	adc	r25, r21
    5106:	fc 01       	movw	r30, r24
    5108:	ed 54       	subi	r30, 0x4D	; 77
    510a:	fe 4f       	sbci	r31, 0xFE	; 254
    510c:	90 81       	ld	r25, Z
    510e:	86 2f       	mov	r24, r22
    5110:	69 2f       	mov	r22, r25
    5112:	41 e0       	ldi	r20, 0x01	; 1
    5114:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	89 83       	std	Y+1, r24	; 0x01
    511c:	51 c0       	rjmp	.+162    	; 0x51c0 <Seven_Segment_enuEnableCommon+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    511e:	8a 81       	ldd	r24, Y+2	; 0x02
    5120:	48 2f       	mov	r20, r24
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	ca 01       	movw	r24, r20
    5126:	88 0f       	add	r24, r24
    5128:	99 1f       	adc	r25, r25
    512a:	9c 01       	movw	r18, r24
    512c:	22 0f       	add	r18, r18
    512e:	33 1f       	adc	r19, r19
    5130:	22 0f       	add	r18, r18
    5132:	33 1f       	adc	r19, r19
    5134:	22 0f       	add	r18, r18
    5136:	33 1f       	adc	r19, r19
    5138:	82 0f       	add	r24, r18
    513a:	93 1f       	adc	r25, r19
    513c:	84 0f       	add	r24, r20
    513e:	95 1f       	adc	r25, r21
    5140:	fc 01       	movw	r30, r24
    5142:	ea 54       	subi	r30, 0x4A	; 74
    5144:	fe 4f       	sbci	r31, 0xFE	; 254
    5146:	80 81       	ld	r24, Z
    5148:	82 30       	cpi	r24, 0x02	; 2
    514a:	91 f5       	brne	.+100    	; 0x51b0 <Seven_Segment_enuEnableCommon+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8LOW);
    514c:	8a 81       	ldd	r24, Y+2	; 0x02
    514e:	48 2f       	mov	r20, r24
    5150:	50 e0       	ldi	r21, 0x00	; 0
    5152:	ca 01       	movw	r24, r20
    5154:	88 0f       	add	r24, r24
    5156:	99 1f       	adc	r25, r25
    5158:	9c 01       	movw	r18, r24
    515a:	22 0f       	add	r18, r18
    515c:	33 1f       	adc	r19, r19
    515e:	22 0f       	add	r18, r18
    5160:	33 1f       	adc	r19, r19
    5162:	22 0f       	add	r18, r18
    5164:	33 1f       	adc	r19, r19
    5166:	82 0f       	add	r24, r18
    5168:	93 1f       	adc	r25, r19
    516a:	84 0f       	add	r24, r20
    516c:	95 1f       	adc	r25, r21
    516e:	fc 01       	movw	r30, r24
    5170:	ee 54       	subi	r30, 0x4E	; 78
    5172:	fe 4f       	sbci	r31, 0xFE	; 254
    5174:	60 81       	ld	r22, Z
    5176:	8a 81       	ldd	r24, Y+2	; 0x02
    5178:	48 2f       	mov	r20, r24
    517a:	50 e0       	ldi	r21, 0x00	; 0
    517c:	ca 01       	movw	r24, r20
    517e:	88 0f       	add	r24, r24
    5180:	99 1f       	adc	r25, r25
    5182:	9c 01       	movw	r18, r24
    5184:	22 0f       	add	r18, r18
    5186:	33 1f       	adc	r19, r19
    5188:	22 0f       	add	r18, r18
    518a:	33 1f       	adc	r19, r19
    518c:	22 0f       	add	r18, r18
    518e:	33 1f       	adc	r19, r19
    5190:	82 0f       	add	r24, r18
    5192:	93 1f       	adc	r25, r19
    5194:	84 0f       	add	r24, r20
    5196:	95 1f       	adc	r25, r21
    5198:	fc 01       	movw	r30, r24
    519a:	ed 54       	subi	r30, 0x4D	; 77
    519c:	fe 4f       	sbci	r31, 0xFE	; 254
    519e:	90 81       	ld	r25, Z
    51a0:	86 2f       	mov	r24, r22
    51a2:	69 2f       	mov	r22, r25
    51a4:	40 e0       	ldi	r20, 0x00	; 0
    51a6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	89 83       	std	Y+1, r24	; 0x01
    51ae:	08 c0       	rjmp	.+16     	; 0x51c0 <Seven_Segment_enuEnableCommon+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    51b0:	84 e0       	ldi	r24, 0x04	; 4
    51b2:	89 83       	std	Y+1, r24	; 0x01
    51b4:	05 c0       	rjmp	.+10     	; 0x51c0 <Seven_Segment_enuEnableCommon+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    51b6:	84 e0       	ldi	r24, 0x04	; 4
    51b8:	89 83       	std	Y+1, r24	; 0x01
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <Seven_Segment_enuEnableCommon+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    51bc:	83 e0       	ldi	r24, 0x03	; 3
    51be:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    51c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    51c2:	0f 90       	pop	r0
    51c4:	0f 90       	pop	r0
    51c6:	cf 91       	pop	r28
    51c8:	df 91       	pop	r29
    51ca:	08 95       	ret

000051cc <Seven_Segment_enuDisableCommon>:

ES_T Seven_Segment_enuDisableCommon(u8 Copy_u8SegID)
{
    51cc:	df 93       	push	r29
    51ce:	cf 93       	push	r28
    51d0:	00 d0       	rcall	.+0      	; 0x51d2 <Seven_Segment_enuDisableCommon+0x6>
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    51d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    51da:	8a 81       	ldd	r24, Y+2	; 0x02
    51dc:	82 30       	cpi	r24, 0x02	; 2
    51de:	08 f0       	brcs	.+2      	; 0x51e2 <Seven_Segment_enuDisableCommon+0x16>
    51e0:	c8 c0       	rjmp	.+400    	; 0x5372 <Seven_Segment_enuDisableCommon+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED
    51e2:	8a 81       	ldd	r24, Y+2	; 0x02
    51e4:	48 2f       	mov	r20, r24
    51e6:	50 e0       	ldi	r21, 0x00	; 0
    51e8:	ca 01       	movw	r24, r20
    51ea:	88 0f       	add	r24, r24
    51ec:	99 1f       	adc	r25, r25
    51ee:	9c 01       	movw	r18, r24
    51f0:	22 0f       	add	r18, r18
    51f2:	33 1f       	adc	r19, r19
    51f4:	22 0f       	add	r18, r18
    51f6:	33 1f       	adc	r19, r19
    51f8:	22 0f       	add	r18, r18
    51fa:	33 1f       	adc	r19, r19
    51fc:	82 0f       	add	r24, r18
    51fe:	93 1f       	adc	r25, r19
    5200:	84 0f       	add	r24, r20
    5202:	95 1f       	adc	r25, r21
    5204:	fc 01       	movw	r30, r24
    5206:	ee 54       	subi	r30, 0x4E	; 78
    5208:	fe 4f       	sbci	r31, 0xFE	; 254
    520a:	80 81       	ld	r24, Z
    520c:	84 31       	cpi	r24, 0x14	; 20
    520e:	09 f4       	brne	.+2      	; 0x5212 <Seven_Segment_enuDisableCommon+0x46>
    5210:	ad c0       	rjmp	.+346    	; 0x536c <Seven_Segment_enuDisableCommon+0x1a0>
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	48 2f       	mov	r20, r24
    5216:	50 e0       	ldi	r21, 0x00	; 0
    5218:	ca 01       	movw	r24, r20
    521a:	88 0f       	add	r24, r24
    521c:	99 1f       	adc	r25, r25
    521e:	9c 01       	movw	r18, r24
    5220:	22 0f       	add	r18, r18
    5222:	33 1f       	adc	r19, r19
    5224:	22 0f       	add	r18, r18
    5226:	33 1f       	adc	r19, r19
    5228:	22 0f       	add	r18, r18
    522a:	33 1f       	adc	r19, r19
    522c:	82 0f       	add	r24, r18
    522e:	93 1f       	adc	r25, r19
    5230:	84 0f       	add	r24, r20
    5232:	95 1f       	adc	r25, r21
    5234:	fc 01       	movw	r30, r24
    5236:	ed 54       	subi	r30, 0x4D	; 77
    5238:	fe 4f       	sbci	r31, 0xFE	; 254
    523a:	80 81       	ld	r24, Z
    523c:	84 31       	cpi	r24, 0x14	; 20
    523e:	09 f4       	brne	.+2      	; 0x5242 <Seven_Segment_enuDisableCommon+0x76>
    5240:	95 c0       	rjmp	.+298    	; 0x536c <Seven_Segment_enuDisableCommon+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    5242:	8a 81       	ldd	r24, Y+2	; 0x02
    5244:	48 2f       	mov	r20, r24
    5246:	50 e0       	ldi	r21, 0x00	; 0
    5248:	ca 01       	movw	r24, r20
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	9c 01       	movw	r18, r24
    5250:	22 0f       	add	r18, r18
    5252:	33 1f       	adc	r19, r19
    5254:	22 0f       	add	r18, r18
    5256:	33 1f       	adc	r19, r19
    5258:	22 0f       	add	r18, r18
    525a:	33 1f       	adc	r19, r19
    525c:	82 0f       	add	r24, r18
    525e:	93 1f       	adc	r25, r19
    5260:	84 0f       	add	r24, r20
    5262:	95 1f       	adc	r25, r21
    5264:	fc 01       	movw	r30, r24
    5266:	ea 54       	subi	r30, 0x4A	; 74
    5268:	fe 4f       	sbci	r31, 0xFE	; 254
    526a:	80 81       	ld	r24, Z
    526c:	81 30       	cpi	r24, 0x01	; 1
    526e:	91 f5       	brne	.+100    	; 0x52d4 <Seven_Segment_enuDisableCommon+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8LOW);
    5270:	8a 81       	ldd	r24, Y+2	; 0x02
    5272:	48 2f       	mov	r20, r24
    5274:	50 e0       	ldi	r21, 0x00	; 0
    5276:	ca 01       	movw	r24, r20
    5278:	88 0f       	add	r24, r24
    527a:	99 1f       	adc	r25, r25
    527c:	9c 01       	movw	r18, r24
    527e:	22 0f       	add	r18, r18
    5280:	33 1f       	adc	r19, r19
    5282:	22 0f       	add	r18, r18
    5284:	33 1f       	adc	r19, r19
    5286:	22 0f       	add	r18, r18
    5288:	33 1f       	adc	r19, r19
    528a:	82 0f       	add	r24, r18
    528c:	93 1f       	adc	r25, r19
    528e:	84 0f       	add	r24, r20
    5290:	95 1f       	adc	r25, r21
    5292:	fc 01       	movw	r30, r24
    5294:	ee 54       	subi	r30, 0x4E	; 78
    5296:	fe 4f       	sbci	r31, 0xFE	; 254
    5298:	60 81       	ld	r22, Z
    529a:	8a 81       	ldd	r24, Y+2	; 0x02
    529c:	48 2f       	mov	r20, r24
    529e:	50 e0       	ldi	r21, 0x00	; 0
    52a0:	ca 01       	movw	r24, r20
    52a2:	88 0f       	add	r24, r24
    52a4:	99 1f       	adc	r25, r25
    52a6:	9c 01       	movw	r18, r24
    52a8:	22 0f       	add	r18, r18
    52aa:	33 1f       	adc	r19, r19
    52ac:	22 0f       	add	r18, r18
    52ae:	33 1f       	adc	r19, r19
    52b0:	22 0f       	add	r18, r18
    52b2:	33 1f       	adc	r19, r19
    52b4:	82 0f       	add	r24, r18
    52b6:	93 1f       	adc	r25, r19
    52b8:	84 0f       	add	r24, r20
    52ba:	95 1f       	adc	r25, r21
    52bc:	fc 01       	movw	r30, r24
    52be:	ed 54       	subi	r30, 0x4D	; 77
    52c0:	fe 4f       	sbci	r31, 0xFE	; 254
    52c2:	90 81       	ld	r25, Z
    52c4:	86 2f       	mov	r24, r22
    52c6:	69 2f       	mov	r22, r25
    52c8:	40 e0       	ldi	r20, 0x00	; 0
    52ca:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	89 83       	std	Y+1, r24	; 0x01
    52d2:	51 c0       	rjmp	.+162    	; 0x5376 <Seven_Segment_enuDisableCommon+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    52d4:	8a 81       	ldd	r24, Y+2	; 0x02
    52d6:	48 2f       	mov	r20, r24
    52d8:	50 e0       	ldi	r21, 0x00	; 0
    52da:	ca 01       	movw	r24, r20
    52dc:	88 0f       	add	r24, r24
    52de:	99 1f       	adc	r25, r25
    52e0:	9c 01       	movw	r18, r24
    52e2:	22 0f       	add	r18, r18
    52e4:	33 1f       	adc	r19, r19
    52e6:	22 0f       	add	r18, r18
    52e8:	33 1f       	adc	r19, r19
    52ea:	22 0f       	add	r18, r18
    52ec:	33 1f       	adc	r19, r19
    52ee:	82 0f       	add	r24, r18
    52f0:	93 1f       	adc	r25, r19
    52f2:	84 0f       	add	r24, r20
    52f4:	95 1f       	adc	r25, r21
    52f6:	fc 01       	movw	r30, r24
    52f8:	ea 54       	subi	r30, 0x4A	; 74
    52fa:	fe 4f       	sbci	r31, 0xFE	; 254
    52fc:	80 81       	ld	r24, Z
    52fe:	82 30       	cpi	r24, 0x02	; 2
    5300:	91 f5       	brne	.+100    	; 0x5366 <Seven_Segment_enuDisableCommon+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8HIGH);
    5302:	8a 81       	ldd	r24, Y+2	; 0x02
    5304:	48 2f       	mov	r20, r24
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	ca 01       	movw	r24, r20
    530a:	88 0f       	add	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	9c 01       	movw	r18, r24
    5310:	22 0f       	add	r18, r18
    5312:	33 1f       	adc	r19, r19
    5314:	22 0f       	add	r18, r18
    5316:	33 1f       	adc	r19, r19
    5318:	22 0f       	add	r18, r18
    531a:	33 1f       	adc	r19, r19
    531c:	82 0f       	add	r24, r18
    531e:	93 1f       	adc	r25, r19
    5320:	84 0f       	add	r24, r20
    5322:	95 1f       	adc	r25, r21
    5324:	fc 01       	movw	r30, r24
    5326:	ee 54       	subi	r30, 0x4E	; 78
    5328:	fe 4f       	sbci	r31, 0xFE	; 254
    532a:	60 81       	ld	r22, Z
    532c:	8a 81       	ldd	r24, Y+2	; 0x02
    532e:	48 2f       	mov	r20, r24
    5330:	50 e0       	ldi	r21, 0x00	; 0
    5332:	ca 01       	movw	r24, r20
    5334:	88 0f       	add	r24, r24
    5336:	99 1f       	adc	r25, r25
    5338:	9c 01       	movw	r18, r24
    533a:	22 0f       	add	r18, r18
    533c:	33 1f       	adc	r19, r19
    533e:	22 0f       	add	r18, r18
    5340:	33 1f       	adc	r19, r19
    5342:	22 0f       	add	r18, r18
    5344:	33 1f       	adc	r19, r19
    5346:	82 0f       	add	r24, r18
    5348:	93 1f       	adc	r25, r19
    534a:	84 0f       	add	r24, r20
    534c:	95 1f       	adc	r25, r21
    534e:	fc 01       	movw	r30, r24
    5350:	ed 54       	subi	r30, 0x4D	; 77
    5352:	fe 4f       	sbci	r31, 0xFE	; 254
    5354:	90 81       	ld	r25, Z
    5356:	86 2f       	mov	r24, r22
    5358:	69 2f       	mov	r22, r25
    535a:	41 e0       	ldi	r20, 0x01	; 1
    535c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	89 83       	std	Y+1, r24	; 0x01
    5364:	08 c0       	rjmp	.+16     	; 0x5376 <Seven_Segment_enuDisableCommon+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    5366:	84 e0       	ldi	r24, 0x04	; 4
    5368:	89 83       	std	Y+1, r24	; 0x01
    536a:	05 c0       	rjmp	.+10     	; 0x5376 <Seven_Segment_enuDisableCommon+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    536c:	84 e0       	ldi	r24, 0x04	; 4
    536e:	89 83       	std	Y+1, r24	; 0x01
    5370:	02 c0       	rjmp	.+4      	; 0x5376 <Seven_Segment_enuDisableCommon+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    5372:	83 e0       	ldi	r24, 0x03	; 3
    5374:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    5376:	89 81       	ldd	r24, Y+1	; 0x01

}
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	cf 91       	pop	r28
    537e:	df 91       	pop	r29
    5380:	08 95       	ret

00005382 <Seven_Segment_enuEnableDot>:

ES_T Seven_Segment_enuEnableDot(u8 Copy_u8SegID)
{
    5382:	df 93       	push	r29
    5384:	cf 93       	push	r28
    5386:	00 d0       	rcall	.+0      	; 0x5388 <Seven_Segment_enuEnableDot+0x6>
    5388:	cd b7       	in	r28, 0x3d	; 61
    538a:	de b7       	in	r29, 0x3e	; 62
    538c:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    538e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5390:	8a 81       	ldd	r24, Y+2	; 0x02
    5392:	82 30       	cpi	r24, 0x02	; 2
    5394:	08 f0       	brcs	.+2      	; 0x5398 <Seven_Segment_enuEnableDot+0x16>
    5396:	c8 c0       	rjmp	.+400    	; 0x5528 <Seven_Segment_enuEnableDot+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED
    5398:	8a 81       	ldd	r24, Y+2	; 0x02
    539a:	48 2f       	mov	r20, r24
    539c:	50 e0       	ldi	r21, 0x00	; 0
    539e:	ca 01       	movw	r24, r20
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	9c 01       	movw	r18, r24
    53a6:	22 0f       	add	r18, r18
    53a8:	33 1f       	adc	r19, r19
    53aa:	22 0f       	add	r18, r18
    53ac:	33 1f       	adc	r19, r19
    53ae:	22 0f       	add	r18, r18
    53b0:	33 1f       	adc	r19, r19
    53b2:	82 0f       	add	r24, r18
    53b4:	93 1f       	adc	r25, r19
    53b6:	84 0f       	add	r24, r20
    53b8:	95 1f       	adc	r25, r21
    53ba:	fc 01       	movw	r30, r24
    53bc:	ec 54       	subi	r30, 0x4C	; 76
    53be:	fe 4f       	sbci	r31, 0xFE	; 254
    53c0:	80 81       	ld	r24, Z
    53c2:	84 31       	cpi	r24, 0x14	; 20
    53c4:	09 f4       	brne	.+2      	; 0x53c8 <Seven_Segment_enuEnableDot+0x46>
    53c6:	ad c0       	rjmp	.+346    	; 0x5522 <Seven_Segment_enuEnableDot+0x1a0>
    53c8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ca:	48 2f       	mov	r20, r24
    53cc:	50 e0       	ldi	r21, 0x00	; 0
    53ce:	ca 01       	movw	r24, r20
    53d0:	88 0f       	add	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	9c 01       	movw	r18, r24
    53d6:	22 0f       	add	r18, r18
    53d8:	33 1f       	adc	r19, r19
    53da:	22 0f       	add	r18, r18
    53dc:	33 1f       	adc	r19, r19
    53de:	22 0f       	add	r18, r18
    53e0:	33 1f       	adc	r19, r19
    53e2:	82 0f       	add	r24, r18
    53e4:	93 1f       	adc	r25, r19
    53e6:	84 0f       	add	r24, r20
    53e8:	95 1f       	adc	r25, r21
    53ea:	fc 01       	movw	r30, r24
    53ec:	eb 54       	subi	r30, 0x4B	; 75
    53ee:	fe 4f       	sbci	r31, 0xFE	; 254
    53f0:	80 81       	ld	r24, Z
    53f2:	84 31       	cpi	r24, 0x14	; 20
    53f4:	09 f4       	brne	.+2      	; 0x53f8 <Seven_Segment_enuEnableDot+0x76>
    53f6:	95 c0       	rjmp	.+298    	; 0x5522 <Seven_Segment_enuEnableDot+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	48 2f       	mov	r20, r24
    53fc:	50 e0       	ldi	r21, 0x00	; 0
    53fe:	ca 01       	movw	r24, r20
    5400:	88 0f       	add	r24, r24
    5402:	99 1f       	adc	r25, r25
    5404:	9c 01       	movw	r18, r24
    5406:	22 0f       	add	r18, r18
    5408:	33 1f       	adc	r19, r19
    540a:	22 0f       	add	r18, r18
    540c:	33 1f       	adc	r19, r19
    540e:	22 0f       	add	r18, r18
    5410:	33 1f       	adc	r19, r19
    5412:	82 0f       	add	r24, r18
    5414:	93 1f       	adc	r25, r19
    5416:	84 0f       	add	r24, r20
    5418:	95 1f       	adc	r25, r21
    541a:	fc 01       	movw	r30, r24
    541c:	ea 54       	subi	r30, 0x4A	; 74
    541e:	fe 4f       	sbci	r31, 0xFE	; 254
    5420:	80 81       	ld	r24, Z
    5422:	81 30       	cpi	r24, 0x01	; 1
    5424:	91 f5       	brne	.+100    	; 0x548a <Seven_Segment_enuEnableDot+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8HIGH);
    5426:	8a 81       	ldd	r24, Y+2	; 0x02
    5428:	48 2f       	mov	r20, r24
    542a:	50 e0       	ldi	r21, 0x00	; 0
    542c:	ca 01       	movw	r24, r20
    542e:	88 0f       	add	r24, r24
    5430:	99 1f       	adc	r25, r25
    5432:	9c 01       	movw	r18, r24
    5434:	22 0f       	add	r18, r18
    5436:	33 1f       	adc	r19, r19
    5438:	22 0f       	add	r18, r18
    543a:	33 1f       	adc	r19, r19
    543c:	22 0f       	add	r18, r18
    543e:	33 1f       	adc	r19, r19
    5440:	82 0f       	add	r24, r18
    5442:	93 1f       	adc	r25, r19
    5444:	84 0f       	add	r24, r20
    5446:	95 1f       	adc	r25, r21
    5448:	fc 01       	movw	r30, r24
    544a:	ec 54       	subi	r30, 0x4C	; 76
    544c:	fe 4f       	sbci	r31, 0xFE	; 254
    544e:	60 81       	ld	r22, Z
    5450:	8a 81       	ldd	r24, Y+2	; 0x02
    5452:	48 2f       	mov	r20, r24
    5454:	50 e0       	ldi	r21, 0x00	; 0
    5456:	ca 01       	movw	r24, r20
    5458:	88 0f       	add	r24, r24
    545a:	99 1f       	adc	r25, r25
    545c:	9c 01       	movw	r18, r24
    545e:	22 0f       	add	r18, r18
    5460:	33 1f       	adc	r19, r19
    5462:	22 0f       	add	r18, r18
    5464:	33 1f       	adc	r19, r19
    5466:	22 0f       	add	r18, r18
    5468:	33 1f       	adc	r19, r19
    546a:	82 0f       	add	r24, r18
    546c:	93 1f       	adc	r25, r19
    546e:	84 0f       	add	r24, r20
    5470:	95 1f       	adc	r25, r21
    5472:	fc 01       	movw	r30, r24
    5474:	eb 54       	subi	r30, 0x4B	; 75
    5476:	fe 4f       	sbci	r31, 0xFE	; 254
    5478:	90 81       	ld	r25, Z
    547a:	86 2f       	mov	r24, r22
    547c:	69 2f       	mov	r22, r25
    547e:	41 e0       	ldi	r20, 0x01	; 1
    5480:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	89 83       	std	Y+1, r24	; 0x01
    5488:	51 c0       	rjmp	.+162    	; 0x552c <Seven_Segment_enuEnableDot+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    548a:	8a 81       	ldd	r24, Y+2	; 0x02
    548c:	48 2f       	mov	r20, r24
    548e:	50 e0       	ldi	r21, 0x00	; 0
    5490:	ca 01       	movw	r24, r20
    5492:	88 0f       	add	r24, r24
    5494:	99 1f       	adc	r25, r25
    5496:	9c 01       	movw	r18, r24
    5498:	22 0f       	add	r18, r18
    549a:	33 1f       	adc	r19, r19
    549c:	22 0f       	add	r18, r18
    549e:	33 1f       	adc	r19, r19
    54a0:	22 0f       	add	r18, r18
    54a2:	33 1f       	adc	r19, r19
    54a4:	82 0f       	add	r24, r18
    54a6:	93 1f       	adc	r25, r19
    54a8:	84 0f       	add	r24, r20
    54aa:	95 1f       	adc	r25, r21
    54ac:	fc 01       	movw	r30, r24
    54ae:	ea 54       	subi	r30, 0x4A	; 74
    54b0:	fe 4f       	sbci	r31, 0xFE	; 254
    54b2:	80 81       	ld	r24, Z
    54b4:	82 30       	cpi	r24, 0x02	; 2
    54b6:	91 f5       	brne	.+100    	; 0x551c <Seven_Segment_enuEnableDot+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8LOW);
    54b8:	8a 81       	ldd	r24, Y+2	; 0x02
    54ba:	48 2f       	mov	r20, r24
    54bc:	50 e0       	ldi	r21, 0x00	; 0
    54be:	ca 01       	movw	r24, r20
    54c0:	88 0f       	add	r24, r24
    54c2:	99 1f       	adc	r25, r25
    54c4:	9c 01       	movw	r18, r24
    54c6:	22 0f       	add	r18, r18
    54c8:	33 1f       	adc	r19, r19
    54ca:	22 0f       	add	r18, r18
    54cc:	33 1f       	adc	r19, r19
    54ce:	22 0f       	add	r18, r18
    54d0:	33 1f       	adc	r19, r19
    54d2:	82 0f       	add	r24, r18
    54d4:	93 1f       	adc	r25, r19
    54d6:	84 0f       	add	r24, r20
    54d8:	95 1f       	adc	r25, r21
    54da:	fc 01       	movw	r30, r24
    54dc:	ec 54       	subi	r30, 0x4C	; 76
    54de:	fe 4f       	sbci	r31, 0xFE	; 254
    54e0:	60 81       	ld	r22, Z
    54e2:	8a 81       	ldd	r24, Y+2	; 0x02
    54e4:	48 2f       	mov	r20, r24
    54e6:	50 e0       	ldi	r21, 0x00	; 0
    54e8:	ca 01       	movw	r24, r20
    54ea:	88 0f       	add	r24, r24
    54ec:	99 1f       	adc	r25, r25
    54ee:	9c 01       	movw	r18, r24
    54f0:	22 0f       	add	r18, r18
    54f2:	33 1f       	adc	r19, r19
    54f4:	22 0f       	add	r18, r18
    54f6:	33 1f       	adc	r19, r19
    54f8:	22 0f       	add	r18, r18
    54fa:	33 1f       	adc	r19, r19
    54fc:	82 0f       	add	r24, r18
    54fe:	93 1f       	adc	r25, r19
    5500:	84 0f       	add	r24, r20
    5502:	95 1f       	adc	r25, r21
    5504:	fc 01       	movw	r30, r24
    5506:	eb 54       	subi	r30, 0x4B	; 75
    5508:	fe 4f       	sbci	r31, 0xFE	; 254
    550a:	90 81       	ld	r25, Z
    550c:	86 2f       	mov	r24, r22
    550e:	69 2f       	mov	r22, r25
    5510:	40 e0       	ldi	r20, 0x00	; 0
    5512:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	89 83       	std	Y+1, r24	; 0x01
    551a:	08 c0       	rjmp	.+16     	; 0x552c <Seven_Segment_enuEnableDot+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    551c:	84 e0       	ldi	r24, 0x04	; 4
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	05 c0       	rjmp	.+10     	; 0x552c <Seven_Segment_enuEnableDot+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    5522:	84 e0       	ldi	r24, 0x04	; 4
    5524:	89 83       	std	Y+1, r24	; 0x01
    5526:	02 c0       	rjmp	.+4      	; 0x552c <Seven_Segment_enuEnableDot+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    5528:	83 e0       	ldi	r24, 0x03	; 3
    552a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    552c:	89 81       	ldd	r24, Y+1	; 0x01

}
    552e:	0f 90       	pop	r0
    5530:	0f 90       	pop	r0
    5532:	cf 91       	pop	r28
    5534:	df 91       	pop	r29
    5536:	08 95       	ret

00005538 <Seven_Segment_enuDisableDot>:

ES_T Seven_Segment_enuDisableDot(u8 Copy_u8SegID)
{
    5538:	df 93       	push	r29
    553a:	cf 93       	push	r28
    553c:	00 d0       	rcall	.+0      	; 0x553e <Seven_Segment_enuDisableDot+0x6>
    553e:	cd b7       	in	r28, 0x3d	; 61
    5540:	de b7       	in	r29, 0x3e	; 62
    5542:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    5544:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5546:	8a 81       	ldd	r24, Y+2	; 0x02
    5548:	82 30       	cpi	r24, 0x02	; 2
    554a:	08 f0       	brcs	.+2      	; 0x554e <Seven_Segment_enuDisableDot+0x16>
    554c:	c8 c0       	rjmp	.+400    	; 0x56de <Seven_Segment_enuDisableDot+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED
    554e:	8a 81       	ldd	r24, Y+2	; 0x02
    5550:	48 2f       	mov	r20, r24
    5552:	50 e0       	ldi	r21, 0x00	; 0
    5554:	ca 01       	movw	r24, r20
    5556:	88 0f       	add	r24, r24
    5558:	99 1f       	adc	r25, r25
    555a:	9c 01       	movw	r18, r24
    555c:	22 0f       	add	r18, r18
    555e:	33 1f       	adc	r19, r19
    5560:	22 0f       	add	r18, r18
    5562:	33 1f       	adc	r19, r19
    5564:	22 0f       	add	r18, r18
    5566:	33 1f       	adc	r19, r19
    5568:	82 0f       	add	r24, r18
    556a:	93 1f       	adc	r25, r19
    556c:	84 0f       	add	r24, r20
    556e:	95 1f       	adc	r25, r21
    5570:	fc 01       	movw	r30, r24
    5572:	ec 54       	subi	r30, 0x4C	; 76
    5574:	fe 4f       	sbci	r31, 0xFE	; 254
    5576:	80 81       	ld	r24, Z
    5578:	84 31       	cpi	r24, 0x14	; 20
    557a:	09 f4       	brne	.+2      	; 0x557e <Seven_Segment_enuDisableDot+0x46>
    557c:	ad c0       	rjmp	.+346    	; 0x56d8 <Seven_Segment_enuDisableDot+0x1a0>
    557e:	8a 81       	ldd	r24, Y+2	; 0x02
    5580:	48 2f       	mov	r20, r24
    5582:	50 e0       	ldi	r21, 0x00	; 0
    5584:	ca 01       	movw	r24, r20
    5586:	88 0f       	add	r24, r24
    5588:	99 1f       	adc	r25, r25
    558a:	9c 01       	movw	r18, r24
    558c:	22 0f       	add	r18, r18
    558e:	33 1f       	adc	r19, r19
    5590:	22 0f       	add	r18, r18
    5592:	33 1f       	adc	r19, r19
    5594:	22 0f       	add	r18, r18
    5596:	33 1f       	adc	r19, r19
    5598:	82 0f       	add	r24, r18
    559a:	93 1f       	adc	r25, r19
    559c:	84 0f       	add	r24, r20
    559e:	95 1f       	adc	r25, r21
    55a0:	fc 01       	movw	r30, r24
    55a2:	eb 54       	subi	r30, 0x4B	; 75
    55a4:	fe 4f       	sbci	r31, 0xFE	; 254
    55a6:	80 81       	ld	r24, Z
    55a8:	84 31       	cpi	r24, 0x14	; 20
    55aa:	09 f4       	brne	.+2      	; 0x55ae <Seven_Segment_enuDisableDot+0x76>
    55ac:	95 c0       	rjmp	.+298    	; 0x56d8 <Seven_Segment_enuDisableDot+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    55ae:	8a 81       	ldd	r24, Y+2	; 0x02
    55b0:	48 2f       	mov	r20, r24
    55b2:	50 e0       	ldi	r21, 0x00	; 0
    55b4:	ca 01       	movw	r24, r20
    55b6:	88 0f       	add	r24, r24
    55b8:	99 1f       	adc	r25, r25
    55ba:	9c 01       	movw	r18, r24
    55bc:	22 0f       	add	r18, r18
    55be:	33 1f       	adc	r19, r19
    55c0:	22 0f       	add	r18, r18
    55c2:	33 1f       	adc	r19, r19
    55c4:	22 0f       	add	r18, r18
    55c6:	33 1f       	adc	r19, r19
    55c8:	82 0f       	add	r24, r18
    55ca:	93 1f       	adc	r25, r19
    55cc:	84 0f       	add	r24, r20
    55ce:	95 1f       	adc	r25, r21
    55d0:	fc 01       	movw	r30, r24
    55d2:	ea 54       	subi	r30, 0x4A	; 74
    55d4:	fe 4f       	sbci	r31, 0xFE	; 254
    55d6:	80 81       	ld	r24, Z
    55d8:	81 30       	cpi	r24, 0x01	; 1
    55da:	91 f5       	brne	.+100    	; 0x5640 <Seven_Segment_enuDisableDot+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8LOW);
    55dc:	8a 81       	ldd	r24, Y+2	; 0x02
    55de:	48 2f       	mov	r20, r24
    55e0:	50 e0       	ldi	r21, 0x00	; 0
    55e2:	ca 01       	movw	r24, r20
    55e4:	88 0f       	add	r24, r24
    55e6:	99 1f       	adc	r25, r25
    55e8:	9c 01       	movw	r18, r24
    55ea:	22 0f       	add	r18, r18
    55ec:	33 1f       	adc	r19, r19
    55ee:	22 0f       	add	r18, r18
    55f0:	33 1f       	adc	r19, r19
    55f2:	22 0f       	add	r18, r18
    55f4:	33 1f       	adc	r19, r19
    55f6:	82 0f       	add	r24, r18
    55f8:	93 1f       	adc	r25, r19
    55fa:	84 0f       	add	r24, r20
    55fc:	95 1f       	adc	r25, r21
    55fe:	fc 01       	movw	r30, r24
    5600:	ec 54       	subi	r30, 0x4C	; 76
    5602:	fe 4f       	sbci	r31, 0xFE	; 254
    5604:	60 81       	ld	r22, Z
    5606:	8a 81       	ldd	r24, Y+2	; 0x02
    5608:	48 2f       	mov	r20, r24
    560a:	50 e0       	ldi	r21, 0x00	; 0
    560c:	ca 01       	movw	r24, r20
    560e:	88 0f       	add	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	9c 01       	movw	r18, r24
    5614:	22 0f       	add	r18, r18
    5616:	33 1f       	adc	r19, r19
    5618:	22 0f       	add	r18, r18
    561a:	33 1f       	adc	r19, r19
    561c:	22 0f       	add	r18, r18
    561e:	33 1f       	adc	r19, r19
    5620:	82 0f       	add	r24, r18
    5622:	93 1f       	adc	r25, r19
    5624:	84 0f       	add	r24, r20
    5626:	95 1f       	adc	r25, r21
    5628:	fc 01       	movw	r30, r24
    562a:	eb 54       	subi	r30, 0x4B	; 75
    562c:	fe 4f       	sbci	r31, 0xFE	; 254
    562e:	90 81       	ld	r25, Z
    5630:	86 2f       	mov	r24, r22
    5632:	69 2f       	mov	r22, r25
    5634:	40 e0       	ldi	r20, 0x00	; 0
    5636:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    563a:	81 e0       	ldi	r24, 0x01	; 1
    563c:	89 83       	std	Y+1, r24	; 0x01
    563e:	51 c0       	rjmp	.+162    	; 0x56e2 <Seven_Segment_enuDisableDot+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    5640:	8a 81       	ldd	r24, Y+2	; 0x02
    5642:	48 2f       	mov	r20, r24
    5644:	50 e0       	ldi	r21, 0x00	; 0
    5646:	ca 01       	movw	r24, r20
    5648:	88 0f       	add	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	9c 01       	movw	r18, r24
    564e:	22 0f       	add	r18, r18
    5650:	33 1f       	adc	r19, r19
    5652:	22 0f       	add	r18, r18
    5654:	33 1f       	adc	r19, r19
    5656:	22 0f       	add	r18, r18
    5658:	33 1f       	adc	r19, r19
    565a:	82 0f       	add	r24, r18
    565c:	93 1f       	adc	r25, r19
    565e:	84 0f       	add	r24, r20
    5660:	95 1f       	adc	r25, r21
    5662:	fc 01       	movw	r30, r24
    5664:	ea 54       	subi	r30, 0x4A	; 74
    5666:	fe 4f       	sbci	r31, 0xFE	; 254
    5668:	80 81       	ld	r24, Z
    566a:	82 30       	cpi	r24, 0x02	; 2
    566c:	91 f5       	brne	.+100    	; 0x56d2 <Seven_Segment_enuDisableDot+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8HIGH);
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	48 2f       	mov	r20, r24
    5672:	50 e0       	ldi	r21, 0x00	; 0
    5674:	ca 01       	movw	r24, r20
    5676:	88 0f       	add	r24, r24
    5678:	99 1f       	adc	r25, r25
    567a:	9c 01       	movw	r18, r24
    567c:	22 0f       	add	r18, r18
    567e:	33 1f       	adc	r19, r19
    5680:	22 0f       	add	r18, r18
    5682:	33 1f       	adc	r19, r19
    5684:	22 0f       	add	r18, r18
    5686:	33 1f       	adc	r19, r19
    5688:	82 0f       	add	r24, r18
    568a:	93 1f       	adc	r25, r19
    568c:	84 0f       	add	r24, r20
    568e:	95 1f       	adc	r25, r21
    5690:	fc 01       	movw	r30, r24
    5692:	ec 54       	subi	r30, 0x4C	; 76
    5694:	fe 4f       	sbci	r31, 0xFE	; 254
    5696:	60 81       	ld	r22, Z
    5698:	8a 81       	ldd	r24, Y+2	; 0x02
    569a:	48 2f       	mov	r20, r24
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	ca 01       	movw	r24, r20
    56a0:	88 0f       	add	r24, r24
    56a2:	99 1f       	adc	r25, r25
    56a4:	9c 01       	movw	r18, r24
    56a6:	22 0f       	add	r18, r18
    56a8:	33 1f       	adc	r19, r19
    56aa:	22 0f       	add	r18, r18
    56ac:	33 1f       	adc	r19, r19
    56ae:	22 0f       	add	r18, r18
    56b0:	33 1f       	adc	r19, r19
    56b2:	82 0f       	add	r24, r18
    56b4:	93 1f       	adc	r25, r19
    56b6:	84 0f       	add	r24, r20
    56b8:	95 1f       	adc	r25, r21
    56ba:	fc 01       	movw	r30, r24
    56bc:	eb 54       	subi	r30, 0x4B	; 75
    56be:	fe 4f       	sbci	r31, 0xFE	; 254
    56c0:	90 81       	ld	r25, Z
    56c2:	86 2f       	mov	r24, r22
    56c4:	69 2f       	mov	r22, r25
    56c6:	41 e0       	ldi	r20, 0x01	; 1
    56c8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	89 83       	std	Y+1, r24	; 0x01
    56d0:	08 c0       	rjmp	.+16     	; 0x56e2 <Seven_Segment_enuDisableDot+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    56d2:	84 e0       	ldi	r24, 0x04	; 4
    56d4:	89 83       	std	Y+1, r24	; 0x01
    56d6:	05 c0       	rjmp	.+10     	; 0x56e2 <Seven_Segment_enuDisableDot+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    56d8:	84 e0       	ldi	r24, 0x04	; 4
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	02 c0       	rjmp	.+4      	; 0x56e2 <Seven_Segment_enuDisableDot+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    56de:	83 e0       	ldi	r24, 0x03	; 3
    56e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    56e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    56e4:	0f 90       	pop	r0
    56e6:	0f 90       	pop	r0
    56e8:	cf 91       	pop	r28
    56ea:	df 91       	pop	r29
    56ec:	08 95       	ret

000056ee <Seven_Segment_enuClearDisplay>:

ES_T Seven_Segment_enuClearDisplay(u8 Copy_u8SegID)
{
    56ee:	df 93       	push	r29
    56f0:	cf 93       	push	r28
    56f2:	00 d0       	rcall	.+0      	; 0x56f4 <Seven_Segment_enuClearDisplay+0x6>
    56f4:	cd b7       	in	r28, 0x3d	; 61
    56f6:	de b7       	in	r29, 0x3e	; 62
    56f8:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    56fa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    56fc:	8a 81       	ldd	r24, Y+2	; 0x02
    56fe:	82 30       	cpi	r24, 0x02	; 2
    5700:	08 f0       	brcs	.+2      	; 0x5704 <Seven_Segment_enuClearDisplay+0x16>
    5702:	cb c2       	rjmp	.+1430   	; 0x5c9a <Seven_Segment_enuClearDisplay+0x5ac>
	{
		if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    5704:	8a 81       	ldd	r24, Y+2	; 0x02
    5706:	48 2f       	mov	r20, r24
    5708:	50 e0       	ldi	r21, 0x00	; 0
    570a:	ca 01       	movw	r24, r20
    570c:	88 0f       	add	r24, r24
    570e:	99 1f       	adc	r25, r25
    5710:	9c 01       	movw	r18, r24
    5712:	22 0f       	add	r18, r18
    5714:	33 1f       	adc	r19, r19
    5716:	22 0f       	add	r18, r18
    5718:	33 1f       	adc	r19, r19
    571a:	22 0f       	add	r18, r18
    571c:	33 1f       	adc	r19, r19
    571e:	82 0f       	add	r24, r18
    5720:	93 1f       	adc	r25, r19
    5722:	84 0f       	add	r24, r20
    5724:	95 1f       	adc	r25, r21
    5726:	fc 01       	movw	r30, r24
    5728:	ea 54       	subi	r30, 0x4A	; 74
    572a:	fe 4f       	sbci	r31, 0xFE	; 254
    572c:	80 81       	ld	r24, Z
    572e:	81 30       	cpi	r24, 0x01	; 1
    5730:	09 f0       	breq	.+2      	; 0x5734 <Seven_Segment_enuClearDisplay+0x46>
    5732:	4c c1       	rjmp	.+664    	; 0x59cc <Seven_Segment_enuClearDisplay+0x2de>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , DIO_u8LOW );
    5734:	8a 81       	ldd	r24, Y+2	; 0x02
    5736:	48 2f       	mov	r20, r24
    5738:	50 e0       	ldi	r21, 0x00	; 0
    573a:	ca 01       	movw	r24, r20
    573c:	88 0f       	add	r24, r24
    573e:	99 1f       	adc	r25, r25
    5740:	9c 01       	movw	r18, r24
    5742:	22 0f       	add	r18, r18
    5744:	33 1f       	adc	r19, r19
    5746:	22 0f       	add	r18, r18
    5748:	33 1f       	adc	r19, r19
    574a:	22 0f       	add	r18, r18
    574c:	33 1f       	adc	r19, r19
    574e:	82 0f       	add	r24, r18
    5750:	93 1f       	adc	r25, r19
    5752:	84 0f       	add	r24, r20
    5754:	95 1f       	adc	r25, r21
    5756:	fc 01       	movw	r30, r24
    5758:	ec 55       	subi	r30, 0x5C	; 92
    575a:	fe 4f       	sbci	r31, 0xFE	; 254
    575c:	60 81       	ld	r22, Z
    575e:	8a 81       	ldd	r24, Y+2	; 0x02
    5760:	48 2f       	mov	r20, r24
    5762:	50 e0       	ldi	r21, 0x00	; 0
    5764:	ca 01       	movw	r24, r20
    5766:	88 0f       	add	r24, r24
    5768:	99 1f       	adc	r25, r25
    576a:	9c 01       	movw	r18, r24
    576c:	22 0f       	add	r18, r18
    576e:	33 1f       	adc	r19, r19
    5770:	22 0f       	add	r18, r18
    5772:	33 1f       	adc	r19, r19
    5774:	22 0f       	add	r18, r18
    5776:	33 1f       	adc	r19, r19
    5778:	82 0f       	add	r24, r18
    577a:	93 1f       	adc	r25, r19
    577c:	84 0f       	add	r24, r20
    577e:	95 1f       	adc	r25, r21
    5780:	fc 01       	movw	r30, r24
    5782:	eb 55       	subi	r30, 0x5B	; 91
    5784:	fe 4f       	sbci	r31, 0xFE	; 254
    5786:	90 81       	ld	r25, Z
    5788:	86 2f       	mov	r24, r22
    578a:	69 2f       	mov	r22, r25
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , DIO_u8LOW );
    5792:	8a 81       	ldd	r24, Y+2	; 0x02
    5794:	48 2f       	mov	r20, r24
    5796:	50 e0       	ldi	r21, 0x00	; 0
    5798:	ca 01       	movw	r24, r20
    579a:	88 0f       	add	r24, r24
    579c:	99 1f       	adc	r25, r25
    579e:	9c 01       	movw	r18, r24
    57a0:	22 0f       	add	r18, r18
    57a2:	33 1f       	adc	r19, r19
    57a4:	22 0f       	add	r18, r18
    57a6:	33 1f       	adc	r19, r19
    57a8:	22 0f       	add	r18, r18
    57aa:	33 1f       	adc	r19, r19
    57ac:	82 0f       	add	r24, r18
    57ae:	93 1f       	adc	r25, r19
    57b0:	84 0f       	add	r24, r20
    57b2:	95 1f       	adc	r25, r21
    57b4:	fc 01       	movw	r30, r24
    57b6:	ea 55       	subi	r30, 0x5A	; 90
    57b8:	fe 4f       	sbci	r31, 0xFE	; 254
    57ba:	60 81       	ld	r22, Z
    57bc:	8a 81       	ldd	r24, Y+2	; 0x02
    57be:	48 2f       	mov	r20, r24
    57c0:	50 e0       	ldi	r21, 0x00	; 0
    57c2:	ca 01       	movw	r24, r20
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	9c 01       	movw	r18, r24
    57ca:	22 0f       	add	r18, r18
    57cc:	33 1f       	adc	r19, r19
    57ce:	22 0f       	add	r18, r18
    57d0:	33 1f       	adc	r19, r19
    57d2:	22 0f       	add	r18, r18
    57d4:	33 1f       	adc	r19, r19
    57d6:	82 0f       	add	r24, r18
    57d8:	93 1f       	adc	r25, r19
    57da:	84 0f       	add	r24, r20
    57dc:	95 1f       	adc	r25, r21
    57de:	fc 01       	movw	r30, r24
    57e0:	e9 55       	subi	r30, 0x59	; 89
    57e2:	fe 4f       	sbci	r31, 0xFE	; 254
    57e4:	90 81       	ld	r25, Z
    57e6:	86 2f       	mov	r24, r22
    57e8:	69 2f       	mov	r22, r25
    57ea:	40 e0       	ldi	r20, 0x00	; 0
    57ec:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , DIO_u8LOW );
    57f0:	8a 81       	ldd	r24, Y+2	; 0x02
    57f2:	48 2f       	mov	r20, r24
    57f4:	50 e0       	ldi	r21, 0x00	; 0
    57f6:	ca 01       	movw	r24, r20
    57f8:	88 0f       	add	r24, r24
    57fa:	99 1f       	adc	r25, r25
    57fc:	9c 01       	movw	r18, r24
    57fe:	22 0f       	add	r18, r18
    5800:	33 1f       	adc	r19, r19
    5802:	22 0f       	add	r18, r18
    5804:	33 1f       	adc	r19, r19
    5806:	22 0f       	add	r18, r18
    5808:	33 1f       	adc	r19, r19
    580a:	82 0f       	add	r24, r18
    580c:	93 1f       	adc	r25, r19
    580e:	84 0f       	add	r24, r20
    5810:	95 1f       	adc	r25, r21
    5812:	fc 01       	movw	r30, r24
    5814:	e8 55       	subi	r30, 0x58	; 88
    5816:	fe 4f       	sbci	r31, 0xFE	; 254
    5818:	60 81       	ld	r22, Z
    581a:	8a 81       	ldd	r24, Y+2	; 0x02
    581c:	48 2f       	mov	r20, r24
    581e:	50 e0       	ldi	r21, 0x00	; 0
    5820:	ca 01       	movw	r24, r20
    5822:	88 0f       	add	r24, r24
    5824:	99 1f       	adc	r25, r25
    5826:	9c 01       	movw	r18, r24
    5828:	22 0f       	add	r18, r18
    582a:	33 1f       	adc	r19, r19
    582c:	22 0f       	add	r18, r18
    582e:	33 1f       	adc	r19, r19
    5830:	22 0f       	add	r18, r18
    5832:	33 1f       	adc	r19, r19
    5834:	82 0f       	add	r24, r18
    5836:	93 1f       	adc	r25, r19
    5838:	84 0f       	add	r24, r20
    583a:	95 1f       	adc	r25, r21
    583c:	fc 01       	movw	r30, r24
    583e:	e7 55       	subi	r30, 0x57	; 87
    5840:	fe 4f       	sbci	r31, 0xFE	; 254
    5842:	90 81       	ld	r25, Z
    5844:	86 2f       	mov	r24, r22
    5846:	69 2f       	mov	r22, r25
    5848:	40 e0       	ldi	r20, 0x00	; 0
    584a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , DIO_u8LOW );
    584e:	8a 81       	ldd	r24, Y+2	; 0x02
    5850:	48 2f       	mov	r20, r24
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	ca 01       	movw	r24, r20
    5856:	88 0f       	add	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	9c 01       	movw	r18, r24
    585c:	22 0f       	add	r18, r18
    585e:	33 1f       	adc	r19, r19
    5860:	22 0f       	add	r18, r18
    5862:	33 1f       	adc	r19, r19
    5864:	22 0f       	add	r18, r18
    5866:	33 1f       	adc	r19, r19
    5868:	82 0f       	add	r24, r18
    586a:	93 1f       	adc	r25, r19
    586c:	84 0f       	add	r24, r20
    586e:	95 1f       	adc	r25, r21
    5870:	fc 01       	movw	r30, r24
    5872:	e6 55       	subi	r30, 0x56	; 86
    5874:	fe 4f       	sbci	r31, 0xFE	; 254
    5876:	60 81       	ld	r22, Z
    5878:	8a 81       	ldd	r24, Y+2	; 0x02
    587a:	48 2f       	mov	r20, r24
    587c:	50 e0       	ldi	r21, 0x00	; 0
    587e:	ca 01       	movw	r24, r20
    5880:	88 0f       	add	r24, r24
    5882:	99 1f       	adc	r25, r25
    5884:	9c 01       	movw	r18, r24
    5886:	22 0f       	add	r18, r18
    5888:	33 1f       	adc	r19, r19
    588a:	22 0f       	add	r18, r18
    588c:	33 1f       	adc	r19, r19
    588e:	22 0f       	add	r18, r18
    5890:	33 1f       	adc	r19, r19
    5892:	82 0f       	add	r24, r18
    5894:	93 1f       	adc	r25, r19
    5896:	84 0f       	add	r24, r20
    5898:	95 1f       	adc	r25, r21
    589a:	fc 01       	movw	r30, r24
    589c:	e5 55       	subi	r30, 0x55	; 85
    589e:	fe 4f       	sbci	r31, 0xFE	; 254
    58a0:	90 81       	ld	r25, Z
    58a2:	86 2f       	mov	r24, r22
    58a4:	69 2f       	mov	r22, r25
    58a6:	40 e0       	ldi	r20, 0x00	; 0
    58a8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , DIO_u8LOW );
    58ac:	8a 81       	ldd	r24, Y+2	; 0x02
    58ae:	48 2f       	mov	r20, r24
    58b0:	50 e0       	ldi	r21, 0x00	; 0
    58b2:	ca 01       	movw	r24, r20
    58b4:	88 0f       	add	r24, r24
    58b6:	99 1f       	adc	r25, r25
    58b8:	9c 01       	movw	r18, r24
    58ba:	22 0f       	add	r18, r18
    58bc:	33 1f       	adc	r19, r19
    58be:	22 0f       	add	r18, r18
    58c0:	33 1f       	adc	r19, r19
    58c2:	22 0f       	add	r18, r18
    58c4:	33 1f       	adc	r19, r19
    58c6:	82 0f       	add	r24, r18
    58c8:	93 1f       	adc	r25, r19
    58ca:	84 0f       	add	r24, r20
    58cc:	95 1f       	adc	r25, r21
    58ce:	fc 01       	movw	r30, r24
    58d0:	e4 55       	subi	r30, 0x54	; 84
    58d2:	fe 4f       	sbci	r31, 0xFE	; 254
    58d4:	60 81       	ld	r22, Z
    58d6:	8a 81       	ldd	r24, Y+2	; 0x02
    58d8:	48 2f       	mov	r20, r24
    58da:	50 e0       	ldi	r21, 0x00	; 0
    58dc:	ca 01       	movw	r24, r20
    58de:	88 0f       	add	r24, r24
    58e0:	99 1f       	adc	r25, r25
    58e2:	9c 01       	movw	r18, r24
    58e4:	22 0f       	add	r18, r18
    58e6:	33 1f       	adc	r19, r19
    58e8:	22 0f       	add	r18, r18
    58ea:	33 1f       	adc	r19, r19
    58ec:	22 0f       	add	r18, r18
    58ee:	33 1f       	adc	r19, r19
    58f0:	82 0f       	add	r24, r18
    58f2:	93 1f       	adc	r25, r19
    58f4:	84 0f       	add	r24, r20
    58f6:	95 1f       	adc	r25, r21
    58f8:	fc 01       	movw	r30, r24
    58fa:	e3 55       	subi	r30, 0x53	; 83
    58fc:	fe 4f       	sbci	r31, 0xFE	; 254
    58fe:	90 81       	ld	r25, Z
    5900:	86 2f       	mov	r24, r22
    5902:	69 2f       	mov	r22, r25
    5904:	40 e0       	ldi	r20, 0x00	; 0
    5906:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , DIO_u8LOW );
    590a:	8a 81       	ldd	r24, Y+2	; 0x02
    590c:	48 2f       	mov	r20, r24
    590e:	50 e0       	ldi	r21, 0x00	; 0
    5910:	ca 01       	movw	r24, r20
    5912:	88 0f       	add	r24, r24
    5914:	99 1f       	adc	r25, r25
    5916:	9c 01       	movw	r18, r24
    5918:	22 0f       	add	r18, r18
    591a:	33 1f       	adc	r19, r19
    591c:	22 0f       	add	r18, r18
    591e:	33 1f       	adc	r19, r19
    5920:	22 0f       	add	r18, r18
    5922:	33 1f       	adc	r19, r19
    5924:	82 0f       	add	r24, r18
    5926:	93 1f       	adc	r25, r19
    5928:	84 0f       	add	r24, r20
    592a:	95 1f       	adc	r25, r21
    592c:	fc 01       	movw	r30, r24
    592e:	e2 55       	subi	r30, 0x52	; 82
    5930:	fe 4f       	sbci	r31, 0xFE	; 254
    5932:	60 81       	ld	r22, Z
    5934:	8a 81       	ldd	r24, Y+2	; 0x02
    5936:	48 2f       	mov	r20, r24
    5938:	50 e0       	ldi	r21, 0x00	; 0
    593a:	ca 01       	movw	r24, r20
    593c:	88 0f       	add	r24, r24
    593e:	99 1f       	adc	r25, r25
    5940:	9c 01       	movw	r18, r24
    5942:	22 0f       	add	r18, r18
    5944:	33 1f       	adc	r19, r19
    5946:	22 0f       	add	r18, r18
    5948:	33 1f       	adc	r19, r19
    594a:	22 0f       	add	r18, r18
    594c:	33 1f       	adc	r19, r19
    594e:	82 0f       	add	r24, r18
    5950:	93 1f       	adc	r25, r19
    5952:	84 0f       	add	r24, r20
    5954:	95 1f       	adc	r25, r21
    5956:	fc 01       	movw	r30, r24
    5958:	e1 55       	subi	r30, 0x51	; 81
    595a:	fe 4f       	sbci	r31, 0xFE	; 254
    595c:	90 81       	ld	r25, Z
    595e:	86 2f       	mov	r24, r22
    5960:	69 2f       	mov	r22, r25
    5962:	40 e0       	ldi	r20, 0x00	; 0
    5964:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , DIO_u8LOW );
    5968:	8a 81       	ldd	r24, Y+2	; 0x02
    596a:	48 2f       	mov	r20, r24
    596c:	50 e0       	ldi	r21, 0x00	; 0
    596e:	ca 01       	movw	r24, r20
    5970:	88 0f       	add	r24, r24
    5972:	99 1f       	adc	r25, r25
    5974:	9c 01       	movw	r18, r24
    5976:	22 0f       	add	r18, r18
    5978:	33 1f       	adc	r19, r19
    597a:	22 0f       	add	r18, r18
    597c:	33 1f       	adc	r19, r19
    597e:	22 0f       	add	r18, r18
    5980:	33 1f       	adc	r19, r19
    5982:	82 0f       	add	r24, r18
    5984:	93 1f       	adc	r25, r19
    5986:	84 0f       	add	r24, r20
    5988:	95 1f       	adc	r25, r21
    598a:	fc 01       	movw	r30, r24
    598c:	e0 55       	subi	r30, 0x50	; 80
    598e:	fe 4f       	sbci	r31, 0xFE	; 254
    5990:	60 81       	ld	r22, Z
    5992:	8a 81       	ldd	r24, Y+2	; 0x02
    5994:	48 2f       	mov	r20, r24
    5996:	50 e0       	ldi	r21, 0x00	; 0
    5998:	ca 01       	movw	r24, r20
    599a:	88 0f       	add	r24, r24
    599c:	99 1f       	adc	r25, r25
    599e:	9c 01       	movw	r18, r24
    59a0:	22 0f       	add	r18, r18
    59a2:	33 1f       	adc	r19, r19
    59a4:	22 0f       	add	r18, r18
    59a6:	33 1f       	adc	r19, r19
    59a8:	22 0f       	add	r18, r18
    59aa:	33 1f       	adc	r19, r19
    59ac:	82 0f       	add	r24, r18
    59ae:	93 1f       	adc	r25, r19
    59b0:	84 0f       	add	r24, r20
    59b2:	95 1f       	adc	r25, r21
    59b4:	fc 01       	movw	r30, r24
    59b6:	ef 54       	subi	r30, 0x4F	; 79
    59b8:	fe 4f       	sbci	r31, 0xFE	; 254
    59ba:	90 81       	ld	r25, Z
    59bc:	86 2f       	mov	r24, r22
    59be:	69 2f       	mov	r22, r25
    59c0:	40 e0       	ldi	r20, 0x00	; 0
    59c2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	89 83       	std	Y+1, r24	; 0x01
    59ca:	69 c1       	rjmp	.+722    	; 0x5c9e <Seven_Segment_enuClearDisplay+0x5b0>

		}
		else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    59cc:	8a 81       	ldd	r24, Y+2	; 0x02
    59ce:	48 2f       	mov	r20, r24
    59d0:	50 e0       	ldi	r21, 0x00	; 0
    59d2:	ca 01       	movw	r24, r20
    59d4:	88 0f       	add	r24, r24
    59d6:	99 1f       	adc	r25, r25
    59d8:	9c 01       	movw	r18, r24
    59da:	22 0f       	add	r18, r18
    59dc:	33 1f       	adc	r19, r19
    59de:	22 0f       	add	r18, r18
    59e0:	33 1f       	adc	r19, r19
    59e2:	22 0f       	add	r18, r18
    59e4:	33 1f       	adc	r19, r19
    59e6:	82 0f       	add	r24, r18
    59e8:	93 1f       	adc	r25, r19
    59ea:	84 0f       	add	r24, r20
    59ec:	95 1f       	adc	r25, r21
    59ee:	fc 01       	movw	r30, r24
    59f0:	ea 54       	subi	r30, 0x4A	; 74
    59f2:	fe 4f       	sbci	r31, 0xFE	; 254
    59f4:	80 81       	ld	r24, Z
    59f6:	82 30       	cpi	r24, 0x02	; 2
    59f8:	09 f0       	breq	.+2      	; 0x59fc <Seven_Segment_enuClearDisplay+0x30e>
    59fa:	4c c1       	rjmp	.+664    	; 0x5c94 <Seven_Segment_enuClearDisplay+0x5a6>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , DIO_u8HIGH);
    59fc:	8a 81       	ldd	r24, Y+2	; 0x02
    59fe:	48 2f       	mov	r20, r24
    5a00:	50 e0       	ldi	r21, 0x00	; 0
    5a02:	ca 01       	movw	r24, r20
    5a04:	88 0f       	add	r24, r24
    5a06:	99 1f       	adc	r25, r25
    5a08:	9c 01       	movw	r18, r24
    5a0a:	22 0f       	add	r18, r18
    5a0c:	33 1f       	adc	r19, r19
    5a0e:	22 0f       	add	r18, r18
    5a10:	33 1f       	adc	r19, r19
    5a12:	22 0f       	add	r18, r18
    5a14:	33 1f       	adc	r19, r19
    5a16:	82 0f       	add	r24, r18
    5a18:	93 1f       	adc	r25, r19
    5a1a:	84 0f       	add	r24, r20
    5a1c:	95 1f       	adc	r25, r21
    5a1e:	fc 01       	movw	r30, r24
    5a20:	ec 55       	subi	r30, 0x5C	; 92
    5a22:	fe 4f       	sbci	r31, 0xFE	; 254
    5a24:	60 81       	ld	r22, Z
    5a26:	8a 81       	ldd	r24, Y+2	; 0x02
    5a28:	48 2f       	mov	r20, r24
    5a2a:	50 e0       	ldi	r21, 0x00	; 0
    5a2c:	ca 01       	movw	r24, r20
    5a2e:	88 0f       	add	r24, r24
    5a30:	99 1f       	adc	r25, r25
    5a32:	9c 01       	movw	r18, r24
    5a34:	22 0f       	add	r18, r18
    5a36:	33 1f       	adc	r19, r19
    5a38:	22 0f       	add	r18, r18
    5a3a:	33 1f       	adc	r19, r19
    5a3c:	22 0f       	add	r18, r18
    5a3e:	33 1f       	adc	r19, r19
    5a40:	82 0f       	add	r24, r18
    5a42:	93 1f       	adc	r25, r19
    5a44:	84 0f       	add	r24, r20
    5a46:	95 1f       	adc	r25, r21
    5a48:	fc 01       	movw	r30, r24
    5a4a:	eb 55       	subi	r30, 0x5B	; 91
    5a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a4e:	90 81       	ld	r25, Z
    5a50:	86 2f       	mov	r24, r22
    5a52:	69 2f       	mov	r22, r25
    5a54:	41 e0       	ldi	r20, 0x01	; 1
    5a56:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , DIO_u8HIGH);
    5a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5c:	48 2f       	mov	r20, r24
    5a5e:	50 e0       	ldi	r21, 0x00	; 0
    5a60:	ca 01       	movw	r24, r20
    5a62:	88 0f       	add	r24, r24
    5a64:	99 1f       	adc	r25, r25
    5a66:	9c 01       	movw	r18, r24
    5a68:	22 0f       	add	r18, r18
    5a6a:	33 1f       	adc	r19, r19
    5a6c:	22 0f       	add	r18, r18
    5a6e:	33 1f       	adc	r19, r19
    5a70:	22 0f       	add	r18, r18
    5a72:	33 1f       	adc	r19, r19
    5a74:	82 0f       	add	r24, r18
    5a76:	93 1f       	adc	r25, r19
    5a78:	84 0f       	add	r24, r20
    5a7a:	95 1f       	adc	r25, r21
    5a7c:	fc 01       	movw	r30, r24
    5a7e:	ea 55       	subi	r30, 0x5A	; 90
    5a80:	fe 4f       	sbci	r31, 0xFE	; 254
    5a82:	60 81       	ld	r22, Z
    5a84:	8a 81       	ldd	r24, Y+2	; 0x02
    5a86:	48 2f       	mov	r20, r24
    5a88:	50 e0       	ldi	r21, 0x00	; 0
    5a8a:	ca 01       	movw	r24, r20
    5a8c:	88 0f       	add	r24, r24
    5a8e:	99 1f       	adc	r25, r25
    5a90:	9c 01       	movw	r18, r24
    5a92:	22 0f       	add	r18, r18
    5a94:	33 1f       	adc	r19, r19
    5a96:	22 0f       	add	r18, r18
    5a98:	33 1f       	adc	r19, r19
    5a9a:	22 0f       	add	r18, r18
    5a9c:	33 1f       	adc	r19, r19
    5a9e:	82 0f       	add	r24, r18
    5aa0:	93 1f       	adc	r25, r19
    5aa2:	84 0f       	add	r24, r20
    5aa4:	95 1f       	adc	r25, r21
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	e9 55       	subi	r30, 0x59	; 89
    5aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    5aac:	90 81       	ld	r25, Z
    5aae:	86 2f       	mov	r24, r22
    5ab0:	69 2f       	mov	r22, r25
    5ab2:	41 e0       	ldi	r20, 0x01	; 1
    5ab4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , DIO_u8HIGH);
    5ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    5aba:	48 2f       	mov	r20, r24
    5abc:	50 e0       	ldi	r21, 0x00	; 0
    5abe:	ca 01       	movw	r24, r20
    5ac0:	88 0f       	add	r24, r24
    5ac2:	99 1f       	adc	r25, r25
    5ac4:	9c 01       	movw	r18, r24
    5ac6:	22 0f       	add	r18, r18
    5ac8:	33 1f       	adc	r19, r19
    5aca:	22 0f       	add	r18, r18
    5acc:	33 1f       	adc	r19, r19
    5ace:	22 0f       	add	r18, r18
    5ad0:	33 1f       	adc	r19, r19
    5ad2:	82 0f       	add	r24, r18
    5ad4:	93 1f       	adc	r25, r19
    5ad6:	84 0f       	add	r24, r20
    5ad8:	95 1f       	adc	r25, r21
    5ada:	fc 01       	movw	r30, r24
    5adc:	e8 55       	subi	r30, 0x58	; 88
    5ade:	fe 4f       	sbci	r31, 0xFE	; 254
    5ae0:	60 81       	ld	r22, Z
    5ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae4:	48 2f       	mov	r20, r24
    5ae6:	50 e0       	ldi	r21, 0x00	; 0
    5ae8:	ca 01       	movw	r24, r20
    5aea:	88 0f       	add	r24, r24
    5aec:	99 1f       	adc	r25, r25
    5aee:	9c 01       	movw	r18, r24
    5af0:	22 0f       	add	r18, r18
    5af2:	33 1f       	adc	r19, r19
    5af4:	22 0f       	add	r18, r18
    5af6:	33 1f       	adc	r19, r19
    5af8:	22 0f       	add	r18, r18
    5afa:	33 1f       	adc	r19, r19
    5afc:	82 0f       	add	r24, r18
    5afe:	93 1f       	adc	r25, r19
    5b00:	84 0f       	add	r24, r20
    5b02:	95 1f       	adc	r25, r21
    5b04:	fc 01       	movw	r30, r24
    5b06:	e7 55       	subi	r30, 0x57	; 87
    5b08:	fe 4f       	sbci	r31, 0xFE	; 254
    5b0a:	90 81       	ld	r25, Z
    5b0c:	86 2f       	mov	r24, r22
    5b0e:	69 2f       	mov	r22, r25
    5b10:	41 e0       	ldi	r20, 0x01	; 1
    5b12:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , DIO_u8HIGH);
    5b16:	8a 81       	ldd	r24, Y+2	; 0x02
    5b18:	48 2f       	mov	r20, r24
    5b1a:	50 e0       	ldi	r21, 0x00	; 0
    5b1c:	ca 01       	movw	r24, r20
    5b1e:	88 0f       	add	r24, r24
    5b20:	99 1f       	adc	r25, r25
    5b22:	9c 01       	movw	r18, r24
    5b24:	22 0f       	add	r18, r18
    5b26:	33 1f       	adc	r19, r19
    5b28:	22 0f       	add	r18, r18
    5b2a:	33 1f       	adc	r19, r19
    5b2c:	22 0f       	add	r18, r18
    5b2e:	33 1f       	adc	r19, r19
    5b30:	82 0f       	add	r24, r18
    5b32:	93 1f       	adc	r25, r19
    5b34:	84 0f       	add	r24, r20
    5b36:	95 1f       	adc	r25, r21
    5b38:	fc 01       	movw	r30, r24
    5b3a:	e6 55       	subi	r30, 0x56	; 86
    5b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    5b3e:	60 81       	ld	r22, Z
    5b40:	8a 81       	ldd	r24, Y+2	; 0x02
    5b42:	48 2f       	mov	r20, r24
    5b44:	50 e0       	ldi	r21, 0x00	; 0
    5b46:	ca 01       	movw	r24, r20
    5b48:	88 0f       	add	r24, r24
    5b4a:	99 1f       	adc	r25, r25
    5b4c:	9c 01       	movw	r18, r24
    5b4e:	22 0f       	add	r18, r18
    5b50:	33 1f       	adc	r19, r19
    5b52:	22 0f       	add	r18, r18
    5b54:	33 1f       	adc	r19, r19
    5b56:	22 0f       	add	r18, r18
    5b58:	33 1f       	adc	r19, r19
    5b5a:	82 0f       	add	r24, r18
    5b5c:	93 1f       	adc	r25, r19
    5b5e:	84 0f       	add	r24, r20
    5b60:	95 1f       	adc	r25, r21
    5b62:	fc 01       	movw	r30, r24
    5b64:	e5 55       	subi	r30, 0x55	; 85
    5b66:	fe 4f       	sbci	r31, 0xFE	; 254
    5b68:	90 81       	ld	r25, Z
    5b6a:	86 2f       	mov	r24, r22
    5b6c:	69 2f       	mov	r22, r25
    5b6e:	41 e0       	ldi	r20, 0x01	; 1
    5b70:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , DIO_u8HIGH);
    5b74:	8a 81       	ldd	r24, Y+2	; 0x02
    5b76:	48 2f       	mov	r20, r24
    5b78:	50 e0       	ldi	r21, 0x00	; 0
    5b7a:	ca 01       	movw	r24, r20
    5b7c:	88 0f       	add	r24, r24
    5b7e:	99 1f       	adc	r25, r25
    5b80:	9c 01       	movw	r18, r24
    5b82:	22 0f       	add	r18, r18
    5b84:	33 1f       	adc	r19, r19
    5b86:	22 0f       	add	r18, r18
    5b88:	33 1f       	adc	r19, r19
    5b8a:	22 0f       	add	r18, r18
    5b8c:	33 1f       	adc	r19, r19
    5b8e:	82 0f       	add	r24, r18
    5b90:	93 1f       	adc	r25, r19
    5b92:	84 0f       	add	r24, r20
    5b94:	95 1f       	adc	r25, r21
    5b96:	fc 01       	movw	r30, r24
    5b98:	e4 55       	subi	r30, 0x54	; 84
    5b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    5b9c:	60 81       	ld	r22, Z
    5b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba0:	48 2f       	mov	r20, r24
    5ba2:	50 e0       	ldi	r21, 0x00	; 0
    5ba4:	ca 01       	movw	r24, r20
    5ba6:	88 0f       	add	r24, r24
    5ba8:	99 1f       	adc	r25, r25
    5baa:	9c 01       	movw	r18, r24
    5bac:	22 0f       	add	r18, r18
    5bae:	33 1f       	adc	r19, r19
    5bb0:	22 0f       	add	r18, r18
    5bb2:	33 1f       	adc	r19, r19
    5bb4:	22 0f       	add	r18, r18
    5bb6:	33 1f       	adc	r19, r19
    5bb8:	82 0f       	add	r24, r18
    5bba:	93 1f       	adc	r25, r19
    5bbc:	84 0f       	add	r24, r20
    5bbe:	95 1f       	adc	r25, r21
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	e3 55       	subi	r30, 0x53	; 83
    5bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc6:	90 81       	ld	r25, Z
    5bc8:	86 2f       	mov	r24, r22
    5bca:	69 2f       	mov	r22, r25
    5bcc:	41 e0       	ldi	r20, 0x01	; 1
    5bce:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , DIO_u8HIGH);
    5bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd4:	48 2f       	mov	r20, r24
    5bd6:	50 e0       	ldi	r21, 0x00	; 0
    5bd8:	ca 01       	movw	r24, r20
    5bda:	88 0f       	add	r24, r24
    5bdc:	99 1f       	adc	r25, r25
    5bde:	9c 01       	movw	r18, r24
    5be0:	22 0f       	add	r18, r18
    5be2:	33 1f       	adc	r19, r19
    5be4:	22 0f       	add	r18, r18
    5be6:	33 1f       	adc	r19, r19
    5be8:	22 0f       	add	r18, r18
    5bea:	33 1f       	adc	r19, r19
    5bec:	82 0f       	add	r24, r18
    5bee:	93 1f       	adc	r25, r19
    5bf0:	84 0f       	add	r24, r20
    5bf2:	95 1f       	adc	r25, r21
    5bf4:	fc 01       	movw	r30, r24
    5bf6:	e2 55       	subi	r30, 0x52	; 82
    5bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    5bfa:	60 81       	ld	r22, Z
    5bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfe:	48 2f       	mov	r20, r24
    5c00:	50 e0       	ldi	r21, 0x00	; 0
    5c02:	ca 01       	movw	r24, r20
    5c04:	88 0f       	add	r24, r24
    5c06:	99 1f       	adc	r25, r25
    5c08:	9c 01       	movw	r18, r24
    5c0a:	22 0f       	add	r18, r18
    5c0c:	33 1f       	adc	r19, r19
    5c0e:	22 0f       	add	r18, r18
    5c10:	33 1f       	adc	r19, r19
    5c12:	22 0f       	add	r18, r18
    5c14:	33 1f       	adc	r19, r19
    5c16:	82 0f       	add	r24, r18
    5c18:	93 1f       	adc	r25, r19
    5c1a:	84 0f       	add	r24, r20
    5c1c:	95 1f       	adc	r25, r21
    5c1e:	fc 01       	movw	r30, r24
    5c20:	e1 55       	subi	r30, 0x51	; 81
    5c22:	fe 4f       	sbci	r31, 0xFE	; 254
    5c24:	90 81       	ld	r25, Z
    5c26:	86 2f       	mov	r24, r22
    5c28:	69 2f       	mov	r22, r25
    5c2a:	41 e0       	ldi	r20, 0x01	; 1
    5c2c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , DIO_u8HIGH);
    5c30:	8a 81       	ldd	r24, Y+2	; 0x02
    5c32:	48 2f       	mov	r20, r24
    5c34:	50 e0       	ldi	r21, 0x00	; 0
    5c36:	ca 01       	movw	r24, r20
    5c38:	88 0f       	add	r24, r24
    5c3a:	99 1f       	adc	r25, r25
    5c3c:	9c 01       	movw	r18, r24
    5c3e:	22 0f       	add	r18, r18
    5c40:	33 1f       	adc	r19, r19
    5c42:	22 0f       	add	r18, r18
    5c44:	33 1f       	adc	r19, r19
    5c46:	22 0f       	add	r18, r18
    5c48:	33 1f       	adc	r19, r19
    5c4a:	82 0f       	add	r24, r18
    5c4c:	93 1f       	adc	r25, r19
    5c4e:	84 0f       	add	r24, r20
    5c50:	95 1f       	adc	r25, r21
    5c52:	fc 01       	movw	r30, r24
    5c54:	e0 55       	subi	r30, 0x50	; 80
    5c56:	fe 4f       	sbci	r31, 0xFE	; 254
    5c58:	60 81       	ld	r22, Z
    5c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5c:	48 2f       	mov	r20, r24
    5c5e:	50 e0       	ldi	r21, 0x00	; 0
    5c60:	ca 01       	movw	r24, r20
    5c62:	88 0f       	add	r24, r24
    5c64:	99 1f       	adc	r25, r25
    5c66:	9c 01       	movw	r18, r24
    5c68:	22 0f       	add	r18, r18
    5c6a:	33 1f       	adc	r19, r19
    5c6c:	22 0f       	add	r18, r18
    5c6e:	33 1f       	adc	r19, r19
    5c70:	22 0f       	add	r18, r18
    5c72:	33 1f       	adc	r19, r19
    5c74:	82 0f       	add	r24, r18
    5c76:	93 1f       	adc	r25, r19
    5c78:	84 0f       	add	r24, r20
    5c7a:	95 1f       	adc	r25, r21
    5c7c:	fc 01       	movw	r30, r24
    5c7e:	ef 54       	subi	r30, 0x4F	; 79
    5c80:	fe 4f       	sbci	r31, 0xFE	; 254
    5c82:	90 81       	ld	r25, Z
    5c84:	86 2f       	mov	r24, r22
    5c86:	69 2f       	mov	r22, r25
    5c88:	41 e0       	ldi	r20, 0x01	; 1
    5c8a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	89 83       	std	Y+1, r24	; 0x01
    5c92:	05 c0       	rjmp	.+10     	; 0x5c9e <Seven_Segment_enuClearDisplay+0x5b0>
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    5c94:	84 e0       	ldi	r24, 0x04	; 4
    5c96:	89 83       	std	Y+1, r24	; 0x01
    5c98:	02 c0       	rjmp	.+4      	; 0x5c9e <Seven_Segment_enuClearDisplay+0x5b0>
		}
	}
	else
	{
		Local_enuErrorState =ES_OUTOFRANGE;
    5c9a:	83 e0       	ldi	r24, 0x03	; 3
    5c9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    5c9e:	89 81       	ldd	r24, Y+1	; 0x01

}
    5ca0:	0f 90       	pop	r0
    5ca2:	0f 90       	pop	r0
    5ca4:	cf 91       	pop	r28
    5ca6:	df 91       	pop	r29
    5ca8:	08 95       	ret

00005caa <main>:
#include "../MCAL/SPI/SPI_Interface.h"

#include <util/delay.h>

int main(void)
{
    5caa:	df 93       	push	r29
    5cac:	cf 93       	push	r28
    5cae:	cd b7       	in	r28, 0x3d	; 61
    5cb0:	de b7       	in	r29, 0x3e	; 62
    5cb2:	2f 97       	sbiw	r28, 0x0f	; 15
    5cb4:	0f b6       	in	r0, 0x3f	; 63
    5cb6:	f8 94       	cli
    5cb8:	de bf       	out	0x3e, r29	; 62
    5cba:	0f be       	out	0x3f, r0	; 63
    5cbc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8DataExchange=0;
    5cbe:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_enuInit();
    5cc0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_enuInit>
	SPI_enuInitMaster();
    5cc4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_enuInitMaster>
	DIO_enuSetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8OUTPUT);
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
    5cca:	62 e0       	ldi	r22, 0x02	; 2
    5ccc:	41 e0       	ldi	r20, 0x01	; 1
    5cce:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>


    DIO_enuSetPinDirection(DIO_u8PORTB,DIO_u8PIN4,DIO_u8INPUT);
    5cd2:	81 e0       	ldi	r24, 0x01	; 1
    5cd4:	64 e0       	ldi	r22, 0x04	; 4
    5cd6:	40 e0       	ldi	r20, 0x00	; 0
    5cd8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    DIO_enuSetPinValue(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PULLUP);
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	64 e0       	ldi	r22, 0x04	; 4
    5ce0:	41 e0       	ldi	r20, 0x01	; 1
    5ce2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(DIO_u8PORTB,DIO_u8PIN5,DIO_u8OUTPUT);
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	65 e0       	ldi	r22, 0x05	; 5
    5cea:	41 e0       	ldi	r20, 0x01	; 1
    5cec:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTB,DIO_u8PIN6,DIO_u8INPUT);
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	66 e0       	ldi	r22, 0x06	; 6
    5cf4:	40 e0       	ldi	r20, 0x00	; 0
    5cf6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTB,DIO_u8PIN7,DIO_u8OUTPUT);
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	67 e0       	ldi	r22, 0x07	; 7
    5cfe:	41 e0       	ldi	r20, 0x01	; 1
    5d00:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>


	while(1)
	{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8HIGH);
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	60 e0       	ldi	r22, 0x00	; 0
    5d08:	41 e0       	ldi	r20, 0x01	; 1
    5d0a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		SPI_enuTransceive(4,&Local_u8DataExchange);
    5d0e:	9e 01       	movw	r18, r28
    5d10:	21 5f       	subi	r18, 0xF1	; 241
    5d12:	3f 4f       	sbci	r19, 0xFF	; 255
    5d14:	84 e0       	ldi	r24, 0x04	; 4
    5d16:	b9 01       	movw	r22, r18
    5d18:	0e 94 0a 08 	call	0x1014	; 0x1014 <SPI_enuTransceive>
    5d1c:	80 e0       	ldi	r24, 0x00	; 0
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	a0 e2       	ldi	r26, 0x20	; 32
    5d22:	b1 e4       	ldi	r27, 0x41	; 65
    5d24:	8b 87       	std	Y+11, r24	; 0x0b
    5d26:	9c 87       	std	Y+12, r25	; 0x0c
    5d28:	ad 87       	std	Y+13, r26	; 0x0d
    5d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	4a ef       	ldi	r20, 0xFA	; 250
    5d3a:	53 e4       	ldi	r21, 0x43	; 67
    5d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d40:	dc 01       	movw	r26, r24
    5d42:	cb 01       	movw	r24, r22
    5d44:	8f 83       	std	Y+7, r24	; 0x07
    5d46:	98 87       	std	Y+8, r25	; 0x08
    5d48:	a9 87       	std	Y+9, r26	; 0x09
    5d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    5d4e:	78 85       	ldd	r23, Y+8	; 0x08
    5d50:	89 85       	ldd	r24, Y+9	; 0x09
    5d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d54:	20 e0       	ldi	r18, 0x00	; 0
    5d56:	30 e0       	ldi	r19, 0x00	; 0
    5d58:	40 e8       	ldi	r20, 0x80	; 128
    5d5a:	5f e3       	ldi	r21, 0x3F	; 63
    5d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d60:	88 23       	and	r24, r24
    5d62:	2c f4       	brge	.+10     	; 0x5d6e <main+0xc4>
		__ticks = 1;
    5d64:	81 e0       	ldi	r24, 0x01	; 1
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	9e 83       	std	Y+6, r25	; 0x06
    5d6a:	8d 83       	std	Y+5, r24	; 0x05
    5d6c:	3f c0       	rjmp	.+126    	; 0x5dec <main+0x142>
	else if (__tmp > 65535)
    5d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5d70:	78 85       	ldd	r23, Y+8	; 0x08
    5d72:	89 85       	ldd	r24, Y+9	; 0x09
    5d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d76:	20 e0       	ldi	r18, 0x00	; 0
    5d78:	3f ef       	ldi	r19, 0xFF	; 255
    5d7a:	4f e7       	ldi	r20, 0x7F	; 127
    5d7c:	57 e4       	ldi	r21, 0x47	; 71
    5d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d82:	18 16       	cp	r1, r24
    5d84:	4c f5       	brge	.+82     	; 0x5dd8 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	40 e2       	ldi	r20, 0x20	; 32
    5d94:	51 e4       	ldi	r21, 0x41	; 65
    5d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	cb 01       	movw	r24, r22
    5d9e:	bc 01       	movw	r22, r24
    5da0:	cd 01       	movw	r24, r26
    5da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5da6:	dc 01       	movw	r26, r24
    5da8:	cb 01       	movw	r24, r22
    5daa:	9e 83       	std	Y+6, r25	; 0x06
    5dac:	8d 83       	std	Y+5, r24	; 0x05
    5dae:	0f c0       	rjmp	.+30     	; 0x5dce <main+0x124>
    5db0:	82 e3       	ldi	r24, 0x32	; 50
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	9c 83       	std	Y+4, r25	; 0x04
    5db6:	8b 83       	std	Y+3, r24	; 0x03
    5db8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dba:	9c 81       	ldd	r25, Y+4	; 0x04
    5dbc:	01 97       	sbiw	r24, 0x01	; 1
    5dbe:	f1 f7       	brne	.-4      	; 0x5dbc <main+0x112>
    5dc0:	9c 83       	std	Y+4, r25	; 0x04
    5dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc8:	01 97       	sbiw	r24, 0x01	; 1
    5dca:	9e 83       	std	Y+6, r25	; 0x06
    5dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dce:	8d 81       	ldd	r24, Y+5	; 0x05
    5dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    5dd2:	00 97       	sbiw	r24, 0x00	; 0
    5dd4:	69 f7       	brne	.-38     	; 0x5db0 <main+0x106>
    5dd6:	96 cf       	rjmp	.-212    	; 0x5d04 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    5dda:	78 85       	ldd	r23, Y+8	; 0x08
    5ddc:	89 85       	ldd	r24, Y+9	; 0x09
    5dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    5de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5de4:	dc 01       	movw	r26, r24
    5de6:	cb 01       	movw	r24, r22
    5de8:	9e 83       	std	Y+6, r25	; 0x06
    5dea:	8d 83       	std	Y+5, r24	; 0x05
    5dec:	8d 81       	ldd	r24, Y+5	; 0x05
    5dee:	9e 81       	ldd	r25, Y+6	; 0x06
    5df0:	9a 83       	std	Y+2, r25	; 0x02
    5df2:	89 83       	std	Y+1, r24	; 0x01
    5df4:	89 81       	ldd	r24, Y+1	; 0x01
    5df6:	9a 81       	ldd	r25, Y+2	; 0x02
    5df8:	01 97       	sbiw	r24, 0x01	; 1
    5dfa:	f1 f7       	brne	.-4      	; 0x5df8 <main+0x14e>
    5dfc:	9a 83       	std	Y+2, r25	; 0x02
    5dfe:	89 83       	std	Y+1, r24	; 0x01
    5e00:	81 cf       	rjmp	.-254    	; 0x5d04 <main+0x5a>

00005e02 <__udivmodhi4>:
    5e02:	aa 1b       	sub	r26, r26
    5e04:	bb 1b       	sub	r27, r27
    5e06:	51 e1       	ldi	r21, 0x11	; 17
    5e08:	07 c0       	rjmp	.+14     	; 0x5e18 <__udivmodhi4_ep>

00005e0a <__udivmodhi4_loop>:
    5e0a:	aa 1f       	adc	r26, r26
    5e0c:	bb 1f       	adc	r27, r27
    5e0e:	a6 17       	cp	r26, r22
    5e10:	b7 07       	cpc	r27, r23
    5e12:	10 f0       	brcs	.+4      	; 0x5e18 <__udivmodhi4_ep>
    5e14:	a6 1b       	sub	r26, r22
    5e16:	b7 0b       	sbc	r27, r23

00005e18 <__udivmodhi4_ep>:
    5e18:	88 1f       	adc	r24, r24
    5e1a:	99 1f       	adc	r25, r25
    5e1c:	5a 95       	dec	r21
    5e1e:	a9 f7       	brne	.-22     	; 0x5e0a <__udivmodhi4_loop>
    5e20:	80 95       	com	r24
    5e22:	90 95       	com	r25
    5e24:	bc 01       	movw	r22, r24
    5e26:	cd 01       	movw	r24, r26
    5e28:	08 95       	ret

00005e2a <__divmodhi4>:
    5e2a:	97 fb       	bst	r25, 7
    5e2c:	09 2e       	mov	r0, r25
    5e2e:	07 26       	eor	r0, r23
    5e30:	0a d0       	rcall	.+20     	; 0x5e46 <__divmodhi4_neg1>
    5e32:	77 fd       	sbrc	r23, 7
    5e34:	04 d0       	rcall	.+8      	; 0x5e3e <__divmodhi4_neg2>
    5e36:	e5 df       	rcall	.-54     	; 0x5e02 <__udivmodhi4>
    5e38:	06 d0       	rcall	.+12     	; 0x5e46 <__divmodhi4_neg1>
    5e3a:	00 20       	and	r0, r0
    5e3c:	1a f4       	brpl	.+6      	; 0x5e44 <__divmodhi4_exit>

00005e3e <__divmodhi4_neg2>:
    5e3e:	70 95       	com	r23
    5e40:	61 95       	neg	r22
    5e42:	7f 4f       	sbci	r23, 0xFF	; 255

00005e44 <__divmodhi4_exit>:
    5e44:	08 95       	ret

00005e46 <__divmodhi4_neg1>:
    5e46:	f6 f7       	brtc	.-4      	; 0x5e44 <__divmodhi4_exit>
    5e48:	90 95       	com	r25
    5e4a:	81 95       	neg	r24
    5e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e4e:	08 95       	ret

00005e50 <__prologue_saves__>:
    5e50:	2f 92       	push	r2
    5e52:	3f 92       	push	r3
    5e54:	4f 92       	push	r4
    5e56:	5f 92       	push	r5
    5e58:	6f 92       	push	r6
    5e5a:	7f 92       	push	r7
    5e5c:	8f 92       	push	r8
    5e5e:	9f 92       	push	r9
    5e60:	af 92       	push	r10
    5e62:	bf 92       	push	r11
    5e64:	cf 92       	push	r12
    5e66:	df 92       	push	r13
    5e68:	ef 92       	push	r14
    5e6a:	ff 92       	push	r15
    5e6c:	0f 93       	push	r16
    5e6e:	1f 93       	push	r17
    5e70:	cf 93       	push	r28
    5e72:	df 93       	push	r29
    5e74:	cd b7       	in	r28, 0x3d	; 61
    5e76:	de b7       	in	r29, 0x3e	; 62
    5e78:	ca 1b       	sub	r28, r26
    5e7a:	db 0b       	sbc	r29, r27
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	09 94       	ijmp

00005e88 <__epilogue_restores__>:
    5e88:	2a 88       	ldd	r2, Y+18	; 0x12
    5e8a:	39 88       	ldd	r3, Y+17	; 0x11
    5e8c:	48 88       	ldd	r4, Y+16	; 0x10
    5e8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e90:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e92:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e94:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e96:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e98:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e9a:	b9 84       	ldd	r11, Y+9	; 0x09
    5e9c:	c8 84       	ldd	r12, Y+8	; 0x08
    5e9e:	df 80       	ldd	r13, Y+7	; 0x07
    5ea0:	ee 80       	ldd	r14, Y+6	; 0x06
    5ea2:	fd 80       	ldd	r15, Y+5	; 0x05
    5ea4:	0c 81       	ldd	r16, Y+4	; 0x04
    5ea6:	1b 81       	ldd	r17, Y+3	; 0x03
    5ea8:	aa 81       	ldd	r26, Y+2	; 0x02
    5eaa:	b9 81       	ldd	r27, Y+1	; 0x01
    5eac:	ce 0f       	add	r28, r30
    5eae:	d1 1d       	adc	r29, r1
    5eb0:	0f b6       	in	r0, 0x3f	; 63
    5eb2:	f8 94       	cli
    5eb4:	de bf       	out	0x3e, r29	; 62
    5eb6:	0f be       	out	0x3f, r0	; 63
    5eb8:	cd bf       	out	0x3d, r28	; 61
    5eba:	ed 01       	movw	r28, r26
    5ebc:	08 95       	ret

00005ebe <_exit>:
    5ebe:	f8 94       	cli

00005ec0 <__stop_program>:
    5ec0:	ff cf       	rjmp	.-2      	; 0x5ec0 <__stop_program>
