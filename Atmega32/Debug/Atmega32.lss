
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  00006476  0000650a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001d4  008001d4  0000667e  2**0
                  ALLOC
  3 .stab         00005bd4  00000000  00000000  00006680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023cd  00000000  00000000  0000c254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000e621  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000e974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00010983  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00011af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00012af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00012c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00012f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_1>
       8:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_2>
       c:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 31 	call	0x6336	; 0x6336 <main>
      8a:	0c 94 39 32 	jmp	0x6472	; 0x6472 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 32 	jmp	0x643c	; 0x643c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 32 	jmp	0x643c	; 0x643c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 32 	jmp	0x6424	; 0x6424 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 0a 32 	jmp	0x6414	; 0x6414 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 26 32 	jmp	0x644c	; 0x644c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <UART_enuInit>:

#include "USART_Private.h"
#include "USART_Config.h"

ES_T UART_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_enuInit+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <UART_enuInit+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     ce2:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8UCSRCval = 0;
     ce4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u8UBRRval = 0;
     ce6:	1a 82       	std	Y+2, r1	; 0x02
     ce8:	19 82       	std	Y+1, r1	; 0x01
#if SPEED_MODE == NORMAL
	UCSRA &=~(CLEAR<<U2X);
     cea:	ab e2       	ldi	r26, 0x2B	; 43
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	eb e2       	ldi	r30, 0x2B	; 43
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8UCSRCval &=~ (CLEAR<<UCSZ0);
	Local_u8UCSRCval |=(SET<<UCSZ1);
	UCSRB &=~(CLEAR<<UCSZ2);
	Local_enuErrorState = ES_OK;
#elif CHARACTER_SIZE == EIGHT
	Local_u8UCSRCval |= (SET<<UCSZ0);
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRCval |= (SET<<UCSZ1);
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &=~(CLEAR<<UCSZ2);
     d08:	aa e2       	ldi	r26, 0x2A	; 42
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e2       	ldi	r30, 0x2A	; 42
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	8c 83       	std	Y+4, r24	; 0x04
#elif UART_MODE == RECIEVER
	UCSRB &=~ (CLEAR<<TXEN);
	UCSRB |= (SET<<RXEN);
	Local_enuErrorState = ES_OK;
#elif UART_MODE == FULL_DOUBLEX
	UCSRB |= (SET<<TXEN);
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	88 60       	ori	r24, 0x08	; 8
     d26:	8c 93       	st	X, r24
	UCSRB |= (SET<<RXEN);
     d28:	aa e2       	ldi	r26, 0x2A	; 42
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e2       	ldi	r30, 0x2A	; 42
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8c 83       	std	Y+4, r24	; 0x04

#if MODE == SYNCRONOUS
	Local_u8UCSRCval |= (SET<<UMSEL);
	Local_enuErrorState = ES_OK;
#elif MODE == ASYNCRONOUS
	Local_u8UCSRCval &=~ (CLEAR<<UMSEL);
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	8f 7b       	andi	r24, 0xBF	; 191
     d3e:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 83       	std	Y+4, r24	; 0x04
#elif PARITY_STATE == ODD_PARITY
	UCSRC |=(SET<<UPM0);
	UCSRC &=~(CLEAR<<UPM1);
	Local_enuErrorState = ES_OK;
#elif PARITY_STATE == DISABLED
	Local_u8UCSRCval &=~(CLEAR<<UPM0);
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	8f 7e       	andi	r24, 0xEF	; 239
     d48:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRCval &=~(CLEAR<<UPM1);
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	8f 7d       	andi	r24, 0xDF	; 223
     d4e:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	8c 83       	std	Y+4, r24	; 0x04
#else
	Local_enuErrorState = ES_NOK;
#endif

#if STOP_STATE == ONE_BIT
	Local_u8UCSRCval &=~(CLEAR<<USBS);
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	87 7f       	andi	r24, 0xF7	; 247
     d58:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8UCSRCval |= (SET<<USBS);
	Local_enuErrorState = ES_OK;
#else
	Local_enuErrorState = ES_NOK;
#endif
	Local_u8UCSRCval |= (SET<<URSEL);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	80 68       	ori	r24, 0x80	; 128
     d62:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRCval;
     d64:	e0 e4       	ldi	r30, 0x40	; 64
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	80 83       	st	Z, r24

	Local_u8UBRRval = BAUD_VALUE(BAUD_RATE);
     d6c:	8c e0       	ldi	r24, 0x0C	; 12
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
	Local_u8UBRRval &= ~(CLEAR<<URSEL_B);
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	9f 77       	andi	r25, 0x7F	; 127
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01

	UBRRL = (u8)Local_u8UBRRval;
     d7e:	e2 e9       	ldi	r30, 0x92	; 146
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	80 83       	st	Z, r24
	UBRRH = (Local_u8UBRRval>>8);
     d86:	e0 e4       	ldi	r30, 0x40	; 64
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	89 2f       	mov	r24, r25
     d90:	99 27       	eor	r25, r25
     d92:	80 83       	st	Z, r24

	return Local_enuErrorState;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <UART_enuSendChar>:

ES_T UART_enuSendChar(u8 Copy_u8Data)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <UART_enuSendChar+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     db0:	19 82       	std	Y+1, r1	; 0x01
	while(!(1&(UCSRA>>UDRE)));
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	82 95       	swap	r24
     dba:	86 95       	lsr	r24
     dbc:	87 70       	andi	r24, 0x07	; 7
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	81 70       	andi	r24, 0x01	; 1
     dc4:	90 70       	andi	r25, 0x00	; 0
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	a1 f3       	breq	.-24     	; 0xdb2 <UART_enuSendChar+0xe>
	UDR = Copy_u8Data;
     dca:	ec e2       	ldi	r30, 0x2C	; 44
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <UART_enuRecieveChar>:

ES_T UART_enuRecieveChar(u8 *Copy_Pu8Data)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <UART_enuRecieveChar+0x6>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     df2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Data != NULL)
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	71 f0       	breq	.+28     	; 0xe18 <UART_enuRecieveChar+0x36>
	{
		while(!(1&(UCSRA>>RXC)));
     dfc:	eb e2       	ldi	r30, 0x2B	; 43
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	dc f7       	brge	.-10     	; 0xdfc <UART_enuRecieveChar+0x1a>
		*Copy_Pu8Data= UDR;
     e06:	ec e2       	ldi	r30, 0x2C	; 44
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	ea 81       	ldd	r30, Y+2	; 0x02
     e0e:	fb 81       	ldd	r31, Y+3	; 0x03
     e10:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <UART_enuRecieveChar+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <UART_enuSendString>:

ES_T UART_enuSendString(const char* Copy_pcData)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <UART_enuSendString+0x6>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9b 83       	std	Y+3, r25	; 0x03
     e38:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     e3a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcData != NULL)
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	9b 81       	ldd	r25, Y+3	; 0x03
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	01 f1       	breq	.+64     	; 0xe84 <UART_enuSendString+0x5a>
	{
		while(!(1&(UCSRA>>UDRE)));
     e44:	eb e2       	ldi	r30, 0x2B	; 43
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	82 95       	swap	r24
     e4c:	86 95       	lsr	r24
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	81 70       	andi	r24, 0x01	; 1
     e56:	90 70       	andi	r25, 0x00	; 0
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	a1 f3       	breq	.-24     	; 0xe44 <UART_enuSendString+0x1a>
     e5c:	0b c0       	rjmp	.+22     	; 0xe74 <UART_enuSendString+0x4a>
		while(*Copy_pcData != '\0')
		{
			UDR = *Copy_pcData;
     e5e:	ac e2       	ldi	r26, 0x2C	; 44
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea 81       	ldd	r30, Y+2	; 0x02
     e64:	fb 81       	ldd	r31, Y+3	; 0x03
     e66:	80 81       	ld	r24, Z
     e68:	8c 93       	st	X, r24
			Copy_pcData++;
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	if(Copy_pcData != NULL)
	{
		while(!(1&(UCSRA>>UDRE)));
		while(*Copy_pcData != '\0')
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	81 f7       	brne	.-32     	; 0xe5e <UART_enuSendString+0x34>
		{
			UDR = *Copy_pcData;
			Copy_pcData++;
		}
		Local_enuErrorState = ES_OK;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <UART_enuRecieveString>:

ES_T UART_enuRecieveString(char *Copy_PcData)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <UART_enuRecieveString+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <UART_enuRecieveString+0x8>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <UART_enuRecieveString+0xa>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
	ES_T Local_enuErrorState = ES_NOK;
     ea8:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Index = 0 , Local_u8Termination=0 , Local_u8Data=0;
     eaa:	1b 82       	std	Y+3, r1	; 0x03
     eac:	1a 82       	std	Y+2, r1	; 0x02
     eae:	19 82       	std	Y+1, r1	; 0x01
	while(!(1&(UCSRA>>RXC)));
     eb0:	eb e2       	ldi	r30, 0x2B	; 43
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	dc f7       	brge	.-10     	; 0xeb0 <UART_enuRecieveString+0x1a>
	Local_u8Termination = UDR;
     eba:	ec e2       	ldi	r30, 0x2C	; 44
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8a 83       	std	Y+2, r24	; 0x02

	while(1)
	{
		while (!((UCSRA>>RXC)&1));
     ec2:	eb e2       	ldi	r30, 0x2B	; 43
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 23       	and	r24, r24
     eca:	dc f7       	brge	.-10     	; 0xec2 <UART_enuRecieveString+0x2c>
		Local_u8Data = UDR;
     ecc:	ec e2       	ldi	r30, 0x2C	; 44
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Data == Local_u8Termination)
     ed4:	99 81       	ldd	r25, Y+1	; 0x01
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	98 17       	cp	r25, r24
     eda:	99 f4       	brne	.+38     	; 0xf02 <UART_enuRecieveString+0x6c>
		{
			Copy_PcData[Local_u8Index] = '\0';
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	fc 01       	movw	r30, r24
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	10 82       	st	Z, r1
		}
		Copy_PcData[Local_u8Index] = Local_u8Data;
		Local_u8Index++;

	}
	return Local_enuErrorState;
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ef0:	26 96       	adiw	r28, 0x06	; 6
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret
		if(Local_u8Data == Local_u8Termination)
		{
			Copy_PcData[Local_u8Index] = '\0';
			break;
		}
		Copy_PcData[Local_u8Index] = Local_u8Data;
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	fc 01       	movw	r30, r24
     f0e:	e2 0f       	add	r30, r18
     f10:	f3 1f       	adc	r31, r19
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
		Local_u8Index++;
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	d2 cf       	rjmp	.-92     	; 0xec2 <UART_enuRecieveString+0x2c>

00000f1e <SPI_enuInitMaster>:
#include "../../LIB/errorState.h"

#include "SPI_Private.h"
#include "SPI_Config.h"
ES_T SPI_enuInitMaster()
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     f28:	19 82       	std	Y+1, r1	; 0x01
	SPCR |= (1<<SPE);
     f2a:	ad e2       	ldi	r26, 0x2D	; 45
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ed e2       	ldi	r30, 0x2D	; 45
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	8c 93       	st	X, r24
	/*Select Master*/
	SPCR |= (1<<MSTR);
     f38:	ad e2       	ldi	r26, 0x2D	; 45
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ed e2       	ldi	r30, 0x2D	; 45
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8c 93       	st	X, r24

	SPCR &= ~(1<<SPR0);
     f46:	ad e2       	ldi	r26, 0x2D	; 45
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ed e2       	ldi	r30, 0x2D	; 45
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	8c 93       	st	X, r24
	SPCR &= ~(1<<SPR1);
     f54:	ad e2       	ldi	r26, 0x2D	; 45
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ed e2       	ldi	r30, 0x2D	; 45
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	8c 93       	st	X, r24

#if DATA_ORDER == MSB_FIRST
	SPCR &=~(1<<DORD);
     f62:	ad e2       	ldi	r26, 0x2D	; 45
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ed e2       	ldi	r30, 0x2D	; 45
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
#else
	Local_enuErrorState = ES_NOK;
#endif

#if SPI_MODE == 0
	SPCR &=~(1<<CPOL);
     f74:	ad e2       	ldi	r26, 0x2D	; 45
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ed e2       	ldi	r30, 0x2D	; 45
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	8c 93       	st	X, r24
	SPCR &=~(1<<CPHA);
     f82:	ad e2       	ldi	r26, 0x2D	; 45
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ed e2       	ldi	r30, 0x2D	; 45
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Double Speed*/
	SPSR |= (1<<SPI2X);
	Local_enuErrorState = ES_OK;
#elif DOUBLE_SPEED == DISABLE
	/*Disable Double Speed*/
	SPCR &=~ (1<<SPI2X);
     f94:	ad e2       	ldi	r26, 0x2D	; 45
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ed e2       	ldi	r30, 0x2D	; 45
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8e 7f       	andi	r24, 0xFE	; 254
     fa0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
#else
	Local_enuErrorState = ES_NOK;
#endif

	return Local_enuErrorState;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <SPI_enuInitSlave>:

ES_T SPI_enuInitSlave()
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     fba:	19 82       	std	Y+1, r1	; 0x01
	/*Enable SPI*/
	SPCR |= (1<<SPE);
     fbc:	ad e2       	ldi	r26, 0x2D	; 45
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ed e2       	ldi	r30, 0x2D	; 45
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24
	/*Select Slave Mode*/
	SPCR &=~(1<<MSTR);
     fca:	ad e2       	ldi	r26, 0x2D	; 45
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ed e2       	ldi	r30, 0x2D	; 45
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	8c 93       	st	X, r24
#if DATA_ORDER == MSB_FIRST
	/*Send MSB bit first*/
	SPCR &=~(1<<DORD);
     fd8:	ad e2       	ldi	r26, 0x2D	; 45
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ed e2       	ldi	r30, 0x2D	; 45
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = ES_NOK;
#endif

#if SPI_MODE == 0
	/*Read on rising edge, write on falling edge    -->Leading = rising*/
	SPCR &=~(1<<CPOL);
     fea:	ad e2       	ldi	r26, 0x2D	; 45
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ed e2       	ldi	r30, 0x2D	; 45
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	8c 93       	st	X, r24
	SPCR &=~(1<<CPHA);
     ff8:	ad e2       	ldi	r26, 0x2D	; 45
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ed e2       	ldi	r30, 0x2D	; 45
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8b 7f       	andi	r24, 0xFB	; 251
    1004:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	SPCR |= (1<<CPHA);
	Local_enuErrorState = ES_OK;
#else
	Local_enuErrorState = ES_NOK;
#endif
	return Local_enuErrorState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <SPI_enuTransceive>:

ES_T SPI_enuTransceive(u8 Copy_u8Data , u8 *Copy_Pu8ExchangedData)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <SPI_enuTransceive+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <SPI_enuTransceive+0x8>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	7c 83       	std	Y+4, r23	; 0x04
    1024:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1026:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Copy_u8Data;
    1028:	ef e2       	ldi	r30, 0x2F	; 47
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	80 83       	st	Z, r24
		/*polling --> Wait Transfer Complete*/
		while(!(1&(SPSR>>SPIF)));
    1030:	ee e2       	ldi	r30, 0x2E	; 46
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <SPI_enuTransceive+0x1c>
		/*Read Data After Exchange*/
		*Copy_Pu8ExchangedData = SPDR;
    103a:	ef e2       	ldi	r30, 0x2F	; 47
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	eb 81       	ldd	r30, Y+3	; 0x03
    1042:	fc 81       	ldd	r31, Y+4	; 0x04
    1044:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    104a:	89 81       	ldd	r24, Y+1	; 0x01
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <GIE_enuInit>:
#include "../../LIB/errorState.h"

#include"GIE_Private.h"

void GIE_enuInit(void)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	SREG |= (BIT_MASKING << BIT_7);
    1062:	af e5       	ldi	r26, 0x5F	; 95
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ef e5       	ldi	r30, 0x5F	; 95
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	80 68       	ori	r24, 0x80	; 128
    106e:	8c 93       	st	X, r24
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <GIE_enuEnable>:

void GIE_enuEnable(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	SREG |= (BIT_MASKING << BIT_7);
    107e:	af e5       	ldi	r26, 0x5F	; 95
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ef e5       	ldi	r30, 0x5F	; 95
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 68       	ori	r24, 0x80	; 128
    108a:	8c 93       	st	X, r24

}
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <GIE_enuDisable>:

void GIE_enuDisable(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	SREG &=~(BIT_MASKING << BIT_7);
    109a:	af e5       	ldi	r26, 0x5F	; 95
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e5       	ldi	r30, 0x5F	; 95
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 77       	andi	r24, 0x7F	; 127
    10a6:	8c 93       	st	X, r24

}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <EXTI_enuInit>:
#include "../Interrupt.h"

static volatile  void (*EXTI_ApfunINTFun[3])(void) = {NULL,NULL,NULL};

ES_T EXTI_enuInit(EXTI_T * Copy_PstrEXTIconfig)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	2c 97       	sbiw	r28, 0x0c	; 12
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    10c6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator = INITIAL_ZERO;
    10c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PstrEXTIconfig != NULL)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <EXTI_enuInit+0x26>
    10d2:	24 c1       	rjmp	.+584    	; 0x131c <EXTI_enuInit+0x26e>
	{
		for(Local_u8Iterator = INITIAL_ZERO ; Local_u8Iterator < MAX_INT_ID ;Local_u8Iterator++)
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	1d c1       	rjmp	.+570    	; 0x1312 <EXTI_enuInit+0x264>
		{
			if(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8Istate == INT_ACTIVE)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9c 01       	movw	r18, r24
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	80 81       	ld	r24, Z
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <EXTI_enuInit+0x48>
    10f4:	0b c1       	rjmp	.+534    	; 0x130c <EXTI_enuInit+0x25e>
			{
				switch(Local_u8Iterator)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3c 87       	std	Y+12, r19	; 0x0c
    10fe:	2b 87       	std	Y+11, r18	; 0x0b
    1100:	8b 85       	ldd	r24, Y+11	; 0x0b
    1102:	9c 85       	ldd	r25, Y+12	; 0x0c
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <EXTI_enuInit+0x5e>
    110a:	68 c0       	rjmp	.+208    	; 0x11dc <EXTI_enuInit+0x12e>
    110c:	2b 85       	ldd	r18, Y+11	; 0x0b
    110e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <EXTI_enuInit+0x6a>
    1116:	bf c0       	rjmp	.+382    	; 0x1296 <EXTI_enuInit+0x1e8>
    1118:	8b 85       	ldd	r24, Y+11	; 0x0b
    111a:	9c 85       	ldd	r25, Y+12	; 0x0c
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	09 f0       	breq	.+2      	; 0x1122 <EXTI_enuInit+0x74>
    1120:	f3 c0       	rjmp	.+486    	; 0x1308 <EXTI_enuInit+0x25a>
				{
				case INT_0:
					GICR |= (BIT_MASKING << GICR_BIT6);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 64       	ori	r24, 0x40	; 64
    112e:	8c 93       	st	X, r24
					MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_0);
    1130:	a5 e5       	ldi	r26, 0x55	; 85
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e5       	ldi	r30, 0x55	; 85
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8c 7f       	andi	r24, 0xFC	; 252
    113c:	8c 93       	st	X, r24
					switch(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8SenceControl)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 01       	movw	r18, r24
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	81 81       	ldd	r24, Z+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3a 87       	std	Y+10, r19	; 0x0a
    115c:	29 87       	std	Y+9, r18	; 0x09
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	91 05       	cpc	r25, r1
    1166:	51 f1       	breq	.+84     	; 0x11bc <EXTI_enuInit+0x10e>
    1168:	29 85       	ldd	r18, Y+9	; 0x09
    116a:	3a 85       	ldd	r19, Y+10	; 0x0a
    116c:	23 30       	cpi	r18, 0x03	; 3
    116e:	31 05       	cpc	r19, r1
    1170:	34 f4       	brge	.+12     	; 0x117e <EXTI_enuInit+0xd0>
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	51 f1       	breq	.+84     	; 0x11d0 <EXTI_enuInit+0x122>
    117c:	2c c0       	rjmp	.+88     	; 0x11d6 <EXTI_enuInit+0x128>
    117e:	29 85       	ldd	r18, Y+9	; 0x09
    1180:	3a 85       	ldd	r19, Y+10	; 0x0a
    1182:	23 30       	cpi	r18, 0x03	; 3
    1184:	31 05       	cpc	r19, r1
    1186:	31 f0       	breq	.+12     	; 0x1194 <EXTI_enuInit+0xe6>
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	91 05       	cpc	r25, r1
    1190:	59 f0       	breq	.+22     	; 0x11a8 <EXTI_enuInit+0xfa>
    1192:	21 c0       	rjmp	.+66     	; 0x11d6 <EXTI_enuInit+0x128>
					{
					case FALLING_EDGE:
						MCUCR |= ( INT0_SET_FALLING<< BIT_0);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	b2 c0       	rjmp	.+356    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					case RISING_EDGE:
						MCUCR |= ( INT0_SET_RISING<< BIT_0);
    11a8:	a5 e5       	ldi	r26, 0x55	; 85
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e5       	ldi	r30, 0x55	; 85
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	83 60       	ori	r24, 0x03	; 3
    11b4:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	a8 c0       	rjmp	.+336    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					case ON_CHANGE:
						MCUCR |= ( INT0_SET_ON_CHANGE<< BIT_0);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	9e c0       	rjmp	.+316    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	9b c0       	rjmp	.+310    	; 0x130c <EXTI_enuInit+0x25e>
						break;
					default:
						Local_enuErrorState = ES_OUTOFRANGE;
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	98 c0       	rjmp	.+304    	; 0x130c <EXTI_enuInit+0x25e>
					}

					break;
					case INT_1:
						GICR |= (BIT_MASKING << GICR_BIT7);
    11dc:	ab e5       	ldi	r26, 0x5B	; 91
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	eb e5       	ldi	r30, 0x5B	; 91
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	8c 93       	st	X, r24
						MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_2);
    11ea:	a5 e5       	ldi	r26, 0x55	; 85
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e5 e5       	ldi	r30, 0x55	; 85
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	83 7f       	andi	r24, 0xF3	; 243
    11f6:	8c 93       	st	X, r24
						switch(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8SenceControl)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c 01       	movw	r18, r24
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	38 87       	std	Y+8, r19	; 0x08
    1216:	2f 83       	std	Y+7, r18	; 0x07
    1218:	8f 81       	ldd	r24, Y+7	; 0x07
    121a:	98 85       	ldd	r25, Y+8	; 0x08
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	51 f1       	breq	.+84     	; 0x1276 <EXTI_enuInit+0x1c8>
    1222:	2f 81       	ldd	r18, Y+7	; 0x07
    1224:	38 85       	ldd	r19, Y+8	; 0x08
    1226:	23 30       	cpi	r18, 0x03	; 3
    1228:	31 05       	cpc	r19, r1
    122a:	34 f4       	brge	.+12     	; 0x1238 <EXTI_enuInit+0x18a>
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	51 f1       	breq	.+84     	; 0x128a <EXTI_enuInit+0x1dc>
    1236:	2c c0       	rjmp	.+88     	; 0x1290 <EXTI_enuInit+0x1e2>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	23 30       	cpi	r18, 0x03	; 3
    123e:	31 05       	cpc	r19, r1
    1240:	31 f0       	breq	.+12     	; 0x124e <EXTI_enuInit+0x1a0>
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	91 05       	cpc	r25, r1
    124a:	59 f0       	breq	.+22     	; 0x1262 <EXTI_enuInit+0x1b4>
    124c:	21 c0       	rjmp	.+66     	; 0x1290 <EXTI_enuInit+0x1e2>
						{
						case FALLING_EDGE:
							MCUCR |= ( INT1_SET_FALLING<< BIT_2);
    124e:	a5 e5       	ldi	r26, 0x55	; 85
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e5       	ldi	r30, 0x55	; 85
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 60       	ori	r24, 0x08	; 8
    125a:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	8a 83       	std	Y+2, r24	; 0x02
    1260:	55 c0       	rjmp	.+170    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						case RISING_EDGE:
							MCUCR |= ( INT1_SET_RISING<< BIT_2);
    1262:	a5 e5       	ldi	r26, 0x55	; 85
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e5       	ldi	r30, 0x55	; 85
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8c 60       	ori	r24, 0x0C	; 12
    126e:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	8a 83       	std	Y+2, r24	; 0x02
    1274:	4b c0       	rjmp	.+150    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						case ON_CHANGE:
							MCUCR |= ( INT1_SET_ON_CHANGE<< BIT_2);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	41 c0       	rjmp	.+130    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						case LOW_LEVEL:
							Local_enuErrorState = ES_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	3e c0       	rjmp	.+124    	; 0x130c <EXTI_enuInit+0x25e>
							break;
						default:
							Local_enuErrorState = ES_OUTOFRANGE;
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	3b c0       	rjmp	.+118    	; 0x130c <EXTI_enuInit+0x25e>
						}
						break;
						case INT_2:

							GICR |= (BIT_MASKING << GICR_BIT5);
    1296:	ab e5       	ldi	r26, 0x5B	; 91
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	eb e5       	ldi	r30, 0x5B	; 91
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	8c 93       	st	X, r24
							switch(Copy_PstrEXTIconfig[Local_u8Iterator].EXTI_u8SenceControl)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9c 01       	movw	r18, r24
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	fc 01       	movw	r30, r24
    12b6:	e2 0f       	add	r30, r18
    12b8:	f3 1f       	adc	r31, r19
    12ba:	81 81       	ldd	r24, Z+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3e 83       	std	Y+6, r19	; 0x06
    12c2:	2d 83       	std	Y+5, r18	; 0x05
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	31 f0       	breq	.+12     	; 0x12da <EXTI_enuInit+0x22c>
    12ce:	2d 81       	ldd	r18, Y+5	; 0x05
    12d0:	3e 81       	ldd	r19, Y+6	; 0x06
    12d2:	24 30       	cpi	r18, 0x04	; 4
    12d4:	31 05       	cpc	r19, r1
    12d6:	59 f0       	breq	.+22     	; 0x12ee <EXTI_enuInit+0x240>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <EXTI_enuInit+0x254>
							{
							case FALLING_EDGE:
								MCUCSR &=~( BIT_MASKING<< BIT_6);
    12da:	a4 e5       	ldi	r26, 0x54	; 84
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e4 e5       	ldi	r30, 0x54	; 84
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
								Local_enuErrorState = ES_OK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	0f c0       	rjmp	.+30     	; 0x130c <EXTI_enuInit+0x25e>
								break;
							case RISING_EDGE:
								MCUCSR |= ( INT2_SET_RISING<< BIT_6);
    12ee:	a4 e5       	ldi	r26, 0x54	; 84
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e4 e5       	ldi	r30, 0x54	; 84
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 64       	ori	r24, 0x40	; 64
    12fa:	8c 93       	st	X, r24
								Local_enuErrorState = ES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	05 c0       	rjmp	.+10     	; 0x130c <EXTI_enuInit+0x25e>
								break;
							default:
								Local_enuErrorState = ES_OUTOFRANGE;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	02 c0       	rjmp	.+4      	; 0x130c <EXTI_enuInit+0x25e>
							}
							break;
							default:
								Local_enuErrorState = ES_OUTOFRANGE;
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	u8 Local_u8Iterator = INITIAL_ZERO;
	if(Copy_PstrEXTIconfig != NULL)
	{
		for(Local_u8Iterator = INITIAL_ZERO ; Local_u8Iterator < MAX_INT_ID ;Local_u8Iterator++)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	08 f4       	brcc	.+2      	; 0x131a <EXTI_enuInit+0x26c>
    1318:	df ce       	rjmp	.-578    	; 0x10d8 <EXTI_enuInit+0x2a>
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <EXTI_enuInit+0x272>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return  Local_enuErrorState;
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1322:	2c 96       	adiw	r28, 0x0c	; 12
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <EXTI_enuSetSenceControl>:

ES_T EXTI_enuSetSenceControl(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceControl)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2b 97       	sbiw	r28, 0x0b	; 11
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    134c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXTI_ID < MAX_INT_ID)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	08 f0       	brcs	.+2      	; 0x1356 <EXTI_enuSetSenceControl+0x22>
    1354:	d6 c0       	rjmp	.+428    	; 0x1502 <EXTI_enuSetSenceControl+0x1ce>
	{
		switch(Copy_u8EXTI_ID)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3b 87       	std	Y+11, r19	; 0x0b
    135e:	2a 87       	std	Y+10, r18	; 0x0a
    1360:	8a 85       	ldd	r24, Y+10	; 0x0a
    1362:	9b 85       	ldd	r25, Y+11	; 0x0b
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <EXTI_enuSetSenceControl+0x38>
    136a:	56 c0       	rjmp	.+172    	; 0x1418 <EXTI_enuSetSenceControl+0xe4>
    136c:	2a 85       	ldd	r18, Y+10	; 0x0a
    136e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <EXTI_enuSetSenceControl+0x44>
    1376:	9b c0       	rjmp	.+310    	; 0x14ae <EXTI_enuSetSenceControl+0x17a>
    1378:	8a 85       	ldd	r24, Y+10	; 0x0a
    137a:	9b 85       	ldd	r25, Y+11	; 0x0b
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	09 f0       	breq	.+2      	; 0x1382 <EXTI_enuSetSenceControl+0x4e>
    1380:	bd c0       	rjmp	.+378    	; 0x14fc <EXTI_enuSetSenceControl+0x1c8>
		{
		case INT_0:
			MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_0);
    1382:	a5 e5       	ldi	r26, 0x55	; 85
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e5       	ldi	r30, 0x55	; 85
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8c 7f       	andi	r24, 0xFC	; 252
    138e:	8c 93       	st	X, r24
			switch(Copy_u8SenceControl)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	39 87       	std	Y+9, r19	; 0x09
    1398:	28 87       	std	Y+8, r18	; 0x08
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	99 85       	ldd	r25, Y+9	; 0x09
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	91 05       	cpc	r25, r1
    13a2:	51 f1       	breq	.+84     	; 0x13f8 <EXTI_enuSetSenceControl+0xc4>
    13a4:	28 85       	ldd	r18, Y+8	; 0x08
    13a6:	39 85       	ldd	r19, Y+9	; 0x09
    13a8:	23 30       	cpi	r18, 0x03	; 3
    13aa:	31 05       	cpc	r19, r1
    13ac:	34 f4       	brge	.+12     	; 0x13ba <EXTI_enuSetSenceControl+0x86>
    13ae:	88 85       	ldd	r24, Y+8	; 0x08
    13b0:	99 85       	ldd	r25, Y+9	; 0x09
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	51 f1       	breq	.+84     	; 0x140c <EXTI_enuSetSenceControl+0xd8>
    13b8:	2c c0       	rjmp	.+88     	; 0x1412 <EXTI_enuSetSenceControl+0xde>
    13ba:	28 85       	ldd	r18, Y+8	; 0x08
    13bc:	39 85       	ldd	r19, Y+9	; 0x09
    13be:	23 30       	cpi	r18, 0x03	; 3
    13c0:	31 05       	cpc	r19, r1
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <EXTI_enuSetSenceControl+0x9c>
    13c4:	88 85       	ldd	r24, Y+8	; 0x08
    13c6:	99 85       	ldd	r25, Y+9	; 0x09
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	91 05       	cpc	r25, r1
    13cc:	59 f0       	breq	.+22     	; 0x13e4 <EXTI_enuSetSenceControl+0xb0>
    13ce:	21 c0       	rjmp	.+66     	; 0x1412 <EXTI_enuSetSenceControl+0xde>
			{
			case FALLING_EDGE:
				MCUCR |= ( INT0_SET_FALLING<< BIT_0);
    13d0:	a5 e5       	ldi	r26, 0x55	; 85
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e5       	ldi	r30, 0x55	; 85
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	82 60       	ori	r24, 0x02	; 2
    13dc:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	91 c0       	rjmp	.+290    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			case RISING_EDGE:
				MCUCR |= ( INT0_SET_RISING<< BIT_0);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	83 60       	ori	r24, 0x03	; 3
    13f0:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	87 c0       	rjmp	.+270    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			case ON_CHANGE:
				MCUCR |= ( INT0_SET_ON_CHANGE<< BIT_0);
    13f8:	a5 e5       	ldi	r26, 0x55	; 85
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e5       	ldi	r30, 0x55	; 85
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	7d c0       	rjmp	.+250    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	7a c0       	rjmp	.+244    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				break;
			default:
				Local_enuErrorState = ES_OUTOFRANGE;
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	77 c0       	rjmp	.+238    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
			}
			break;
			case INT_1:
				MCUCR &= ~ (CLEAR_TWO_BIT<<BIT_2);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	83 7f       	andi	r24, 0xF3	; 243
    1424:	8c 93       	st	X, r24
				switch(Copy_u8SenceControl)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3f 83       	std	Y+7, r19	; 0x07
    142e:	2e 83       	std	Y+6, r18	; 0x06
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	91 05       	cpc	r25, r1
    1438:	51 f1       	breq	.+84     	; 0x148e <EXTI_enuSetSenceControl+0x15a>
    143a:	2e 81       	ldd	r18, Y+6	; 0x06
    143c:	3f 81       	ldd	r19, Y+7	; 0x07
    143e:	23 30       	cpi	r18, 0x03	; 3
    1440:	31 05       	cpc	r19, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <EXTI_enuSetSenceControl+0x11c>
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	51 f1       	breq	.+84     	; 0x14a2 <EXTI_enuSetSenceControl+0x16e>
    144e:	2c c0       	rjmp	.+88     	; 0x14a8 <EXTI_enuSetSenceControl+0x174>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	23 30       	cpi	r18, 0x03	; 3
    1456:	31 05       	cpc	r19, r1
    1458:	31 f0       	breq	.+12     	; 0x1466 <EXTI_enuSetSenceControl+0x132>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	84 30       	cpi	r24, 0x04	; 4
    1460:	91 05       	cpc	r25, r1
    1462:	59 f0       	breq	.+22     	; 0x147a <EXTI_enuSetSenceControl+0x146>
    1464:	21 c0       	rjmp	.+66     	; 0x14a8 <EXTI_enuSetSenceControl+0x174>
				{
				case FALLING_EDGE:
					MCUCR |= ( INT1_SET_FALLING<< BIT_2);
    1466:	a5 e5       	ldi	r26, 0x55	; 85
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e5       	ldi	r30, 0x55	; 85
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 60       	ori	r24, 0x08	; 8
    1472:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	46 c0       	rjmp	.+140    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				case RISING_EDGE:
					MCUCR |= ( INT1_SET_RISING<< BIT_2);
    147a:	a5 e5       	ldi	r26, 0x55	; 85
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e5       	ldi	r30, 0x55	; 85
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8c 60       	ori	r24, 0x0C	; 12
    1486:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	3c c0       	rjmp	.+120    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				case ON_CHANGE:
					MCUCR |= ( INT1_SET_ON_CHANGE<< BIT_2);
    148e:	a5 e5       	ldi	r26, 0x55	; 85
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e5       	ldi	r30, 0x55	; 85
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	84 60       	ori	r24, 0x04	; 4
    149a:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	32 c0       	rjmp	.+100    	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				case LOW_LEVEL:
					Local_enuErrorState = ES_OK;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	2f c0       	rjmp	.+94     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					break;
				default:
					Local_enuErrorState = ES_OUTOFRANGE;
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	2c c0       	rjmp	.+88     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
				}
				break;
				case INT_2:
					switch(Copy_u8SenceControl)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3d 83       	std	Y+5, r19	; 0x05
    14b6:	2c 83       	std	Y+4, r18	; 0x04
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	31 f0       	breq	.+12     	; 0x14ce <EXTI_enuSetSenceControl+0x19a>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	24 30       	cpi	r18, 0x04	; 4
    14c8:	31 05       	cpc	r19, r1
    14ca:	59 f0       	breq	.+22     	; 0x14e2 <EXTI_enuSetSenceControl+0x1ae>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <EXTI_enuSetSenceControl+0x1c2>
					{
					case FALLING_EDGE:
						MCUCSR &=~( BIT_MASKING<< BIT_6);
    14ce:	a4 e5       	ldi	r26, 0x54	; 84
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e5       	ldi	r30, 0x54	; 84
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7b       	andi	r24, 0xBF	; 191
    14da:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	12 c0       	rjmp	.+36     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
						break;
					case RISING_EDGE:
						MCUCSR |= ( INT2_SET_RISING<< BIT_6);
    14e2:	a4 e5       	ldi	r26, 0x54	; 84
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e5       	ldi	r30, 0x54	; 84
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 64       	ori	r24, 0x40	; 64
    14ee:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
						break;
					default:
						Local_enuErrorState = ES_OUTOFRANGE;
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>
					}
					break;
					default:
						Local_enuErrorState = ES_OUTOFRANGE;
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <EXTI_enuSetSenceControl+0x1d2>

	}

	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	2b 96       	adiw	r28, 0x0b	; 11
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <EXTI_enuEnableINT>:

ES_T EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <EXTI_enuEnableINT+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <EXTI_enuEnableINT+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXTI_ID < MAX_INT_ID)
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	a0 f5       	brcc	.+104    	; 0x1598 <EXTI_enuEnableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	99 f0       	breq	.+38     	; 0x156a <EXTI_enuEnableINT+0x50>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	c1 f0       	breq	.+48     	; 0x157e <EXTI_enuEnableINT+0x64>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	f1 f4       	brne	.+60     	; 0x1592 <EXTI_enuEnableINT+0x78>
		{
		case INT_0:
			GICR |= (BIT_MASKING << GICR_BIT6);
    1556:	ab e5       	ldi	r26, 0x5B	; 91
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e5       	ldi	r30, 0x5B	; 91
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	19 c0       	rjmp	.+50     	; 0x159c <EXTI_enuEnableINT+0x82>
			break;
		case INT_1:
			GICR |= (BIT_MASKING << GICR_BIT7);
    156a:	ab e5       	ldi	r26, 0x5B	; 91
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb e5       	ldi	r30, 0x5B	; 91
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	0f c0       	rjmp	.+30     	; 0x159c <EXTI_enuEnableINT+0x82>
			break;
		case INT_2:
			GICR |= (BIT_MASKING << GICR_BIT5);
    157e:	ab e5       	ldi	r26, 0x5B	; 91
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e5       	ldi	r30, 0x5B	; 91
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 62       	ori	r24, 0x20	; 32
    158a:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	05 c0       	rjmp	.+10     	; 0x159c <EXTI_enuEnableINT+0x82>
			break;
		default:
			Local_enuErrorState = ES_OUTOFRANGE;
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	02 c0       	rjmp	.+4      	; 0x159c <EXTI_enuEnableINT+0x82>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <EXTI_enuDisableINT>:

ES_T EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <EXTI_enuDisableINT+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <EXTI_enuDisableINT+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXTI_ID < MAX_INT_ID)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	a0 f5       	brcc	.+104    	; 0x162a <EXTI_enuDisableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	99 f0       	breq	.+38     	; 0x15fc <EXTI_enuDisableINT+0x50>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <EXTI_enuDisableINT+0x64>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	f1 f4       	brne	.+60     	; 0x1624 <EXTI_enuDisableINT+0x78>
		{
		case INT_0:
			GICR &=~ (BIT_MASKING << GICR_BIT6);
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	19 c0       	rjmp	.+50     	; 0x162e <EXTI_enuDisableINT+0x82>
			break;
		case INT_1:
			GICR &=~ (BIT_MASKING << GICR_BIT7);
    15fc:	ab e5       	ldi	r26, 0x5B	; 91
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e5       	ldi	r30, 0x5B	; 91
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8f 77       	andi	r24, 0x7F	; 127
    1608:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0f c0       	rjmp	.+30     	; 0x162e <EXTI_enuDisableINT+0x82>
			break;
		case INT_2:
			GICR &=~ (BIT_MASKING << GICR_BIT5);
    1610:	ab e5       	ldi	r26, 0x5B	; 91
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e5       	ldi	r30, 0x5B	; 91
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7d       	andi	r24, 0xDF	; 223
    161c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	05 c0       	rjmp	.+10     	; 0x162e <EXTI_enuDisableINT+0x82>
			break;
		default:
			Local_enuErrorState = ES_OUTOFRANGE;
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	02 c0       	rjmp	.+4      	; 0x162e <EXTI_enuDisableINT+0x82>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <EXTI_enuCallBack>:
ES_T EXTI_enuCallBack(volatile void(*Copy_Pfun)(void) , u8 Copy_u8EXTI_ID)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <EXTI_enuCallBack+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <EXTI_enuCallBack+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	9b 83       	std	Y+3, r25	; 0x03
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1650:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pfun != NULL)
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	a9 f0       	breq	.+42     	; 0x1684 <EXTI_enuCallBack+0x46>
	{
		if(Copy_u8EXTI_ID < MAX_INT_ID)
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	78 f4       	brcc	.+30     	; 0x167e <EXTI_enuCallBack+0x40>
		{
			EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_Pfun;
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	fc 01       	movw	r30, r24
    166c:	ec 52       	subi	r30, 0x2C	; 44
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <EXTI_enuCallBack+0x4a>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <EXTI_enuCallBack+0x4a>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <__vector_1>:
ISR(VECTOR_INT0)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    16c2:	80 91 d4 01 	lds	r24, 0x01D4
    16c6:	90 91 d5 01 	lds	r25, 0x01D5
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <__vector_1+0x40>
	{
		EXTI_ApfunINTFun[0] ();
    16ce:	e0 91 d4 01 	lds	r30, 0x01D4
    16d2:	f0 91 d5 01 	lds	r31, 0x01D5
    16d6:	09 95       	icall
	}
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_2>:
ISR(VECTOR_INT1)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    1728:	80 91 d6 01 	lds	r24, 0x01D6
    172c:	90 91 d7 01 	lds	r25, 0x01D7
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	29 f0       	breq	.+10     	; 0x173e <__vector_2+0x40>
	{
		EXTI_ApfunINTFun[1] ();
    1734:	e0 91 d6 01 	lds	r30, 0x01D6
    1738:	f0 91 d7 01 	lds	r31, 0x01D7
    173c:	09 95       	icall
	}
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <__vector_3>:
ISR(VECTOR_INT2)
{
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	2f 93       	push	r18
    1770:	3f 93       	push	r19
    1772:	4f 93       	push	r20
    1774:	5f 93       	push	r21
    1776:	6f 93       	push	r22
    1778:	7f 93       	push	r23
    177a:	8f 93       	push	r24
    177c:	9f 93       	push	r25
    177e:	af 93       	push	r26
    1780:	bf 93       	push	r27
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    178e:	80 91 d8 01 	lds	r24, 0x01D8
    1792:	90 91 d9 01 	lds	r25, 0x01D9
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	29 f0       	breq	.+10     	; 0x17a4 <__vector_3+0x40>
	{
		EXTI_ApfunINTFun[2] ();
    179a:	e0 91 d8 01 	lds	r30, 0x01D8
    179e:	f0 91 d9 01 	lds	r31, 0x01D9
    17a2:	09 95       	icall
	}
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <DIO_enuInit>:

#include "DIO_config.h"
#include "DIO_private.h"

ES_T DIO_enuInit(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    17d4:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(DIO_U8PA_PIN7_DIR,DIO_U8PA_PIN6_DIR,DIO_U8PA_PIN5_DIR,DIO_U8PA_PIN4_DIR,DIO_U8PA_PIN3_DIR,DIO_U8PA_PIN2_DIR,DIO_U8PA_PIN1_DIR,DIO_U8PA_PIN0_DIR);
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	80 83       	st	Z, r24
	DDRB = CONC(DIO_U8PB_PIN7_DIR,DIO_U8PB_PIN6_DIR,DIO_U8PB_PIN5_DIR,DIO_U8PB_PIN4_DIR,DIO_U8PB_PIN3_DIR,DIO_U8PB_PIN2_DIR,DIO_U8PB_PIN1_DIR,DIO_U8PB_PIN0_DIR);
    17de:	e7 e3       	ldi	r30, 0x37	; 55
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	80 83       	st	Z, r24
	DDRC = CONC(DIO_U8PC_PIN7_DIR,DIO_U8PC_PIN6_DIR,DIO_U8PC_PIN5_DIR,DIO_U8PC_PIN4_DIR,DIO_U8PC_PIN3_DIR,DIO_U8PC_PIN2_DIR,DIO_U8PC_PIN1_DIR,DIO_U8PC_PIN0_DIR);
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	80 83       	st	Z, r24
	DDRD = CONC(DIO_U8PD_PIN7_DIR,DIO_U8PD_PIN6_DIR,DIO_U8PD_PIN5_DIR,DIO_U8PD_PIN4_DIR,DIO_U8PD_PIN3_DIR,DIO_U8PD_PIN2_DIR,DIO_U8PD_PIN1_DIR,DIO_U8PD_PIN0_DIR);
    17ee:	e1 e3       	ldi	r30, 0x31	; 49
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	80 83       	st	Z, r24

	PORTA = CONC(DIO_U8PA_PIN7_VAL,DIO_U8PA_PIN6_VAL,DIO_U8PA_PIN5_VAL,DIO_U8PA_PIN4_VAL,DIO_U8PA_PIN3_VAL,DIO_U8PA_PIN2_VAL,DIO_U8PA_PIN1_VAL,DIO_U8PA_PIN0_VAL);
    17f6:	eb e3       	ldi	r30, 0x3B	; 59
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	10 82       	st	Z, r1
	PORTB = CONC(DIO_U8PB_PIN7_VAL,DIO_U8PB_PIN6_VAL,DIO_U8PB_PIN5_VAL,DIO_U8PB_PIN4_VAL,DIO_U8PB_PIN3_VAL,DIO_U8PB_PIN2_VAL,DIO_U8PB_PIN1_VAL,DIO_U8PB_PIN0_VAL);
    17fc:	e8 e3       	ldi	r30, 0x38	; 56
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	10 82       	st	Z, r1
	PORTC = CONC(DIO_U8PC_PIN7_VAL,DIO_U8PC_PIN6_VAL,DIO_U8PC_PIN5_VAL,DIO_U8PC_PIN4_VAL,DIO_U8PC_PIN3_VAL,DIO_U8PC_PIN2_VAL,DIO_U8PC_PIN1_VAL,DIO_U8PC_PIN0_VAL);
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	10 82       	st	Z, r1
	PORTD = CONC(DIO_U8PD_PIN7_VAL,DIO_U8PD_PIN6_VAL,DIO_U8PD_PIN5_VAL,DIO_U8PD_PIN4_VAL,DIO_U8PD_PIN3_VAL,DIO_U8PD_PIN2_VAL,DIO_U8PD_PIN1_VAL,DIO_U8PD_PIN0_VAL);
    1808:	e2 e3       	ldi	r30, 0x32	; 50
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <DIO_enuSetPortDirection>:
ES_T DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <DIO_enuSetPortDirection+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <DIO_enuSetPortDirection+0x8>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	8a 83       	std	Y+2, r24	; 0x02
    182c:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    182e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	a8 f5       	brcc	.+106    	; 0x18a0 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3d 83       	std	Y+5, r19	; 0x05
    183e:	2c 83       	std	Y+4, r18	; 0x04
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	d1 f0       	breq	.+52     	; 0x187e <DIO_enuSetPortDirection+0x62>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <DIO_enuSetPortDirection+0x42>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	61 f0       	breq	.+24     	; 0x1874 <DIO_enuSetPortDirection+0x58>
    185c:	1e c0       	rjmp	.+60     	; 0x189a <DIO_enuSetPortDirection+0x7e>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <DIO_enuSetPortDirection+0x6c>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <DIO_enuSetPortDirection+0x76>
    1872:	13 c0       	rjmp	.+38     	; 0x189a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_U8PORTA:
			DDRA = Copy_u8Value;
    1874:	ea e3       	ldi	r30, 0x3A	; 58
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	80 83       	st	Z, r24
    187c:	0e c0       	rjmp	.+28     	; 0x189a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTB:
			DDRB = Copy_u8Value;
    187e:	e7 e3       	ldi	r30, 0x37	; 55
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	80 83       	st	Z, r24
    1886:	09 c0       	rjmp	.+18     	; 0x189a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTC:
			DDRC = Copy_u8Value;
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	80 83       	st	Z, r24
    1890:	04 c0       	rjmp	.+8      	; 0x189a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTD:
			DDRD = Copy_u8Value;
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <DIO_enuSetPortValue>:

ES_T DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <DIO_enuSetPortValue+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <DIO_enuSetPortValue+0x8>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	a8 f5       	brcc	.+106    	; 0x193a <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	91 05       	cpc	r25, r1
    18e2:	d1 f0       	breq	.+52     	; 0x1918 <DIO_enuSetPortValue+0x62>
    18e4:	2c 81       	ldd	r18, Y+4	; 0x04
    18e6:	3d 81       	ldd	r19, Y+5	; 0x05
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <DIO_enuSetPortValue+0x42>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	61 f0       	breq	.+24     	; 0x190e <DIO_enuSetPortValue+0x58>
    18f6:	1e c0       	rjmp	.+60     	; 0x1934 <DIO_enuSetPortValue+0x7e>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	81 f0       	breq	.+32     	; 0x1922 <DIO_enuSetPortValue+0x6c>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	91 05       	cpc	r25, r1
    190a:	81 f0       	breq	.+32     	; 0x192c <DIO_enuSetPortValue+0x76>
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_U8PORTA:
			PORTA = Copy_u8Value;
    190e:	eb e3       	ldi	r30, 0x3B	; 59
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	80 83       	st	Z, r24
    1916:	0e c0       	rjmp	.+28     	; 0x1934 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTB:
			PORTB = Copy_u8Value;
    1918:	e8 e3       	ldi	r30, 0x38	; 56
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	80 83       	st	Z, r24
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTC:
			PORTC = Copy_u8Value;
    1922:	e5 e3       	ldi	r30, 0x35	; 53
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	80 83       	st	Z, r24
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTD:
			PORTD = Copy_u8Value;
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <DIO_enuTogglePortValue>:

ES_T DIO_enuTogglePortValue(u8 Copy_u8PortID)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_enuTogglePortValue+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <DIO_enuTogglePortValue+0x8>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    195e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	08 f0       	brcs	.+2      	; 0x1968 <DIO_enuTogglePortValue+0x18>
    1966:	41 c0       	rjmp	.+130    	; 0x19ea <DIO_enuTogglePortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	3c 83       	std	Y+4, r19	; 0x04
    1970:	2b 83       	std	Y+3, r18	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 05       	cpc	r25, r1
    197a:	e9 f0       	breq	.+58     	; 0x19b6 <DIO_enuTogglePortValue+0x66>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	2c f4       	brge	.+10     	; 0x1990 <DIO_enuTogglePortValue+0x40>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	61 f0       	breq	.+24     	; 0x19a6 <DIO_enuTogglePortValue+0x56>
    198e:	2a c0       	rjmp	.+84     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
    1990:	2b 81       	ldd	r18, Y+3	; 0x03
    1992:	3c 81       	ldd	r19, Y+4	; 0x04
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	b1 f0       	breq	.+44     	; 0x19c6 <DIO_enuTogglePortValue+0x76>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	c9 f0       	breq	.+50     	; 0x19d6 <DIO_enuTogglePortValue+0x86>
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
		{
		case DIO_U8PORTA:
			PORTA = ~PORTA;
    19a6:	ab e3       	ldi	r26, 0x3B	; 59
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 95       	com	r24
    19b2:	8c 93       	st	X, r24
    19b4:	17 c0       	rjmp	.+46     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTB:
			PORTB = ~PORTB;
    19b6:	a8 e3       	ldi	r26, 0x38	; 56
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 95       	com	r24
    19c2:	8c 93       	st	X, r24
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTC:
			PORTC = ~PORTC;
    19c6:	a5 e3       	ldi	r26, 0x35	; 53
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e3       	ldi	r30, 0x35	; 53
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 95       	com	r24
    19d2:	8c 93       	st	X, r24
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTD:
			PORTD = ~PORTD;
    19d6:	a2 e3       	ldi	r26, 0x32	; 50
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	80 95       	com	r24
    19e2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_enuTogglePortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DIO_enuGetPortValue>:

ES_T DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_Pu8Value)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <DIO_enuGetPortValue+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <DIO_enuGetPortValue+0x8>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <DIO_enuGetPortValue+0xa>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
    1a0e:	7c 83       	std	Y+4, r23	; 0x04
    1a10:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1a12:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8Value != NULL)
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <DIO_enuGetPortValue+0x20>
    1a1c:	43 c0       	rjmp	.+134    	; 0x1aa4 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_U8PORTD)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	e8 f5       	brcc	.+122    	; 0x1a9e <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3e 83       	std	Y+6, r19	; 0x06
    1a2c:	2d 83       	std	Y+5, r18	; 0x05
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	e1 f0       	breq	.+56     	; 0x1a70 <DIO_enuGetPortValue+0x72>
    1a38:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <DIO_enuGetPortValue+0x4e>
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <DIO_enuGetPortValue+0x64>
    1a4a:	26 c0       	rjmp	.+76     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
    1a4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	a1 f0       	breq	.+40     	; 0x1a7e <DIO_enuGetPortValue+0x80>
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	b1 f0       	breq	.+44     	; 0x1a8c <DIO_enuGetPortValue+0x8e>
    1a60:	1b c0       	rjmp	.+54     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_U8PORTA:
				*Copy_Pu8Value = PINA;
    1a62:	e9 e3       	ldi	r30, 0x39	; 57
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6c:	80 83       	st	Z, r24
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTB:
				*Copy_Pu8Value = PINB;
    1a70:	e6 e3       	ldi	r30, 0x36	; 54
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	eb 81       	ldd	r30, Y+3	; 0x03
    1a78:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7a:	80 83       	st	Z, r24
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTC:
				*Copy_Pu8Value = PINC;
    1a7e:	e3 e3       	ldi	r30, 0x33	; 51
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	eb 81       	ldd	r30, Y+3	; 0x03
    1a86:	fc 81       	ldd	r31, Y+4	; 0x04
    1a88:	80 83       	st	Z, r24
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTD:
				*Copy_Pu8Value = PIND;
    1a8c:	e0 e3       	ldi	r30, 0x30	; 48
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	eb 81       	ldd	r30, Y+3	; 0x03
    1a94:	fc 81       	ldd	r31, Y+4	; 0x04
    1a96:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	26 96       	adiw	r28, 0x06	; 6
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <DIO_enuSetPinDirection>:
ES_T DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <DIO_enuSetPinDirection+0x6>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <DIO_enuSetPinDirection+0x8>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <DIO_enuSetPinDirection+0xa>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	8a 83       	std	Y+2, r24	; 0x02
    1acc:	6b 83       	std	Y+3, r22	; 0x03
    1ace:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD &&
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	84 30       	cpi	r24, 0x04	; 4
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <DIO_enuSetPinDirection+0x1e>
    1ad8:	d1 c0       	rjmp	.+418    	; 0x1c7c <DIO_enuSetPinDirection+0x1c0>
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 30       	cpi	r24, 0x08	; 8
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <DIO_enuSetPinDirection+0x26>
    1ae0:	cd c0       	rjmp	.+410    	; 0x1c7c <DIO_enuSetPinDirection+0x1c0>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <DIO_enuSetPinDirection+0x2e>
    1ae8:	c9 c0       	rjmp	.+402    	; 0x1c7c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_U8PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch(Copy_u8PortID)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3e 83       	std	Y+6, r19	; 0x06
    1af2:	2d 83       	std	Y+5, r18	; 0x05
    1af4:	6d 81       	ldd	r22, Y+5	; 0x05
    1af6:	7e 81       	ldd	r23, Y+6	; 0x06
    1af8:	61 30       	cpi	r22, 0x01	; 1
    1afa:	71 05       	cpc	r23, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <DIO_enuSetPinDirection+0x44>
    1afe:	41 c0       	rjmp	.+130    	; 0x1b82 <DIO_enuSetPinDirection+0xc6>
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	91 05       	cpc	r25, r1
    1b08:	34 f4       	brge	.+12     	; 0x1b16 <DIO_enuSetPinDirection+0x5a>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	21 15       	cp	r18, r1
    1b10:	31 05       	cpc	r19, r1
    1b12:	71 f0       	breq	.+28     	; 0x1b30 <DIO_enuSetPinDirection+0x74>
    1b14:	b0 c0       	rjmp	.+352    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
    1b16:	6d 81       	ldd	r22, Y+5	; 0x05
    1b18:	7e 81       	ldd	r23, Y+6	; 0x06
    1b1a:	62 30       	cpi	r22, 0x02	; 2
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <DIO_enuSetPinDirection+0x66>
    1b20:	59 c0       	rjmp	.+178    	; 0x1bd4 <DIO_enuSetPinDirection+0x118>
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <DIO_enuSetPinDirection+0x72>
    1b2c:	7c c0       	rjmp	.+248    	; 0x1c26 <DIO_enuSetPinDirection+0x16a>
    1b2e:	a3 c0       	rjmp	.+326    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_U8PORTA:
			DDRA &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1b30:	aa e3       	ldi	r26, 0x3A	; 58
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ea e3       	ldi	r30, 0x3A	; 58
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_enuSetPinDirection+0x90>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	2a 95       	dec	r18
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_enuSetPinDirection+0x8c>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    1b56:	aa e3       	ldi	r26, 0x3A	; 58
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ea e3       	ldi	r30, 0x3A	; 58
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	b9 01       	movw	r22, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_enuSetPinDirection+0xba>
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	8a 95       	dec	r24
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_enuSetPinDirection+0xb6>
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	84 2b       	or	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	7a c0       	rjmp	.+244    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTB:
			DDRB &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1b82:	a7 e3       	ldi	r26, 0x37	; 55
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e7 e3       	ldi	r30, 0x37	; 55
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <DIO_enuSetPinDirection+0xe2>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	2a 95       	dec	r18
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <DIO_enuSetPinDirection+0xde>
    1ba2:	80 95       	com	r24
    1ba4:	84 23       	and	r24, r20
    1ba6:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    1ba8:	a7 e3       	ldi	r26, 0x37	; 55
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e3       	ldi	r30, 0x37	; 55
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_enuSetPinDirection+0x10c>
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_enuSetPinDirection+0x108>
    1bcc:	cb 01       	movw	r24, r22
    1bce:	84 2b       	or	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	51 c0       	rjmp	.+162    	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTC:
			DDRC &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1bd4:	a4 e3       	ldi	r26, 0x34	; 52
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e4 e3       	ldi	r30, 0x34	; 52
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_enuSetPinDirection+0x134>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	2a 95       	dec	r18
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_enuSetPinDirection+0x130>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    1bfa:	a4 e3       	ldi	r26, 0x34	; 52
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	b9 01       	movw	r22, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_enuSetPinDirection+0x15e>
    1c16:	66 0f       	add	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	8a 95       	dec	r24
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_enuSetPinDirection+0x15a>
    1c1e:	cb 01       	movw	r24, r22
    1c20:	84 2b       	or	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	28 c0       	rjmp	.+80     	; 0x1c76 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTD:
			DDRD &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
    1c26:	a1 e3       	ldi	r26, 0x31	; 49
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e1 e3       	ldi	r30, 0x31	; 49
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_enuSetPinDirection+0x186>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	2a 95       	dec	r18
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_enuSetPinDirection+0x182>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    1c4c:	a1 e3       	ldi	r26, 0x31	; 49
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	b9 01       	movw	r22, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_enuSetPinDirection+0x1b0>
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_enuSetPinDirection+0x1ac>
    1c70:	cb 01       	movw	r24, r22
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c82:	26 96       	adiw	r28, 0x06	; 6
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <DIO_enuSetPinValue>:
ES_T DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <DIO_enuSetPinValue+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <DIO_enuSetPinValue+0x8>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <DIO_enuSetPinValue+0xa>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	8a 83       	std	Y+2, r24	; 0x02
    1ca4:	6b 83       	std	Y+3, r22	; 0x03
    1ca6:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorstate = ES_NOK;
    1ca8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_U8PORTD &&
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <DIO_enuSetPinValue+0x1e>
    1cb0:	d1 c0       	rjmp	.+418    	; 0x1e54 <DIO_enuSetPinValue+0x1c0>
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	88 30       	cpi	r24, 0x08	; 8
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <DIO_enuSetPinValue+0x26>
    1cb8:	cd c0       	rjmp	.+410    	; 0x1e54 <DIO_enuSetPinValue+0x1c0>
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <DIO_enuSetPinValue+0x2e>
    1cc0:	c9 c0       	rjmp	.+402    	; 0x1e54 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_U8PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3e 83       	std	Y+6, r19	; 0x06
    1cca:	2d 83       	std	Y+5, r18	; 0x05
    1ccc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cce:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd0:	61 30       	cpi	r22, 0x01	; 1
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <DIO_enuSetPinValue+0x44>
    1cd6:	41 c0       	rjmp	.+130    	; 0x1d5a <DIO_enuSetPinValue+0xc6>
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	91 05       	cpc	r25, r1
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <DIO_enuSetPinValue+0x5a>
    1ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce6:	21 15       	cp	r18, r1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	71 f0       	breq	.+28     	; 0x1d08 <DIO_enuSetPinValue+0x74>
    1cec:	b0 c0       	rjmp	.+352    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
    1cee:	6d 81       	ldd	r22, Y+5	; 0x05
    1cf0:	7e 81       	ldd	r23, Y+6	; 0x06
    1cf2:	62 30       	cpi	r22, 0x02	; 2
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <DIO_enuSetPinValue+0x66>
    1cf8:	59 c0       	rjmp	.+178    	; 0x1dac <DIO_enuSetPinValue+0x118>
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <DIO_enuSetPinValue+0x72>
    1d04:	7c c0       	rjmp	.+248    	; 0x1dfe <DIO_enuSetPinValue+0x16a>
    1d06:	a3 c0       	rjmp	.+326    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_U8PORTA:
			PORTA &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_enuSetPinValue+0x90>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	2a 95       	dec	r18
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_enuSetPinValue+0x8c>
    1d28:	80 95       	com	r24
    1d2a:	84 23       	and	r24, r20
    1d2c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	b9 01       	movw	r22, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_enuSetPinValue+0xba>
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_enuSetPinValue+0xb6>
    1d52:	cb 01       	movw	r24, r22
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	7a c0       	rjmp	.+244    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTB:
			PORTB &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1d5a:	a8 e3       	ldi	r26, 0x38	; 56
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_enuSetPinValue+0xe2>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	2a 95       	dec	r18
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_enuSetPinValue+0xde>
    1d7a:	80 95       	com	r24
    1d7c:	84 23       	and	r24, r20
    1d7e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1d80:	a8 e3       	ldi	r26, 0x38	; 56
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e8 e3       	ldi	r30, 0x38	; 56
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	b9 01       	movw	r22, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_enuSetPinValue+0x10c>
    1d9c:	66 0f       	add	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	8a 95       	dec	r24
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_enuSetPinValue+0x108>
    1da4:	cb 01       	movw	r24, r22
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	51 c0       	rjmp	.+162    	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTC:
			PORTC &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1dac:	a5 e3       	ldi	r26, 0x35	; 53
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e3       	ldi	r30, 0x35	; 53
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <DIO_enuSetPinValue+0x134>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	2a 95       	dec	r18
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <DIO_enuSetPinValue+0x130>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1dd2:	a5 e3       	ldi	r26, 0x35	; 53
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e5 e3       	ldi	r30, 0x35	; 53
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	b9 01       	movw	r22, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_enuSetPinValue+0x15e>
    1dee:	66 0f       	add	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	8a 95       	dec	r24
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_enuSetPinValue+0x15a>
    1df6:	cb 01       	movw	r24, r22
    1df8:	84 2b       	or	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	28 c0       	rjmp	.+80     	; 0x1e4e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTD:
			PORTD &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
    1dfe:	a2 e3       	ldi	r26, 0x32	; 50
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e2 e3       	ldi	r30, 0x32	; 50
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_enuSetPinValue+0x186>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	2a 95       	dec	r18
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_enuSetPinValue+0x182>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1e24:	a2 e3       	ldi	r26, 0x32	; 50
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e2 e3       	ldi	r30, 0x32	; 50
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	b9 01       	movw	r22, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_enuSetPinValue+0x1b0>
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	8a 95       	dec	r24
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_enuSetPinValue+0x1ac>
    1e48:	cb 01       	movw	r24, r22
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUTOFRANGE;
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5a:	26 96       	adiw	r28, 0x06	; 6
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <DIO_enuToggelPinValue>:
ES_T DIO_enuToggelPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <DIO_enuToggelPinValue+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <DIO_enuToggelPinValue+0x8>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_U8PORTD &&
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <DIO_enuToggelPinValue+0x1c>
    1e86:	75 c0       	rjmp	.+234    	; 0x1f72 <DIO_enuToggelPinValue+0x106>
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <DIO_enuToggelPinValue+0x24>
    1e8e:	71 c0       	rjmp	.+226    	; 0x1f72 <DIO_enuToggelPinValue+0x106>
			Copy_u8PinID <= DIO_U8PIN7)
	{
		switch (Copy_u8PortID)
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	3d 83       	std	Y+5, r19	; 0x05
    1e98:	2c 83       	std	Y+4, r18	; 0x04
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	49 f1       	breq	.+82     	; 0x1ef6 <DIO_enuToggelPinValue+0x8a>
    1ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea8:	22 30       	cpi	r18, 0x02	; 2
    1eaa:	31 05       	cpc	r19, r1
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <DIO_enuToggelPinValue+0x4c>
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	61 f0       	breq	.+24     	; 0x1ece <DIO_enuToggelPinValue+0x62>
    1eb6:	5a c0       	rjmp	.+180    	; 0x1f6c <DIO_enuToggelPinValue+0x100>
    1eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eba:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	71 f1       	breq	.+92     	; 0x1f1e <DIO_enuToggelPinValue+0xb2>
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	e9 f1       	breq	.+122    	; 0x1f46 <DIO_enuToggelPinValue+0xda>
    1ecc:	4f c0       	rjmp	.+158    	; 0x1f6c <DIO_enuToggelPinValue+0x100>
		{
		case DIO_U8PORTA:
			PORTA ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1ece:	ab e3       	ldi	r26, 0x3B	; 59
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	eb e3       	ldi	r30, 0x3B	; 59
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_enuToggelPinValue+0x80>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_enuToggelPinValue+0x7c>
    1ef0:	84 27       	eor	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	3b c0       	rjmp	.+118    	; 0x1f6c <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTB:
			PORTB ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1ef6:	a8 e3       	ldi	r26, 0x38	; 56
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e8 e3       	ldi	r30, 0x38	; 56
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_enuToggelPinValue+0xa8>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_enuToggelPinValue+0xa4>
    1f18:	84 27       	eor	r24, r20
    1f1a:	8c 93       	st	X, r24
    1f1c:	27 c0       	rjmp	.+78     	; 0x1f6c <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTC:
			PORTC ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1f1e:	a5 e3       	ldi	r26, 0x35	; 53
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e5 e3       	ldi	r30, 0x35	; 53
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_enuToggelPinValue+0xd0>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_enuToggelPinValue+0xcc>
    1f40:	84 27       	eor	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	13 c0       	rjmp	.+38     	; 0x1f6c <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTD:
			PORTD ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
    1f46:	a2 e3       	ldi	r26, 0x32	; 50
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e2 e3       	ldi	r30, 0x32	; 50
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_enuToggelPinValue+0xf8>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_enuToggelPinValue+0xf4>
    1f68:	84 27       	eor	r24, r20
    1f6a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_enuToggelPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <DIO_enuGetPinValue>:
ES_T DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 * Copy_Pu8Value)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	27 97       	sbiw	r28, 0x07	; 7
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
    1f9e:	6b 83       	std	Y+3, r22	; 0x03
    1fa0:	5d 83       	std	Y+5, r21	; 0x05
    1fa2:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1fa4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pu8Value != NULL)
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <DIO_enuGetPinValue+0x28>
    1fae:	7e c0       	rjmp	.+252    	; 0x20ac <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_U8PORTD &&
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <DIO_enuGetPinValue+0x30>
    1fb6:	77 c0       	rjmp	.+238    	; 0x20a6 <DIO_enuGetPinValue+0x11e>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 30       	cpi	r24, 0x08	; 8
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <DIO_enuGetPinValue+0x38>
    1fbe:	73 c0       	rjmp	.+230    	; 0x20a6 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_U8PIN7)
		{
			switch (Copy_u8PortID)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3f 83       	std	Y+7, r19	; 0x07
    1fc8:	2e 83       	std	Y+6, r18	; 0x06
    1fca:	4e 81       	ldd	r20, Y+6	; 0x06
    1fcc:	5f 81       	ldd	r21, Y+7	; 0x07
    1fce:	41 30       	cpi	r20, 0x01	; 1
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	59 f1       	breq	.+86     	; 0x202a <DIO_enuGetPinValue+0xa2>
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	91 05       	cpc	r25, r1
    1fdc:	34 f4       	brge	.+12     	; 0x1fea <DIO_enuGetPinValue+0x62>
    1fde:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fe2:	21 15       	cp	r18, r1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	69 f0       	breq	.+26     	; 0x2002 <DIO_enuGetPinValue+0x7a>
    1fe8:	5b c0       	rjmp	.+182    	; 0x20a0 <DIO_enuGetPinValue+0x118>
    1fea:	4e 81       	ldd	r20, Y+6	; 0x06
    1fec:	5f 81       	ldd	r21, Y+7	; 0x07
    1fee:	42 30       	cpi	r20, 0x02	; 2
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	79 f1       	breq	.+94     	; 0x2052 <DIO_enuGetPinValue+0xca>
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <DIO_enuGetPinValue+0x78>
    1ffe:	3d c0       	rjmp	.+122    	; 0x207a <DIO_enuGetPinValue+0xf2>
    2000:	4f c0       	rjmp	.+158    	; 0x20a0 <DIO_enuGetPinValue+0x118>
			{
			case DIO_U8PORTA:
				*Copy_Pu8Value = ((PINA>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    2002:	e9 e3       	ldi	r30, 0x39	; 57
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a9 01       	movw	r20, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_enuGetPinValue+0x92>
    2016:	55 95       	asr	r21
    2018:	47 95       	ror	r20
    201a:	8a 95       	dec	r24
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_enuGetPinValue+0x8e>
    201e:	ca 01       	movw	r24, r20
    2020:	81 70       	andi	r24, 0x01	; 1
    2022:	ec 81       	ldd	r30, Y+4	; 0x04
    2024:	fd 81       	ldd	r31, Y+5	; 0x05
    2026:	80 83       	st	Z, r24
    2028:	3b c0       	rjmp	.+118    	; 0x20a0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_U8PORTB:
				*Copy_Pu8Value = ((PINB>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    202a:	e6 e3       	ldi	r30, 0x36	; 54
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a9 01       	movw	r20, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <DIO_enuGetPinValue+0xba>
    203e:	55 95       	asr	r21
    2040:	47 95       	ror	r20
    2042:	8a 95       	dec	r24
    2044:	e2 f7       	brpl	.-8      	; 0x203e <DIO_enuGetPinValue+0xb6>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	ec 81       	ldd	r30, Y+4	; 0x04
    204c:	fd 81       	ldd	r31, Y+5	; 0x05
    204e:	80 83       	st	Z, r24
    2050:	27 c0       	rjmp	.+78     	; 0x20a0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_U8PORTC:
				*Copy_Pu8Value = ((PINC>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    2052:	e3 e3       	ldi	r30, 0x33	; 51
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a9 01       	movw	r20, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_enuGetPinValue+0xe2>
    2066:	55 95       	asr	r21
    2068:	47 95       	ror	r20
    206a:	8a 95       	dec	r24
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_enuGetPinValue+0xde>
    206e:	ca 01       	movw	r24, r20
    2070:	81 70       	andi	r24, 0x01	; 1
    2072:	ec 81       	ldd	r30, Y+4	; 0x04
    2074:	fd 81       	ldd	r31, Y+5	; 0x05
    2076:	80 83       	st	Z, r24
    2078:	13 c0       	rjmp	.+38     	; 0x20a0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_U8PORTD:
				*Copy_Pu8Value = ((PIND>>Copy_u8PinID) &DIO_U8MASKINGBIT);
    207a:	e0 e3       	ldi	r30, 0x30	; 48
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a9 01       	movw	r20, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_enuGetPinValue+0x10a>
    208e:	55 95       	asr	r21
    2090:	47 95       	ror	r20
    2092:	8a 95       	dec	r24
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_enuGetPinValue+0x106>
    2096:	ca 01       	movw	r24, r20
    2098:	81 70       	andi	r24, 0x01	; 1
    209a:	ec 81       	ldd	r30, Y+4	; 0x04
    209c:	fd 81       	ldd	r31, Y+5	; 0x05
    209e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b2:	27 96       	adiw	r28, 0x07	; 7
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <ADC_enuInit>:
* @brief 		- Initialize ADC Configuration According to the Configuration file [ADC_Config.h]
* @param [in] 	- none
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuInit(void)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADEN);
    20ce:	a6 e2       	ldi	r26, 0x26	; 38
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e6 e2       	ldi	r30, 0x26	; 38
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	8c 93       	st	X, r24
	ES_T Local_enuErrorState = ES_NOK;
    20dc:	19 82       	std	Y+1, r1	; 0x01
#elif ADC_PRESCALERE == PRE_64
	ADCSRA &=~  (1<<ADPS0);
	ADCSRA |=	(1<<ADPS1);
	ADCSRA |=   (1<<ADPS2);
#elif ADC_PRESCALERE == PRE_128
	ADCSRA |=  (1<<ADPS0);
    20de:	a6 e2       	ldi	r26, 0x26	; 38
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e6 e2       	ldi	r30, 0x26	; 38
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	81 60       	ori	r24, 0x01	; 1
    20ea:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS1);
    20ec:	a6 e2       	ldi	r26, 0x26	; 38
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e6 e2       	ldi	r30, 0x26	; 38
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	82 60       	ori	r24, 0x02	; 2
    20f8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADPS2);
    20fa:	a6 e2       	ldi	r26, 0x26	; 38
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e2       	ldi	r30, 0x26	; 38
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	84 60       	ori	r24, 0x04	; 4
    2106:	8c 93       	st	X, r24
	//Voltage Reference Handling
#if ADC_U8VOLTAGE_REFRENCE == AREF_INTERNAL_VOFF
	ADMUX &=~(1<<REFS0);
	ADMUX &=~(1<<REFS1);
#elif ADC_U8VOLTAGE_REFRENCE == AVCC
	ADMUX |=  (1<<REFS0);
    2108:	a7 e2       	ldi	r26, 0x27	; 39
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e7 e2       	ldi	r30, 0x27	; 39
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 64       	ori	r24, 0x40	; 64
    2114:	8c 93       	st	X, r24
	ADMUX &=~ (1<<REFS1);
    2116:	a7 e2       	ldi	r26, 0x27	; 39
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e7 e2       	ldi	r30, 0x27	; 39
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 77       	andi	r24, 0x7F	; 127
    2122:	8c 93       	st	X, r24

	//presentation of the ADC conversion result Handling
#if ADC_WRITEADJUST	 == LEFT_ADJUSTED
	ADMUX |= (1<<ADLAR);
#elif ADC_WRITEADJUST == RIGHT_ADJUSTED
	ADMUX &=~ (1<<ADLAR);
    2124:	a7 e2       	ldi	r26, 0x27	; 39
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e7 e2       	ldi	r30, 0x27	; 39
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8f 7d       	andi	r24, 0xDF	; 223
    2130:	8c 93       	st	X, r24
#else
#error "Error in Adjustment !!"
#endif

	return Local_enuErrorState;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
}
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <ADC_enuStartConversion>:
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
* @Note			- In Single Conversion mode, write this bit to one to start each conversion
* 				  In Free Running Mode, write this bit to one to start the first conversion only
*/
ES_T ADC_enuStartConversion(void)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    2146:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |=(1<<ADSC);
    2148:	a6 e2       	ldi	r26, 0x26	; 38
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 64       	ori	r24, 0x40	; 64
    2154:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
}
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <ADC_enuPollingSystem>:
* @brief 		- Only its usage for waiting the flag of ADC and Clear it to start another reading
* @param [in] 	- none
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuPollingSystem(void)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	0f 92       	push	r0
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    216e:	19 82       	std	Y+1, r1	; 0x01
	//Waiting flag in ADCSRA REG
	while(1&(ADCSRA>>ADIF) == 0);
    2170:	e6 e2       	ldi	r30, 0x26	; 38
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	82 95       	swap	r24
    2178:	8f 70       	andi	r24, 0x0F	; 15
    217a:	88 23       	and	r24, r24
    217c:	c9 f3       	breq	.-14     	; 0x2170 <ADC_enuPollingSystem+0xc>
	ADCSRA |= (1<<ADIF);
    217e:	a6 e2       	ldi	r26, 0x26	; 38
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e6 e2       	ldi	r30, 0x26	; 38
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 61       	ori	r24, 0x10	; 16
    218a:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2190:	89 81       	ldd	r24, Y+1	; 0x01
}
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <ADC_enuReadHighReg>:
* @brief 		- in LEFT_Adjusted we need only to read HIGH Register
* @param [in] 	- Copy_Pu8Value
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuReadHighReg(u8 * Copy_Pu8Value)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <ADC_enuReadHighReg+0x6>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9b 83       	std	Y+3, r25	; 0x03
    21a8:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    21aa:	19 82       	std	Y+1, r1	; 0x01
#if ADC_WRITEADJUST ==  LEFT_ADJUSTED
	*Copy_Pu8Value = ADCH;
	Local_enuErrorState = ES_OK;
#elif ADC_WRITEADJUST ==  RIGHT_ADJUSTED
	*Copy_Pu8Value = (((u16)ADCL >> 2) | (ADCH << 6));
    21ac:	e4 e2       	ldi	r30, 0x24	; 36
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	98 2f       	mov	r25, r24
    21b4:	96 95       	lsr	r25
    21b6:	96 95       	lsr	r25
    21b8:	e5 e2       	ldi	r30, 0x25	; 37
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	82 95       	swap	r24
    21c0:	88 0f       	add	r24, r24
    21c2:	88 0f       	add	r24, r24
    21c4:	80 7c       	andi	r24, 0xC0	; 192
    21c6:	89 2b       	or	r24, r25
    21c8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ca:	fb 81       	ldd	r31, Y+3	; 0x03
    21cc:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Error in Reading ADC !"
#endif
	return Local_enuErrorState;
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <ADC_enuRead>:
* @brief 		- Which read 10-bits of ADC [ADCL + ADCH]
* @param [in] 	- Copy_Pu16Value
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuRead(u16 * Copy_Pu16Value)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <ADC_enuRead+0x6>
    21e6:	0f 92       	push	r0
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	9b 83       	std	Y+3, r25	; 0x03
    21ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    21f0:	19 82       	std	Y+1, r1	; 0x01
#if ADC_WRITEADJUST ==  LEFT_ADJUSTED
	*Copy_Pu16Value  = ADCL;
	*Copy_Pu16Value  = (*Copy_Pu16Value>>6) | ((u16)ADCH<<2);
	Local_enuErrorState = ES_OK;
#elif ADC_WRITEADJUST ==  RIGHT_ADJUSTED
	*Copy_Pu16Value  = ADCL;
    21f2:	e4 e2       	ldi	r30, 0x24	; 36
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	ea 81       	ldd	r30, Y+2	; 0x02
    21fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
	*Copy_Pu16Value |= ((u16)ADCH <<8 );
    2204:	ea 81       	ldd	r30, Y+2	; 0x02
    2206:	fb 81       	ldd	r31, Y+3	; 0x03
    2208:	20 81       	ld	r18, Z
    220a:	31 81       	ldd	r19, Z+1	; 0x01
    220c:	e5 e2       	ldi	r30, 0x25	; 37
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	98 2f       	mov	r25, r24
    2218:	88 27       	eor	r24, r24
    221a:	82 2b       	or	r24, r18
    221c:	93 2b       	or	r25, r19
    221e:	ea 81       	ldd	r30, Y+2	; 0x02
    2220:	fb 81       	ldd	r31, Y+3	; 0x03
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Error in Reading ADC !"
#endif
	return Local_enuErrorState;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <ADC_enuCallBack>:
* @param [in] 	- void(*Copy_pAPPfun (void *)) which is global pointer to function
* @param [in] 	- void * Copy_PvidParam which is global pointer to void variable
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuCallBack(void(*Copy_pAPPfun (void *)) , void * Copy_PvidParam)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <ADC_enuCallBack+0x6>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <ADC_enuCallBack+0x8>
    2240:	0f 92       	push	r0
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	9b 83       	std	Y+3, r25	; 0x03
    2248:	8a 83       	std	Y+2, r24	; 0x02
    224a:	7d 83       	std	Y+5, r23	; 0x05
    224c:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    224e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pAPPfun != NULL)
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	79 f0       	breq	.+30     	; 0x2276 <ADC_enuCallBack+0x3e>
	{
		ADC_pFunISRfun   = Copy_pAPPfun;
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	9b 81       	ldd	r25, Y+3	; 0x03
    225c:	90 93 db 01 	sts	0x01DB, r25
    2260:	80 93 da 01 	sts	0x01DA, r24
		ADC_pFunISRparam = Copy_PvidParam;
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	90 93 dd 01 	sts	0x01DD, r25
    226c:	80 93 dc 01 	sts	0x01DC, r24
		Local_enuErrorState = ES_OK;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	02 c0       	rjmp	.+4      	; 0x227a <ADC_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <ADC_enuEnable>:
* @brief 		- enable ADC
* @param [in] 	- none
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuEnable(void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    2296:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (1<<ADEN);
    2298:	a6 e2       	ldi	r26, 0x26	; 38
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e6 e2       	ldi	r30, 0x26	; 38
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 68       	ori	r24, 0x80	; 128
    22a4:	8c 93       	st	X, r24
	return Local_enuErrorState;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <ADC_enuDisable>:
* @brief 		- Disable ADC
* @param [in] 	- none
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuDisable(void)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    22ba:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &= ~ (1<<ADEN);
    22bc:	a6 e2       	ldi	r26, 0x26	; 38
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e6 e2       	ldi	r30, 0x26	; 38
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 77       	andi	r24, 0x7F	; 127
    22c8:	8c 93       	st	X, r24
	return Local_enuErrorState;
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <ADC_enuSelectChannel>:
* @brief 		- Select Channel for your ADC from [0-7]
* @param [in] 	- Copy_u8ChannelID number of channel
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	00 d0       	rcall	.+0      	; 0x22da <ADC_enuSelectChannel+0x6>
    22da:	00 d0       	rcall	.+0      	; 0x22dc <ADC_enuSelectChannel+0x8>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    22e2:	19 82       	std	Y+1, r1	; 0x01
	//Clear MUX4:0
	ADMUX &=~ 0x1F;
    22e4:	a7 e2       	ldi	r26, 0x27	; 39
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e7 e2       	ldi	r30, 0x27	; 39
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 7e       	andi	r24, 0xE0	; 224
    22f0:	8c 93       	st	X, r24
	//Single Ended Mode
	if(ADC_INPUT_SOURCE == SINGLE_ENDED_MODE)
	{
		switch(Copy_u8ChannelID)
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	3c 83       	std	Y+4, r19	; 0x04
    22fa:	2b 83       	std	Y+3, r18	; 0x03
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	91 05       	cpc	r25, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <ADC_enuSelectChannel+0x34>
    2306:	43 c0       	rjmp	.+134    	; 0x238e <ADC_enuSelectChannel+0xba>
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	24 30       	cpi	r18, 0x04	; 4
    230e:	31 05       	cpc	r19, r1
    2310:	7c f4       	brge	.+30     	; 0x2330 <ADC_enuSelectChannel+0x5c>
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	29 f1       	breq	.+74     	; 0x2366 <ADC_enuSelectChannel+0x92>
    231c:	2b 81       	ldd	r18, Y+3	; 0x03
    231e:	3c 81       	ldd	r19, Y+4	; 0x04
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	54 f5       	brge	.+84     	; 0x237a <ADC_enuSelectChannel+0xa6>
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	c9 f0       	breq	.+50     	; 0x2360 <ADC_enuSelectChannel+0x8c>
    232e:	84 c0       	rjmp	.+264    	; 0x2438 <ADC_enuSelectChannel+0x164>
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	25 30       	cpi	r18, 0x05	; 5
    2336:	31 05       	cpc	r19, r1
    2338:	09 f4       	brne	.+2      	; 0x233c <ADC_enuSelectChannel+0x68>
    233a:	44 c0       	rjmp	.+136    	; 0x23c4 <ADC_enuSelectChannel+0xf0>
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	85 30       	cpi	r24, 0x05	; 5
    2342:	91 05       	cpc	r25, r1
    2344:	ac f1       	brlt	.+106    	; 0x23b0 <ADC_enuSelectChannel+0xdc>
    2346:	2b 81       	ldd	r18, Y+3	; 0x03
    2348:	3c 81       	ldd	r19, Y+4	; 0x04
    234a:	26 30       	cpi	r18, 0x06	; 6
    234c:	31 05       	cpc	r19, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <ADC_enuSelectChannel+0x7e>
    2350:	4a c0       	rjmp	.+148    	; 0x23e6 <ADC_enuSelectChannel+0x112>
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	87 30       	cpi	r24, 0x07	; 7
    2358:	91 05       	cpc	r25, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <ADC_enuSelectChannel+0x8a>
    235c:	55 c0       	rjmp	.+170    	; 0x2408 <ADC_enuSelectChannel+0x134>
    235e:	6c c0       	rjmp	.+216    	; 0x2438 <ADC_enuSelectChannel+0x164>
		{
		case ADC_0:
			Local_enuErrorState = ES_OK;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	6a c0       	rjmp	.+212    	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_1:
			ADMUX |= (1<<MUX0);
    2366:	a7 e2       	ldi	r26, 0x27	; 39
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e7 e2       	ldi	r30, 0x27	; 39
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	81 60       	ori	r24, 0x01	; 1
    2372:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	60 c0       	rjmp	.+192    	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_2:
			ADMUX |= (1<<MUX1);
    237a:	a7 e2       	ldi	r26, 0x27	; 39
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e7 e2       	ldi	r30, 0x27	; 39
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	82 60       	ori	r24, 0x02	; 2
    2386:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	56 c0       	rjmp	.+172    	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_3:
			ADMUX |= (1<<MUX0);
    238e:	a7 e2       	ldi	r26, 0x27	; 39
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e7 e2       	ldi	r30, 0x27	; 39
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	8c 93       	st	X, r24
			ADMUX |= (1<<MUX1);
    239c:	a7 e2       	ldi	r26, 0x27	; 39
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e7 e2       	ldi	r30, 0x27	; 39
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	82 60       	ori	r24, 0x02	; 2
    23a8:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	45 c0       	rjmp	.+138    	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_4:
			ADMUX |= (1<<MUX2);
    23b0:	a7 e2       	ldi	r26, 0x27	; 39
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e7 e2       	ldi	r30, 0x27	; 39
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	84 60       	ori	r24, 0x04	; 4
    23bc:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	3b c0       	rjmp	.+118    	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_5:
			ADMUX |= (1<<MUX0);
    23c4:	a7 e2       	ldi	r26, 0x27	; 39
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e7 e2       	ldi	r30, 0x27	; 39
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	81 60       	ori	r24, 0x01	; 1
    23d0:	8c 93       	st	X, r24
			ADMUX |= (1<<MUX2);
    23d2:	a7 e2       	ldi	r26, 0x27	; 39
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e7 e2       	ldi	r30, 0x27	; 39
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	84 60       	ori	r24, 0x04	; 4
    23de:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	2a c0       	rjmp	.+84     	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_6:
			ADMUX |= (1<<MUX1);
    23e6:	a7 e2       	ldi	r26, 0x27	; 39
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e7 e2       	ldi	r30, 0x27	; 39
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	82 60       	ori	r24, 0x02	; 2
    23f2:	8c 93       	st	X, r24
			ADMUX |= (1<<MUX2);
    23f4:	a7 e2       	ldi	r26, 0x27	; 39
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e7 e2       	ldi	r30, 0x27	; 39
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	84 60       	ori	r24, 0x04	; 4
    2400:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	19 c0       	rjmp	.+50     	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		case ADC_7:
			ADMUX |= (1<<MUX0);
    2408:	a7 e2       	ldi	r26, 0x27	; 39
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e2       	ldi	r30, 0x27	; 39
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	81 60       	ori	r24, 0x01	; 1
    2414:	8c 93       	st	X, r24
			ADMUX |= (1<<MUX1);
    2416:	a7 e2       	ldi	r26, 0x27	; 39
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e7 e2       	ldi	r30, 0x27	; 39
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	82 60       	ori	r24, 0x02	; 2
    2422:	8c 93       	st	X, r24
			ADMUX |= (1<<MUX2);
    2424:	a7 e2       	ldi	r26, 0x27	; 39
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e7 e2       	ldi	r30, 0x27	; 39
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	84 60       	ori	r24, 0x04	; 4
    2430:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	01 c0       	rjmp	.+2      	; 0x243a <ADC_enuSelectChannel+0x166>
			break;
		default:
			Local_enuErrorState = ES_NOK;
    2438:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
	}
	return Local_enuErrorState;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <ADC_enuEnableTriggeringMode>:
* @brief 		- enable triggering mode of ADC based of triggering source
* @param [in] 	- Copy_u8TriggeringSource which is trigger source
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <ADC_enuEnableTriggeringMode+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <ADC_enuEnableTriggeringMode+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    2458:	19 82       	std	Y+1, r1	; 0x01
	//Disable Auto Trigger
	ADCSRA &= ~ (1 << ADATE);
    245a:	a6 e2       	ldi	r26, 0x26	; 38
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e6 e2       	ldi	r30, 0x26	; 38
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	8f 7d       	andi	r24, 0xDF	; 223
    2466:	8c 93       	st	X, r24
	switch(Copy_u8TriggeringSource)
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3c 83       	std	Y+4, r19	; 0x04
    2470:	2b 83       	std	Y+3, r18	; 0x03
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	91 05       	cpc	r25, r1
    247a:	09 f4       	brne	.+2      	; 0x247e <ADC_enuEnableTriggeringMode+0x34>
    247c:	76 c0       	rjmp	.+236    	; 0x256a <ADC_enuEnableTriggeringMode+0x120>
    247e:	2b 81       	ldd	r18, Y+3	; 0x03
    2480:	3c 81       	ldd	r19, Y+4	; 0x04
    2482:	24 30       	cpi	r18, 0x04	; 4
    2484:	31 05       	cpc	r19, r1
    2486:	84 f4       	brge	.+32     	; 0x24a8 <ADC_enuEnableTriggeringMode+0x5e>
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	e1 f1       	breq	.+120    	; 0x250a <ADC_enuEnableTriggeringMode+0xc0>
    2492:	2b 81       	ldd	r18, Y+3	; 0x03
    2494:	3c 81       	ldd	r19, Y+4	; 0x04
    2496:	22 30       	cpi	r18, 0x02	; 2
    2498:	31 05       	cpc	r19, r1
    249a:	0c f0       	brlt	.+2      	; 0x249e <ADC_enuEnableTriggeringMode+0x54>
    249c:	4e c0       	rjmp	.+156    	; 0x253a <ADC_enuEnableTriggeringMode+0xf0>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	d1 f0       	breq	.+52     	; 0x24da <ADC_enuEnableTriggeringMode+0x90>
    24a6:	d9 c0       	rjmp	.+434    	; 0x265a <ADC_enuEnableTriggeringMode+0x210>
    24a8:	2b 81       	ldd	r18, Y+3	; 0x03
    24aa:	3c 81       	ldd	r19, Y+4	; 0x04
    24ac:	25 30       	cpi	r18, 0x05	; 5
    24ae:	31 05       	cpc	r19, r1
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <ADC_enuEnableTriggeringMode+0x6a>
    24b2:	8b c0       	rjmp	.+278    	; 0x25ca <ADC_enuEnableTriggeringMode+0x180>
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	85 30       	cpi	r24, 0x05	; 5
    24ba:	91 05       	cpc	r25, r1
    24bc:	0c f4       	brge	.+2      	; 0x24c0 <ADC_enuEnableTriggeringMode+0x76>
    24be:	6d c0       	rjmp	.+218    	; 0x259a <ADC_enuEnableTriggeringMode+0x150>
    24c0:	2b 81       	ldd	r18, Y+3	; 0x03
    24c2:	3c 81       	ldd	r19, Y+4	; 0x04
    24c4:	26 30       	cpi	r18, 0x06	; 6
    24c6:	31 05       	cpc	r19, r1
    24c8:	09 f4       	brne	.+2      	; 0x24cc <ADC_enuEnableTriggeringMode+0x82>
    24ca:	97 c0       	rjmp	.+302    	; 0x25fa <ADC_enuEnableTriggeringMode+0x1b0>
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	87 30       	cpi	r24, 0x07	; 7
    24d2:	91 05       	cpc	r25, r1
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <ADC_enuEnableTriggeringMode+0x8e>
    24d6:	a9 c0       	rjmp	.+338    	; 0x262a <ADC_enuEnableTriggeringMode+0x1e0>
    24d8:	c0 c0       	rjmp	.+384    	; 0x265a <ADC_enuEnableTriggeringMode+0x210>
	{
	case FREE_RUNNING_MODE:
		SFIOR &=~ (1<<ADTS0);
    24da:	a0 e5       	ldi	r26, 0x50	; 80
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e0 e5       	ldi	r30, 0x50	; 80
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	8f 7d       	andi	r24, 0xDF	; 223
    24e6:	8c 93       	st	X, r24
		SFIOR &=~ (1<<ADTS1);
    24e8:	a0 e5       	ldi	r26, 0x50	; 80
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e0 e5       	ldi	r30, 0x50	; 80
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 7b       	andi	r24, 0xBF	; 191
    24f4:	8c 93       	st	X, r24
		SFIOR &=~ (1<<ADTS2);
    24f6:	a0 e5       	ldi	r26, 0x50	; 80
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e0 e5       	ldi	r30, 0x50	; 80
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	8f 77       	andi	r24, 0x7F	; 127
    2502:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	a9 c0       	rjmp	.+338    	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case ANALOG_COMPARATOR:
		SFIOR |=  (1<<ADTS0);
    250a:	a0 e5       	ldi	r26, 0x50	; 80
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e0 e5       	ldi	r30, 0x50	; 80
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	80 62       	ori	r24, 0x20	; 32
    2516:	8c 93       	st	X, r24
		SFIOR &=~ (1<<ADTS1);
    2518:	a0 e5       	ldi	r26, 0x50	; 80
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e0 e5       	ldi	r30, 0x50	; 80
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	8f 7b       	andi	r24, 0xBF	; 191
    2524:	8c 93       	st	X, r24
		SFIOR &=~ (1<<ADTS2);
    2526:	a0 e5       	ldi	r26, 0x50	; 80
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e0 e5       	ldi	r30, 0x50	; 80
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8f 77       	andi	r24, 0x7F	; 127
    2532:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	91 c0       	rjmp	.+290    	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case EXT0_INT:
		SFIOR &=~    (1<<ADTS0);
    253a:	a0 e5       	ldi	r26, 0x50	; 80
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e0 e5       	ldi	r30, 0x50	; 80
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8f 7d       	andi	r24, 0xDF	; 223
    2546:	8c 93       	st	X, r24
		SFIOR |=     (1<<ADTS1);
    2548:	a0 e5       	ldi	r26, 0x50	; 80
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e0 e5       	ldi	r30, 0x50	; 80
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	80 64       	ori	r24, 0x40	; 64
    2554:	8c 93       	st	X, r24
		SFIOR &=~    (1<<ADTS2);
    2556:	a0 e5       	ldi	r26, 0x50	; 80
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e0 e5       	ldi	r30, 0x50	; 80
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	8f 77       	andi	r24, 0x7F	; 127
    2562:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	79 c0       	rjmp	.+242    	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case TMR0_CMP:
		SFIOR |=  (1<<ADTS0);
    256a:	a0 e5       	ldi	r26, 0x50	; 80
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e0 e5       	ldi	r30, 0x50	; 80
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	80 62       	ori	r24, 0x20	; 32
    2576:	8c 93       	st	X, r24
		SFIOR |=   (1<<ADTS1);
    2578:	a0 e5       	ldi	r26, 0x50	; 80
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e0 e5       	ldi	r30, 0x50	; 80
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	80 64       	ori	r24, 0x40	; 64
    2584:	8c 93       	st	X, r24
		SFIOR &=~  (1<<ADTS2);
    2586:	a0 e5       	ldi	r26, 0x50	; 80
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e0 e5       	ldi	r30, 0x50	; 80
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	8f 77       	andi	r24, 0x7F	; 127
    2592:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	61 c0       	rjmp	.+194    	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case TMR0_OVF:
		SFIOR &=~ (1<<ADTS0);
    259a:	a0 e5       	ldi	r26, 0x50	; 80
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e0 e5       	ldi	r30, 0x50	; 80
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	8f 7d       	andi	r24, 0xDF	; 223
    25a6:	8c 93       	st	X, r24
		SFIOR &=~ (1<<ADTS1);
    25a8:	a0 e5       	ldi	r26, 0x50	; 80
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e0 e5       	ldi	r30, 0x50	; 80
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	8f 7b       	andi	r24, 0xBF	; 191
    25b4:	8c 93       	st	X, r24
		SFIOR |=  (1<<ADTS2);
    25b6:	a0 e5       	ldi	r26, 0x50	; 80
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e0 e5       	ldi	r30, 0x50	; 80
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	80 68       	ori	r24, 0x80	; 128
    25c2:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	49 c0       	rjmp	.+146    	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case TMR_CMP_B:
		SFIOR |=  (1<<ADTS0);
    25ca:	a0 e5       	ldi	r26, 0x50	; 80
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e0 e5       	ldi	r30, 0x50	; 80
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	80 62       	ori	r24, 0x20	; 32
    25d6:	8c 93       	st	X, r24
		SFIOR &=~ (1<<ADTS1);
    25d8:	a0 e5       	ldi	r26, 0x50	; 80
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e0 e5       	ldi	r30, 0x50	; 80
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	8f 7b       	andi	r24, 0xBF	; 191
    25e4:	8c 93       	st	X, r24
		SFIOR |=  (1<<ADTS2);
    25e6:	a0 e5       	ldi	r26, 0x50	; 80
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e0 e5       	ldi	r30, 0x50	; 80
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	80 68       	ori	r24, 0x80	; 128
    25f2:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	31 c0       	rjmp	.+98     	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case TMR1_OVF:
		SFIOR &=~ (1<<ADTS0);
    25fa:	a0 e5       	ldi	r26, 0x50	; 80
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e0 e5       	ldi	r30, 0x50	; 80
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8f 7d       	andi	r24, 0xDF	; 223
    2606:	8c 93       	st	X, r24
		SFIOR |=  (1<<ADTS1);
    2608:	a0 e5       	ldi	r26, 0x50	; 80
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e0 e5       	ldi	r30, 0x50	; 80
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	80 64       	ori	r24, 0x40	; 64
    2614:	8c 93       	st	X, r24
		SFIOR |=  (1<<ADTS2);
    2616:	a0 e5       	ldi	r26, 0x50	; 80
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e0 e5       	ldi	r30, 0x50	; 80
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	19 c0       	rjmp	.+50     	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	case TMR1_CAPTURE:
		SFIOR |=  (1<<ADTS0);
    262a:	a0 e5       	ldi	r26, 0x50	; 80
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e0 e5       	ldi	r30, 0x50	; 80
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 62       	ori	r24, 0x20	; 32
    2636:	8c 93       	st	X, r24
		SFIOR |=  (1<<ADTS1);
    2638:	a0 e5       	ldi	r26, 0x50	; 80
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e0 e5       	ldi	r30, 0x50	; 80
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	80 64       	ori	r24, 0x40	; 64
    2644:	8c 93       	st	X, r24
		SFIOR |=  (1<<ADTS2);
    2646:	a0 e5       	ldi	r26, 0x50	; 80
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e0 e5       	ldi	r30, 0x50	; 80
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	80 68       	ori	r24, 0x80	; 128
    2652:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	01 c0       	rjmp	.+2      	; 0x265c <ADC_enuEnableTriggeringMode+0x212>
		break;
	default:
		Local_enuErrorState =ES_NOK;
    265a:	19 82       	std	Y+1, r1	; 0x01

	}
	ADCSRA |=  (1 << ADATE);
    265c:	a6 e2       	ldi	r26, 0x26	; 38
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e6 e2       	ldi	r30, 0x26	; 38
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	80 62       	ori	r24, 0x20	; 32
    2668:	8c 93       	st	X, r24

	return Local_enuErrorState;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
}
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <ADC_enuDisableTriggeringMode>:
* @brief 		- Disable Triggering mode in ADC
* @param [in] 	- none
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuDisableTriggeringMode(void)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	0f 92       	push	r0
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    2684:	19 82       	std	Y+1, r1	; 0x01
	//Disable Auto Trigger
	ADCSRA &= ~ (1 << ADATE);
    2686:	a6 e2       	ldi	r26, 0x26	; 38
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e6 e2       	ldi	r30, 0x26	; 38
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	8f 7d       	andi	r24, 0xDF	; 223
    2692:	8c 93       	st	X, r24
	return Local_enuErrorState;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <ADC_enuEnableInterruptMode>:
* @brief 		- Enable Interrupt mode in ADC
* @param [in] 	- none
* @retval 		- ErrorState Value Which can be [OK for no error appear ...NOK for errors appear]
*/
ES_T ADC_enuEnableInterruptMode(void)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	0f 92       	push	r0
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    26a8:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (1<<ADIE);
    26aa:	a6 e2       	ldi	r26, 0x26	; 38
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e6 e2       	ldi	r30, 0x26	; 38
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	88 60       	ori	r24, 0x08	; 8
    26b6:	8c 93       	st	X, r24
	return Local_enuErrorState;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <__vector_16>:

ISR(VECTOR_ADC)
{
    26c2:	1f 92       	push	r1
    26c4:	0f 92       	push	r0
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	0f 92       	push	r0
    26ca:	11 24       	eor	r1, r1
    26cc:	2f 93       	push	r18
    26ce:	3f 93       	push	r19
    26d0:	4f 93       	push	r20
    26d2:	5f 93       	push	r21
    26d4:	6f 93       	push	r22
    26d6:	7f 93       	push	r23
    26d8:	8f 93       	push	r24
    26da:	9f 93       	push	r25
    26dc:	af 93       	push	r26
    26de:	bf 93       	push	r27
    26e0:	ef 93       	push	r30
    26e2:	ff 93       	push	r31
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pFunISRfun != NULL)
    26ec:	80 91 da 01 	lds	r24, 0x01DA
    26f0:	90 91 db 01 	lds	r25, 0x01DB
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	49 f0       	breq	.+18     	; 0x270a <__vector_16+0x48>
	{
		ADC_pFunISRfun(ADC_pFunISRparam);
    26f8:	e0 91 da 01 	lds	r30, 0x01DA
    26fc:	f0 91 db 01 	lds	r31, 0x01DB
    2700:	80 91 dc 01 	lds	r24, 0x01DC
    2704:	90 91 dd 01 	lds	r25, 0x01DD
    2708:	09 95       	icall
	}
}
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	ff 91       	pop	r31
    2710:	ef 91       	pop	r30
    2712:	bf 91       	pop	r27
    2714:	af 91       	pop	r26
    2716:	9f 91       	pop	r25
    2718:	8f 91       	pop	r24
    271a:	7f 91       	pop	r23
    271c:	6f 91       	pop	r22
    271e:	5f 91       	pop	r21
    2720:	4f 91       	pop	r20
    2722:	3f 91       	pop	r19
    2724:	2f 91       	pop	r18
    2726:	0f 90       	pop	r0
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	0f 90       	pop	r0
    272c:	1f 90       	pop	r1
    272e:	18 95       	reti

00002730 <SW_enuInit>:
#include "Switch_Config.h"

#include "../../MCAL/DIO/DIO_Interface.h"

ES_T SW_enuInit(SW_T * Copy_PstrSwState)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <SW_enuInit+0x6>
    2736:	00 d0       	rcall	.+0      	; 0x2738 <SW_enuInit+0x8>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9c 83       	std	Y+4, r25	; 0x04
    273e:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    2740:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PstrSwState != NULL)
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	09 f4       	brne	.+2      	; 0x274c <SW_enuInit+0x1c>
    274a:	5d c0       	rjmp	.+186    	; 0x2806 <SW_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    274c:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	55 c0       	rjmp	.+170    	; 0x27fc <SW_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_PstrSwState[Local_u8Iterator].SW_PortID ,Copy_PstrSwState[Local_u8Iterator].SW_PinID,DIO_u8INPUT);
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	c9 01       	movw	r24, r18
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	28 0f       	add	r18, r24
    2760:	39 1f       	adc	r19, r25
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	fc 01       	movw	r30, r24
    2768:	e2 0f       	add	r30, r18
    276a:	f3 1f       	adc	r31, r19
    276c:	40 81       	ld	r20, Z
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	c9 01       	movw	r24, r18
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	28 0f       	add	r18, r24
    277c:	39 1f       	adc	r19, r25
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	fc 01       	movw	r30, r24
    2784:	e2 0f       	add	r30, r18
    2786:	f3 1f       	adc	r31, r19
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	84 2f       	mov	r24, r20
    278c:	69 2f       	mov	r22, r25
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    2794:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PstrSwState[Local_u8Iterator].SW_PortID ,Copy_PstrSwState[Local_u8Iterator].SW_PinID,Copy_PstrSwState[Local_u8Iterator].SW_Status);
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	c9 01       	movw	r24, r18
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	28 0f       	add	r18, r24
    27a4:	39 1f       	adc	r19, r25
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	fc 01       	movw	r30, r24
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	50 81       	ld	r21, Z
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	c9 01       	movw	r24, r18
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	28 0f       	add	r18, r24
    27c0:	39 1f       	adc	r19, r25
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	fc 01       	movw	r30, r24
    27c8:	e2 0f       	add	r30, r18
    27ca:	f3 1f       	adc	r31, r19
    27cc:	41 81       	ldd	r20, Z+1	; 0x01
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	c9 01       	movw	r24, r18
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	28 0f       	add	r18, r24
    27dc:	39 1f       	adc	r19, r25
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	fc 01       	movw	r30, r24
    27e4:	e2 0f       	add	r30, r18
    27e6:	f3 1f       	adc	r31, r19
    27e8:	92 81       	ldd	r25, Z+2	; 0x02
    27ea:	85 2f       	mov	r24, r21
    27ec:	64 2f       	mov	r22, r20
    27ee:	49 2f       	mov	r20, r25
    27f0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    27f4:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	if(Copy_PstrSwState != NULL)
	{
		u8 Local_u8Iterator = 0;
		for(Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	83 30       	cpi	r24, 0x03	; 3
    2800:	08 f4       	brcc	.+2      	; 0x2804 <SW_enuInit+0xd4>
    2802:	a7 cf       	rjmp	.-178    	; 0x2752 <SW_enuInit+0x22>
    2804:	02 c0       	rjmp	.+4      	; 0x280a <SW_enuInit+0xda>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <SW_enuGetState>:

ES_T SW_enuGetState(SW_T * Copy_PstrSwState , u8 * Copy_Pu8SwState)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <SW_enuGetState+0x6>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <SW_enuGetState+0x8>
    2822:	0f 92       	push	r0
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	9b 83       	std	Y+3, r25	; 0x03
    282a:	8a 83       	std	Y+2, r24	; 0x02
    282c:	7d 83       	std	Y+5, r23	; 0x05
    282e:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    2830:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PstrSwState != NULL && Copy_Pu8SwState != NULL)
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	9b 81       	ldd	r25, Y+3	; 0x03
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	91 f0       	breq	.+36     	; 0x285e <SW_enuGetState+0x44>
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	9d 81       	ldd	r25, Y+5	; 0x05
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	71 f0       	breq	.+28     	; 0x285e <SW_enuGetState+0x44>
	{
			Local_enuErrorState = DIO_enuGetPinValue(Copy_PstrSwState->SW_PortID ,Copy_PstrSwState->SW_PinID , Copy_Pu8SwState);
    2842:	ea 81       	ldd	r30, Y+2	; 0x02
    2844:	fb 81       	ldd	r31, Y+3	; 0x03
    2846:	80 81       	ld	r24, Z
    2848:	ea 81       	ldd	r30, Y+2	; 0x02
    284a:	fb 81       	ldd	r31, Y+3	; 0x03
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	2c 81       	ldd	r18, Y+4	; 0x04
    2850:	3d 81       	ldd	r19, Y+5	; 0x05
    2852:	69 2f       	mov	r22, r25
    2854:	a9 01       	movw	r20, r18
    2856:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_enuGetPinValue>
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <SW_enuGetState+0x48>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <LED_enuInit>:
#include "LED_Private.h"

#include "../../MCAL/DIO/DIO_interface.h"

ES_T LED_enuInit(LED_T *Copy_AstrLedConfig)
{
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	00 d0       	rcall	.+0      	; 0x287a <LED_enuInit+0x6>
    287a:	00 d0       	rcall	.+0      	; 0x287c <LED_enuInit+0x8>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    2884:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_AstrLedConfig != NULL)
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	09 f4       	brne	.+2      	; 0x2890 <LED_enuInit+0x1c>
    288e:	23 c1       	rjmp	.+582    	; 0x2ad6 <LED_enuInit+0x262>
	{
		u8 Local_u8Iterator=0;
    2890:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator=0 ; Local_u8Iterator < LED_NUM ; Local_u8Iterator++)
    2892:	19 82       	std	Y+1, r1	; 0x01
    2894:	1b c1       	rjmp	.+566    	; 0x2acc <LED_enuInit+0x258>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8OUTPUT);
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9c 01       	movw	r18, r24
    289e:	22 0f       	add	r18, r18
    28a0:	33 1f       	adc	r19, r19
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	9c 81       	ldd	r25, Y+4	; 0x04
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	40 81       	ld	r20, Z
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9c 01       	movw	r18, r24
    28ba:	22 0f       	add	r18, r18
    28bc:	33 1f       	adc	r19, r19
    28be:	22 0f       	add	r18, r18
    28c0:	33 1f       	adc	r19, r19
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
    28c4:	9c 81       	ldd	r25, Y+4	; 0x04
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 0f       	add	r30, r18
    28ca:	f3 1f       	adc	r31, r19
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	84 2f       	mov	r24, r20
    28d0:	69 2f       	mov	r22, r25
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    28d8:	8a 83       	std	Y+2, r24	; 0x02
			if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_U8SINK)
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9c 01       	movw	r18, r24
    28e2:	22 0f       	add	r18, r18
    28e4:	33 1f       	adc	r19, r19
    28e6:	22 0f       	add	r18, r18
    28e8:	33 1f       	adc	r19, r19
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	fc 01       	movw	r30, r24
    28f0:	e2 0f       	add	r30, r18
    28f2:	f3 1f       	adc	r31, r19
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	88 23       	and	r24, r24
    28f8:	09 f0       	breq	.+2      	; 0x28fc <LED_enuInit+0x88>
    28fa:	69 c0       	rjmp	.+210    	; 0x29ce <LED_enuInit+0x15a>
			{
				if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8ON)
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	88 2f       	mov	r24, r24
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9c 01       	movw	r18, r24
    2904:	22 0f       	add	r18, r18
    2906:	33 1f       	adc	r19, r19
    2908:	22 0f       	add	r18, r18
    290a:	33 1f       	adc	r19, r19
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	fc 01       	movw	r30, r24
    2912:	e2 0f       	add	r30, r18
    2914:	f3 1f       	adc	r31, r19
    2916:	83 81       	ldd	r24, Z+3	; 0x03
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	19 f5       	brne	.+70     	; 0x2962 <LED_enuInit+0xee>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8LOW);
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9c 01       	movw	r18, r24
    2924:	22 0f       	add	r18, r18
    2926:	33 1f       	adc	r19, r19
    2928:	22 0f       	add	r18, r18
    292a:	33 1f       	adc	r19, r19
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	fc 01       	movw	r30, r24
    2932:	e2 0f       	add	r30, r18
    2934:	f3 1f       	adc	r31, r19
    2936:	40 81       	ld	r20, Z
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9c 01       	movw	r18, r24
    2940:	22 0f       	add	r18, r18
    2942:	33 1f       	adc	r19, r19
    2944:	22 0f       	add	r18, r18
    2946:	33 1f       	adc	r19, r19
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	fc 01       	movw	r30, r24
    294e:	e2 0f       	add	r30, r18
    2950:	f3 1f       	adc	r31, r19
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	84 2f       	mov	r24, r20
    2956:	69 2f       	mov	r22, r25
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    295e:	8a 83       	std	Y+2, r24	; 0x02
    2960:	b2 c0       	rjmp	.+356    	; 0x2ac6 <LED_enuInit+0x252>
				}
				else if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8OFF)
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	9c 01       	movw	r18, r24
    296a:	22 0f       	add	r18, r18
    296c:	33 1f       	adc	r19, r19
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	fc 01       	movw	r30, r24
    2978:	e2 0f       	add	r30, r18
    297a:	f3 1f       	adc	r31, r19
    297c:	83 81       	ldd	r24, Z+3	; 0x03
    297e:	88 23       	and	r24, r24
    2980:	19 f5       	brne	.+70     	; 0x29c8 <LED_enuInit+0x154>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8HIGH);
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9c 01       	movw	r18, r24
    298a:	22 0f       	add	r18, r18
    298c:	33 1f       	adc	r19, r19
    298e:	22 0f       	add	r18, r18
    2990:	33 1f       	adc	r19, r19
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	fc 01       	movw	r30, r24
    2998:	e2 0f       	add	r30, r18
    299a:	f3 1f       	adc	r31, r19
    299c:	40 81       	ld	r20, Z
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 01       	movw	r18, r24
    29a6:	22 0f       	add	r18, r18
    29a8:	33 1f       	adc	r19, r19
    29aa:	22 0f       	add	r18, r18
    29ac:	33 1f       	adc	r19, r19
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	fc 01       	movw	r30, r24
    29b4:	e2 0f       	add	r30, r18
    29b6:	f3 1f       	adc	r31, r19
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	84 2f       	mov	r24, r20
    29bc:	69 2f       	mov	r22, r25
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    29c4:	8a 83       	std	Y+2, r24	; 0x02
    29c6:	7f c0       	rjmp	.+254    	; 0x2ac6 <LED_enuInit+0x252>
				}
				else
				{
					Local_enuErrorState = ES_OUTOFRANGE;
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	8a 83       	std	Y+2, r24	; 0x02
    29cc:	7c c0       	rjmp	.+248    	; 0x2ac6 <LED_enuInit+0x252>
				}
			}
			else if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_U8SOURCE)
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9c 01       	movw	r18, r24
    29d6:	22 0f       	add	r18, r18
    29d8:	33 1f       	adc	r19, r19
    29da:	22 0f       	add	r18, r18
    29dc:	33 1f       	adc	r19, r19
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	fc 01       	movw	r30, r24
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <LED_enuInit+0x17c>
    29ee:	69 c0       	rjmp	.+210    	; 0x2ac2 <LED_enuInit+0x24e>
			{
				if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8ON)
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9c 01       	movw	r18, r24
    29f8:	22 0f       	add	r18, r18
    29fa:	33 1f       	adc	r19, r19
    29fc:	22 0f       	add	r18, r18
    29fe:	33 1f       	adc	r19, r19
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	83 81       	ldd	r24, Z+3	; 0x03
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	19 f5       	brne	.+70     	; 0x2a56 <LED_enuInit+0x1e2>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8HIGH);
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	88 2f       	mov	r24, r24
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9c 01       	movw	r18, r24
    2a18:	22 0f       	add	r18, r18
    2a1a:	33 1f       	adc	r19, r19
    2a1c:	22 0f       	add	r18, r18
    2a1e:	33 1f       	adc	r19, r19
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	fc 01       	movw	r30, r24
    2a26:	e2 0f       	add	r30, r18
    2a28:	f3 1f       	adc	r31, r19
    2a2a:	40 81       	ld	r20, Z
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	88 2f       	mov	r24, r24
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 01       	movw	r18, r24
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	22 0f       	add	r18, r18
    2a3a:	33 1f       	adc	r19, r19
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	fc 01       	movw	r30, r24
    2a42:	e2 0f       	add	r30, r18
    2a44:	f3 1f       	adc	r31, r19
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	84 2f       	mov	r24, r20
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2a52:	8a 83       	std	Y+2, r24	; 0x02
    2a54:	38 c0       	rjmp	.+112    	; 0x2ac6 <LED_enuInit+0x252>
				}
				else if(Copy_AstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_U8OFF)
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	9c 01       	movw	r18, r24
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e2 0f       	add	r30, r18
    2a6e:	f3 1f       	adc	r31, r19
    2a70:	83 81       	ldd	r24, Z+3	; 0x03
    2a72:	88 23       	and	r24, r24
    2a74:	19 f5       	brne	.+70     	; 0x2abc <LED_enuInit+0x248>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Local_u8Iterator].LED_u8PortID ,Copy_AstrLedConfig[Local_u8Iterator].LED_u8PinID,DIO_u8LOW);
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9c 01       	movw	r18, r24
    2a7e:	22 0f       	add	r18, r18
    2a80:	33 1f       	adc	r19, r19
    2a82:	22 0f       	add	r18, r18
    2a84:	33 1f       	adc	r19, r19
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	e2 0f       	add	r30, r18
    2a8e:	f3 1f       	adc	r31, r19
    2a90:	40 81       	ld	r20, Z
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 01       	movw	r18, r24
    2a9a:	22 0f       	add	r18, r18
    2a9c:	33 1f       	adc	r19, r19
    2a9e:	22 0f       	add	r18, r18
    2aa0:	33 1f       	adc	r19, r19
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e2 0f       	add	r30, r18
    2aaa:	f3 1f       	adc	r31, r19
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	84 2f       	mov	r24, r20
    2ab0:	69 2f       	mov	r22, r25
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
    2aba:	05 c0       	rjmp	.+10     	; 0x2ac6 <LED_enuInit+0x252>
				}
				else
				{
					Local_enuErrorState = ES_OUTOFRANGE;
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	8a 83       	std	Y+2, r24	; 0x02
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <LED_enuInit+0x252>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_T Local_enuErrorState = ES_NOK;
	if(Copy_AstrLedConfig != NULL)
	{
		u8 Local_u8Iterator=0;
		for(Local_u8Iterator=0 ; Local_u8Iterator < LED_NUM ; Local_u8Iterator++)
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	8f 5f       	subi	r24, 0xFF	; 255
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	83 30       	cpi	r24, 0x03	; 3
    2ad0:	08 f4       	brcc	.+2      	; 0x2ad4 <LED_enuInit+0x260>
    2ad2:	e1 ce       	rjmp	.-574    	; 0x2896 <LED_enuInit+0x22>
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <LED_enuInit+0x266>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <LED_enuTurnOn>:

ES_T LED_enuTurnOn(LED_T *Copy_AstrLedConfig , u8 Copy_u8LedNum)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <LED_enuTurnOn+0x6>
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <LED_enuTurnOn+0x8>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9b 83       	std	Y+3, r25	; 0x03
    2af8:	8a 83       	std	Y+2, r24	; 0x02
    2afa:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    2afc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrLedConfig != NULL)
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <LED_enuTurnOn+0x1e>
    2b06:	70 c0       	rjmp	.+224    	; 0x2be8 <LED_enuTurnOn+0xfe>
	{
		if(Copy_u8LedNum < LED_NUM)
    2b08:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0a:	83 30       	cpi	r24, 0x03	; 3
    2b0c:	08 f0       	brcs	.+2      	; 0x2b10 <LED_enuTurnOn+0x26>
    2b0e:	69 c0       	rjmp	.+210    	; 0x2be2 <LED_enuTurnOn+0xf8>
		{
			if(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SINK)
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9c 01       	movw	r18, r24
    2b18:	22 0f       	add	r18, r18
    2b1a:	33 1f       	adc	r19, r19
    2b1c:	22 0f       	add	r18, r18
    2b1e:	33 1f       	adc	r19, r19
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	9b 81       	ldd	r25, Y+3	; 0x03
    2b24:	fc 01       	movw	r30, r24
    2b26:	e2 0f       	add	r30, r18
    2b28:	f3 1f       	adc	r31, r19
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	88 23       	and	r24, r24
    2b2e:	19 f5       	brne	.+70     	; 0x2b76 <LED_enuTurnOn+0x8c>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8LOW);
    2b30:	8c 81       	ldd	r24, Y+4	; 0x04
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9c 01       	movw	r18, r24
    2b38:	22 0f       	add	r18, r18
    2b3a:	33 1f       	adc	r19, r19
    2b3c:	22 0f       	add	r18, r18
    2b3e:	33 1f       	adc	r19, r19
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	fc 01       	movw	r30, r24
    2b46:	e2 0f       	add	r30, r18
    2b48:	f3 1f       	adc	r31, r19
    2b4a:	40 81       	ld	r20, Z
    2b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9c 01       	movw	r18, r24
    2b54:	22 0f       	add	r18, r18
    2b56:	33 1f       	adc	r19, r19
    2b58:	22 0f       	add	r18, r18
    2b5a:	33 1f       	adc	r19, r19
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	84 2f       	mov	r24, r20
    2b6a:	69 2f       	mov	r22, r25
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	3b c0       	rjmp	.+118    	; 0x2bec <LED_enuTurnOn+0x102>
			}
			else if (Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SOURCE)
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	9c 01       	movw	r18, r24
    2b7e:	22 0f       	add	r18, r18
    2b80:	33 1f       	adc	r19, r19
    2b82:	22 0f       	add	r18, r18
    2b84:	33 1f       	adc	r19, r19
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e2 0f       	add	r30, r18
    2b8e:	f3 1f       	adc	r31, r19
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	19 f5       	brne	.+70     	; 0x2bdc <LED_enuTurnOn+0xf2>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8HIGH);
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	88 2f       	mov	r24, r24
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9c 01       	movw	r18, r24
    2b9e:	22 0f       	add	r18, r18
    2ba0:	33 1f       	adc	r19, r19
    2ba2:	22 0f       	add	r18, r18
    2ba4:	33 1f       	adc	r19, r19
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	fc 01       	movw	r30, r24
    2bac:	e2 0f       	add	r30, r18
    2bae:	f3 1f       	adc	r31, r19
    2bb0:	40 81       	ld	r20, Z
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	88 2f       	mov	r24, r24
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9c 01       	movw	r18, r24
    2bba:	22 0f       	add	r18, r18
    2bbc:	33 1f       	adc	r19, r19
    2bbe:	22 0f       	add	r18, r18
    2bc0:	33 1f       	adc	r19, r19
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	e2 0f       	add	r30, r18
    2bca:	f3 1f       	adc	r31, r19
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	84 2f       	mov	r24, r20
    2bd0:	69 2f       	mov	r22, r25
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	08 c0       	rjmp	.+16     	; 0x2bec <LED_enuTurnOn+0x102>
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	05 c0       	rjmp	.+10     	; 0x2bec <LED_enuTurnOn+0x102>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    2be2:	83 e0       	ldi	r24, 0x03	; 3
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <LED_enuTurnOn+0x102>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <LED_enuTurnOff>:

ES_T LED_enuTurnOff(LED_T *Copy_AstrLedConfig , u8 Copy_u8LedNum)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <LED_enuTurnOff+0x6>
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <LED_enuTurnOff+0x8>
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	9b 83       	std	Y+3, r25	; 0x03
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
    2c0c:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    2c0e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrLedConfig != NULL)
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <LED_enuTurnOff+0x1e>
    2c18:	70 c0       	rjmp	.+224    	; 0x2cfa <LED_enuTurnOff+0xfe>
	{
		if(Copy_u8LedNum < LED_NUM)
    2c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1c:	83 30       	cpi	r24, 0x03	; 3
    2c1e:	08 f0       	brcs	.+2      	; 0x2c22 <LED_enuTurnOff+0x26>
    2c20:	69 c0       	rjmp	.+210    	; 0x2cf4 <LED_enuTurnOff+0xf8>
		{
			if(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SINK)
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	9c 01       	movw	r18, r24
    2c2a:	22 0f       	add	r18, r18
    2c2c:	33 1f       	adc	r19, r19
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	fc 01       	movw	r30, r24
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	88 23       	and	r24, r24
    2c40:	19 f5       	brne	.+70     	; 0x2c88 <LED_enuTurnOff+0x8c>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8HIGH);
    2c42:	8c 81       	ldd	r24, Y+4	; 0x04
    2c44:	88 2f       	mov	r24, r24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	9c 01       	movw	r18, r24
    2c4a:	22 0f       	add	r18, r18
    2c4c:	33 1f       	adc	r19, r19
    2c4e:	22 0f       	add	r18, r18
    2c50:	33 1f       	adc	r19, r19
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	fc 01       	movw	r30, r24
    2c58:	e2 0f       	add	r30, r18
    2c5a:	f3 1f       	adc	r31, r19
    2c5c:	40 81       	ld	r20, Z
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9c 01       	movw	r18, r24
    2c66:	22 0f       	add	r18, r18
    2c68:	33 1f       	adc	r19, r19
    2c6a:	22 0f       	add	r18, r18
    2c6c:	33 1f       	adc	r19, r19
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	fc 01       	movw	r30, r24
    2c74:	e2 0f       	add	r30, r18
    2c76:	f3 1f       	adc	r31, r19
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	84 2f       	mov	r24, r20
    2c7c:	69 2f       	mov	r22, r25
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2c84:	89 83       	std	Y+1, r24	; 0x01
    2c86:	3b c0       	rjmp	.+118    	; 0x2cfe <LED_enuTurnOff+0x102>
			}
			else if (Copy_AstrLedConfig[Copy_u8LedNum].LED_u8Connection == LED_U8SOURCE)
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 01       	movw	r18, r24
    2c90:	22 0f       	add	r18, r18
    2c92:	33 1f       	adc	r19, r19
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	e2 0f       	add	r30, r18
    2ca0:	f3 1f       	adc	r31, r19
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	81 30       	cpi	r24, 0x01	; 1
    2ca6:	19 f5       	brne	.+70     	; 0x2cee <LED_enuTurnOff+0xf2>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID ,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,DIO_u8LOW);
    2ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 01       	movw	r18, r24
    2cb0:	22 0f       	add	r18, r18
    2cb2:	33 1f       	adc	r19, r19
    2cb4:	22 0f       	add	r18, r18
    2cb6:	33 1f       	adc	r19, r19
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	40 81       	ld	r20, Z
    2cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9c 01       	movw	r18, r24
    2ccc:	22 0f       	add	r18, r18
    2cce:	33 1f       	adc	r19, r19
    2cd0:	22 0f       	add	r18, r18
    2cd2:	33 1f       	adc	r19, r19
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	fc 01       	movw	r30, r24
    2cda:	e2 0f       	add	r30, r18
    2cdc:	f3 1f       	adc	r31, r19
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	84 2f       	mov	r24, r20
    2ce2:	69 2f       	mov	r22, r25
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	08 c0       	rjmp	.+16     	; 0x2cfe <LED_enuTurnOff+0x102>
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    2cee:	83 e0       	ldi	r24, 0x03	; 3
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	05 c0       	rjmp	.+10     	; 0x2cfe <LED_enuTurnOff+0x102>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <LED_enuTurnOff+0x102>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <LED_enuGetState>:

ES_T LED_enuGetState(LED_T *Copy_AstrLedConfig ,u8 Copy_u8LedNum, u8 *Copy_u8LedState)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <LED_enuGetState+0x6>
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <LED_enuGetState+0x8>
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <LED_enuGetState+0xa>
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	9b 83       	std	Y+3, r25	; 0x03
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
    2d20:	6c 83       	std	Y+4, r22	; 0x04
    2d22:	5e 83       	std	Y+6, r21	; 0x06
    2d24:	4d 83       	std	Y+5, r20	; 0x05
	ES_T Local_enuErrorState = ES_NOK;
    2d26:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_AstrLedConfig != NULL && Copy_u8LedState != NULL)
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	79 f1       	breq	.+94     	; 0x2d8e <LED_enuGetState+0x80>
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	59 f1       	breq	.+86     	; 0x2d8e <LED_enuGetState+0x80>
    {
    	if(Copy_u8LedNum < LED_NUM)
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	83 30       	cpi	r24, 0x03	; 3
    2d3c:	28 f5       	brcc	.+74     	; 0x2d88 <LED_enuGetState+0x7a>
    	{
    	Local_enuErrorState = DIO_enuGetPinValue(Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PortID,Copy_AstrLedConfig[Copy_u8LedNum].LED_u8PinID,Copy_u8LedState);
    2d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d40:	88 2f       	mov	r24, r24
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9c 01       	movw	r18, r24
    2d46:	22 0f       	add	r18, r18
    2d48:	33 1f       	adc	r19, r19
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	9b 81       	ldd	r25, Y+3	; 0x03
    2d52:	fc 01       	movw	r30, r24
    2d54:	e2 0f       	add	r30, r18
    2d56:	f3 1f       	adc	r31, r19
    2d58:	40 81       	ld	r20, Z
    2d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9c 01       	movw	r18, r24
    2d62:	22 0f       	add	r18, r18
    2d64:	33 1f       	adc	r19, r19
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	2d 81       	ldd	r18, Y+5	; 0x05
    2d78:	3e 81       	ldd	r19, Y+6	; 0x06
    2d7a:	84 2f       	mov	r24, r20
    2d7c:	69 2f       	mov	r22, r25
    2d7e:	a9 01       	movw	r20, r18
    2d80:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DIO_enuGetPinValue>
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	05 c0       	rjmp	.+10     	; 0x2d92 <LED_enuGetState+0x84>
    	}
    	else
    	{
    		Local_enuErrorState = ES_OUTOFRANGE;
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <LED_enuGetState+0x84>
    	}
    }
    else
    {
    	Local_enuErrorState = ES_NULL_POINTER;
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_enuErrorState;
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d94:	26 96       	adiw	r28, 0x06	; 6
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <LCD_enuInit>:
#include "util/delay.h"

extern LCD_T  LCD_AstrLCDConfig [LCD_NUM];

ES_T LCD_enuInit(LCD_T *Copy_PsrtLCDConfig)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	ae 97       	sbiw	r28, 0x2e	; 46
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	9e a7       	std	Y+46, r25	; 0x2e
    2dbc:	8d a7       	std	Y+45, r24	; 0x2d
	ES_T Local_enuErrorState = ES_NOK;
    2dbe:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_u8Iterator=0;
    2dc0:	1b a6       	std	Y+43, r1	; 0x2b
	if(Copy_PsrtLCDConfig != NULL)
    2dc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <LCD_enuInit+0x26>
    2dca:	f2 c3       	rjmp	.+2020   	; 0x35b0 <LCD_enuInit+0x80a>
	{
		for(Local_u8Iterator=0 ; Local_u8Iterator < LCD_NUM;Local_u8Iterator++)
    2dcc:	1b a6       	std	Y+43, r1	; 0x2b
    2dce:	e9 c3       	rjmp	.+2002   	; 0x35a2 <LCD_enuInit+0x7fc>
		{
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RSPort,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RSPin, DIO_u8OUTPUT);
    2dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	c9 01       	movw	r24, r18
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	82 0f       	add	r24, r18
    2dde:	93 1f       	adc	r25, r19
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	ac 01       	movw	r20, r24
    2dee:	42 1b       	sub	r20, r18
    2df0:	53 0b       	sbc	r21, r19
    2df2:	9a 01       	movw	r18, r20
    2df4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2df6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2df8:	fc 01       	movw	r30, r24
    2dfa:	e2 0f       	add	r30, r18
    2dfc:	f3 1f       	adc	r31, r19
    2dfe:	40 81       	ld	r20, Z
    2e00:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	c9 01       	movw	r24, r18
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	82 0f       	add	r24, r18
    2e0e:	93 1f       	adc	r25, r19
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	62 1b       	sub	r22, r18
    2e20:	73 0b       	sbc	r23, r19
    2e22:	9b 01       	movw	r18, r22
    2e24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e28:	fc 01       	movw	r30, r24
    2e2a:	e2 0f       	add	r30, r18
    2e2c:	f3 1f       	adc	r31, r19
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	84 2f       	mov	r24, r20
    2e32:	69 2f       	mov	r22, r25
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RWPort,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8RWPin, DIO_u8OUTPUT);
    2e3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	c9 01       	movw	r24, r18
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	82 0f       	add	r24, r18
    2e48:	93 1f       	adc	r25, r19
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	ac 01       	movw	r20, r24
    2e58:	42 1b       	sub	r20, r18
    2e5a:	53 0b       	sbc	r21, r19
    2e5c:	9a 01       	movw	r18, r20
    2e5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e60:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e62:	fc 01       	movw	r30, r24
    2e64:	e2 0f       	add	r30, r18
    2e66:	f3 1f       	adc	r31, r19
    2e68:	42 81       	ldd	r20, Z+2	; 0x02
    2e6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	c9 01       	movw	r24, r18
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	82 0f       	add	r24, r18
    2e78:	93 1f       	adc	r25, r19
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	bc 01       	movw	r22, r24
    2e88:	62 1b       	sub	r22, r18
    2e8a:	73 0b       	sbc	r23, r19
    2e8c:	9b 01       	movw	r18, r22
    2e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e90:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e92:	fc 01       	movw	r30, r24
    2e94:	e2 0f       	add	r30, r18
    2e96:	f3 1f       	adc	r31, r19
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	84 2f       	mov	r24, r20
    2e9c:	69 2f       	mov	r22, r25
    2e9e:	41 e0       	ldi	r20, 0x01	; 1
    2ea0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8ENPort,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8ENPin, DIO_u8OUTPUT);
    2ea4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	c9 01       	movw	r24, r18
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	82 0f       	add	r24, r18
    2eb2:	93 1f       	adc	r25, r19
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	ac 01       	movw	r20, r24
    2ec2:	42 1b       	sub	r20, r18
    2ec4:	53 0b       	sbc	r21, r19
    2ec6:	9a 01       	movw	r18, r20
    2ec8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eca:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e2 0f       	add	r30, r18
    2ed0:	f3 1f       	adc	r31, r19
    2ed2:	44 81       	ldd	r20, Z+4	; 0x04
    2ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	c9 01       	movw	r24, r18
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	82 0f       	add	r24, r18
    2ee2:	93 1f       	adc	r25, r19
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	62 1b       	sub	r22, r18
    2ef4:	73 0b       	sbc	r23, r19
    2ef6:	9b 01       	movw	r18, r22
    2ef8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2efa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2efc:	fc 01       	movw	r30, r24
    2efe:	e2 0f       	add	r30, r18
    2f00:	f3 1f       	adc	r31, r19
    2f02:	95 81       	ldd	r25, Z+5	; 0x05
    2f04:	84 2f       	mov	r24, r20
    2f06:	69 2f       	mov	r22, r25
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D7Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D7Pin, DIO_u8OUTPUT);
    2f0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	c9 01       	movw	r24, r18
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	82 0f       	add	r24, r18
    2f1c:	93 1f       	adc	r25, r19
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	88 0f       	add	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	ac 01       	movw	r20, r24
    2f2c:	42 1b       	sub	r20, r18
    2f2e:	53 0b       	sbc	r21, r19
    2f30:	9a 01       	movw	r18, r20
    2f32:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f34:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f36:	fc 01       	movw	r30, r24
    2f38:	e2 0f       	add	r30, r18
    2f3a:	f3 1f       	adc	r31, r19
    2f3c:	46 81       	ldd	r20, Z+6	; 0x06
    2f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	c9 01       	movw	r24, r18
    2f46:	88 0f       	add	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	82 0f       	add	r24, r18
    2f4c:	93 1f       	adc	r25, r19
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	62 1b       	sub	r22, r18
    2f5e:	73 0b       	sbc	r23, r19
    2f60:	9b 01       	movw	r18, r22
    2f62:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f64:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f66:	fc 01       	movw	r30, r24
    2f68:	e2 0f       	add	r30, r18
    2f6a:	f3 1f       	adc	r31, r19
    2f6c:	97 81       	ldd	r25, Z+7	; 0x07
    2f6e:	84 2f       	mov	r24, r20
    2f70:	69 2f       	mov	r22, r25
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D6Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D6Pin, DIO_u8OUTPUT);
    2f78:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	c9 01       	movw	r24, r18
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	82 0f       	add	r24, r18
    2f86:	93 1f       	adc	r25, r19
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	ac 01       	movw	r20, r24
    2f96:	42 1b       	sub	r20, r18
    2f98:	53 0b       	sbc	r21, r19
    2f9a:	9a 01       	movw	r18, r20
    2f9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e2 0f       	add	r30, r18
    2fa4:	f3 1f       	adc	r31, r19
    2fa6:	40 85       	ldd	r20, Z+8	; 0x08
    2fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	c9 01       	movw	r24, r18
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	82 0f       	add	r24, r18
    2fb6:	93 1f       	adc	r25, r19
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	62 1b       	sub	r22, r18
    2fc8:	73 0b       	sbc	r23, r19
    2fca:	9b 01       	movw	r18, r22
    2fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	e2 0f       	add	r30, r18
    2fd4:	f3 1f       	adc	r31, r19
    2fd6:	91 85       	ldd	r25, Z+9	; 0x09
    2fd8:	84 2f       	mov	r24, r20
    2fda:	69 2f       	mov	r22, r25
    2fdc:	41 e0       	ldi	r20, 0x01	; 1
    2fde:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D5Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D5Pin, DIO_u8OUTPUT);
    2fe2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	c9 01       	movw	r24, r18
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	82 0f       	add	r24, r18
    2ff0:	93 1f       	adc	r25, r19
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	ac 01       	movw	r20, r24
    3000:	42 1b       	sub	r20, r18
    3002:	53 0b       	sbc	r21, r19
    3004:	9a 01       	movw	r18, r20
    3006:	8d a5       	ldd	r24, Y+45	; 0x2d
    3008:	9e a5       	ldd	r25, Y+46	; 0x2e
    300a:	fc 01       	movw	r30, r24
    300c:	e2 0f       	add	r30, r18
    300e:	f3 1f       	adc	r31, r19
    3010:	42 85       	ldd	r20, Z+10	; 0x0a
    3012:	8b a5       	ldd	r24, Y+43	; 0x2b
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	c9 01       	movw	r24, r18
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	82 0f       	add	r24, r18
    3020:	93 1f       	adc	r25, r19
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	bc 01       	movw	r22, r24
    3030:	62 1b       	sub	r22, r18
    3032:	73 0b       	sbc	r23, r19
    3034:	9b 01       	movw	r18, r22
    3036:	8d a5       	ldd	r24, Y+45	; 0x2d
    3038:	9e a5       	ldd	r25, Y+46	; 0x2e
    303a:	fc 01       	movw	r30, r24
    303c:	e2 0f       	add	r30, r18
    303e:	f3 1f       	adc	r31, r19
    3040:	93 85       	ldd	r25, Z+11	; 0x0b
    3042:	84 2f       	mov	r24, r20
    3044:	69 2f       	mov	r22, r25
    3046:	41 e0       	ldi	r20, 0x01	; 1
    3048:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D4Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D4Pin, DIO_u8OUTPUT);
    304c:	8b a5       	ldd	r24, Y+43	; 0x2b
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	c9 01       	movw	r24, r18
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	82 0f       	add	r24, r18
    305a:	93 1f       	adc	r25, r19
    305c:	88 0f       	add	r24, r24
    305e:	99 1f       	adc	r25, r25
    3060:	88 0f       	add	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	ac 01       	movw	r20, r24
    306a:	42 1b       	sub	r20, r18
    306c:	53 0b       	sbc	r21, r19
    306e:	9a 01       	movw	r18, r20
    3070:	8d a5       	ldd	r24, Y+45	; 0x2d
    3072:	9e a5       	ldd	r25, Y+46	; 0x2e
    3074:	fc 01       	movw	r30, r24
    3076:	e2 0f       	add	r30, r18
    3078:	f3 1f       	adc	r31, r19
    307a:	44 85       	ldd	r20, Z+12	; 0x0c
    307c:	8b a5       	ldd	r24, Y+43	; 0x2b
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	c9 01       	movw	r24, r18
    3084:	88 0f       	add	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	82 0f       	add	r24, r18
    308a:	93 1f       	adc	r25, r19
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	bc 01       	movw	r22, r24
    309a:	62 1b       	sub	r22, r18
    309c:	73 0b       	sbc	r23, r19
    309e:	9b 01       	movw	r18, r22
    30a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    30a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    30a4:	fc 01       	movw	r30, r24
    30a6:	e2 0f       	add	r30, r18
    30a8:	f3 1f       	adc	r31, r19
    30aa:	95 85       	ldd	r25, Z+13	; 0x0d
    30ac:	84 2f       	mov	r24, r20
    30ae:	69 2f       	mov	r22, r25
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	a0 e2       	ldi	r26, 0x20	; 32
    30bc:	b2 e4       	ldi	r27, 0x42	; 66
    30be:	8f a3       	std	Y+39, r24	; 0x27
    30c0:	98 a7       	std	Y+40, r25	; 0x28
    30c2:	a9 a7       	std	Y+41, r26	; 0x29
    30c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c6:	6f a1       	ldd	r22, Y+39	; 0x27
    30c8:	78 a5       	ldd	r23, Y+40	; 0x28
    30ca:	89 a5       	ldd	r24, Y+41	; 0x29
    30cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4a ef       	ldi	r20, 0xFA	; 250
    30d4:	53 e4       	ldi	r21, 0x43	; 67
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8b a3       	std	Y+35, r24	; 0x23
    30e0:	9c a3       	std	Y+36, r25	; 0x24
    30e2:	ad a3       	std	Y+37, r26	; 0x25
    30e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30e6:	6b a1       	ldd	r22, Y+35	; 0x23
    30e8:	7c a1       	ldd	r23, Y+36	; 0x24
    30ea:	8d a1       	ldd	r24, Y+37	; 0x25
    30ec:	9e a1       	ldd	r25, Y+38	; 0x26
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e8       	ldi	r20, 0x80	; 128
    30f4:	5f e3       	ldi	r21, 0x3F	; 63
    30f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fa:	88 23       	and	r24, r24
    30fc:	2c f4       	brge	.+10     	; 0x3108 <LCD_enuInit+0x362>
		__ticks = 1;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9a a3       	std	Y+34, r25	; 0x22
    3104:	89 a3       	std	Y+33, r24	; 0x21
    3106:	3f c0       	rjmp	.+126    	; 0x3186 <LCD_enuInit+0x3e0>
	else if (__tmp > 65535)
    3108:	6b a1       	ldd	r22, Y+35	; 0x23
    310a:	7c a1       	ldd	r23, Y+36	; 0x24
    310c:	8d a1       	ldd	r24, Y+37	; 0x25
    310e:	9e a1       	ldd	r25, Y+38	; 0x26
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	4c f5       	brge	.+82     	; 0x3172 <LCD_enuInit+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3120:	6f a1       	ldd	r22, Y+39	; 0x27
    3122:	78 a5       	ldd	r23, Y+40	; 0x28
    3124:	89 a5       	ldd	r24, Y+41	; 0x29
    3126:	9a a5       	ldd	r25, Y+42	; 0x2a
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9a a3       	std	Y+34, r25	; 0x22
    3146:	89 a3       	std	Y+33, r24	; 0x21
    3148:	0f c0       	rjmp	.+30     	; 0x3168 <LCD_enuInit+0x3c2>
    314a:	82 e3       	ldi	r24, 0x32	; 50
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	98 a3       	std	Y+32, r25	; 0x20
    3150:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3154:	98 a1       	ldd	r25, Y+32	; 0x20
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <LCD_enuInit+0x3b0>
    315a:	98 a3       	std	Y+32, r25	; 0x20
    315c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	89 a1       	ldd	r24, Y+33	; 0x21
    3160:	9a a1       	ldd	r25, Y+34	; 0x22
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	9a a3       	std	Y+34, r25	; 0x22
    3166:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3168:	89 a1       	ldd	r24, Y+33	; 0x21
    316a:	9a a1       	ldd	r25, Y+34	; 0x22
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	69 f7       	brne	.-38     	; 0x314a <LCD_enuInit+0x3a4>
    3170:	14 c0       	rjmp	.+40     	; 0x319a <LCD_enuInit+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3172:	6b a1       	ldd	r22, Y+35	; 0x23
    3174:	7c a1       	ldd	r23, Y+36	; 0x24
    3176:	8d a1       	ldd	r24, Y+37	; 0x25
    3178:	9e a1       	ldd	r25, Y+38	; 0x26
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9a a3       	std	Y+34, r25	; 0x22
    3184:	89 a3       	std	Y+33, r24	; 0x21
    3186:	89 a1       	ldd	r24, Y+33	; 0x21
    3188:	9a a1       	ldd	r25, Y+34	; 0x22
    318a:	9e 8f       	std	Y+30, r25	; 0x1e
    318c:	8d 8f       	std	Y+29, r24	; 0x1d
    318e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_enuInit+0x3ec>
    3196:	9e 8f       	std	Y+30, r25	; 0x1e
    3198:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(40);

			if(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8LCDMode==EIGHT_BIT)
    319a:	8b a5       	ldd	r24, Y+43	; 0x2b
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	c9 01       	movw	r24, r18
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	82 0f       	add	r24, r18
    31a8:	93 1f       	adc	r25, r19
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	ac 01       	movw	r20, r24
    31b8:	42 1b       	sub	r20, r18
    31ba:	53 0b       	sbc	r21, r19
    31bc:	9a 01       	movw	r18, r20
    31be:	8d a5       	ldd	r24, Y+45	; 0x2d
    31c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    31c2:	fc 01       	movw	r30, r24
    31c4:	e2 0f       	add	r30, r18
    31c6:	f3 1f       	adc	r31, r19
    31c8:	86 89       	ldd	r24, Z+22	; 0x16
    31ca:	88 30       	cpi	r24, 0x08	; 8
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <LCD_enuInit+0x42a>
    31ce:	d9 c0       	rjmp	.+434    	; 0x3382 <LCD_enuInit+0x5dc>
			{
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D3Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D3Pin, DIO_u8OUTPUT);
    31d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c9 01       	movw	r24, r18
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	82 0f       	add	r24, r18
    31de:	93 1f       	adc	r25, r19
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	bc 01       	movw	r22, r24
    31ee:	62 1b       	sub	r22, r18
    31f0:	73 0b       	sbc	r23, r19
    31f2:	9b 01       	movw	r18, r22
    31f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    31f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    31f8:	fc 01       	movw	r30, r24
    31fa:	e2 0f       	add	r30, r18
    31fc:	f3 1f       	adc	r31, r19
    31fe:	46 85       	ldd	r20, Z+14	; 0x0e
    3200:	8b a5       	ldd	r24, Y+43	; 0x2b
    3202:	28 2f       	mov	r18, r24
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	c9 01       	movw	r24, r18
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	82 0f       	add	r24, r18
    320e:	93 1f       	adc	r25, r19
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	bc 01       	movw	r22, r24
    321e:	62 1b       	sub	r22, r18
    3220:	73 0b       	sbc	r23, r19
    3222:	9b 01       	movw	r18, r22
    3224:	8d a5       	ldd	r24, Y+45	; 0x2d
    3226:	9e a5       	ldd	r25, Y+46	; 0x2e
    3228:	fc 01       	movw	r30, r24
    322a:	e2 0f       	add	r30, r18
    322c:	f3 1f       	adc	r31, r19
    322e:	97 85       	ldd	r25, Z+15	; 0x0f
    3230:	84 2f       	mov	r24, r20
    3232:	69 2f       	mov	r22, r25
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D2Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D2Pin, DIO_u8OUTPUT);
    323a:	8b a5       	ldd	r24, Y+43	; 0x2b
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	c9 01       	movw	r24, r18
    3242:	88 0f       	add	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	82 0f       	add	r24, r18
    3248:	93 1f       	adc	r25, r19
    324a:	88 0f       	add	r24, r24
    324c:	99 1f       	adc	r25, r25
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	ac 01       	movw	r20, r24
    3258:	42 1b       	sub	r20, r18
    325a:	53 0b       	sbc	r21, r19
    325c:	9a 01       	movw	r18, r20
    325e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3260:	9e a5       	ldd	r25, Y+46	; 0x2e
    3262:	fc 01       	movw	r30, r24
    3264:	e2 0f       	add	r30, r18
    3266:	f3 1f       	adc	r31, r19
    3268:	40 89       	ldd	r20, Z+16	; 0x10
    326a:	8b a5       	ldd	r24, Y+43	; 0x2b
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	c9 01       	movw	r24, r18
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	82 0f       	add	r24, r18
    3278:	93 1f       	adc	r25, r19
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	bc 01       	movw	r22, r24
    3288:	62 1b       	sub	r22, r18
    328a:	73 0b       	sbc	r23, r19
    328c:	9b 01       	movw	r18, r22
    328e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3290:	9e a5       	ldd	r25, Y+46	; 0x2e
    3292:	fc 01       	movw	r30, r24
    3294:	e2 0f       	add	r30, r18
    3296:	f3 1f       	adc	r31, r19
    3298:	91 89       	ldd	r25, Z+17	; 0x11
    329a:	84 2f       	mov	r24, r20
    329c:	69 2f       	mov	r22, r25
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D1Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D1Pin, DIO_u8OUTPUT);
    32a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	c9 01       	movw	r24, r18
    32ac:	88 0f       	add	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	82 0f       	add	r24, r18
    32b2:	93 1f       	adc	r25, r19
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	ac 01       	movw	r20, r24
    32c2:	42 1b       	sub	r20, r18
    32c4:	53 0b       	sbc	r21, r19
    32c6:	9a 01       	movw	r18, r20
    32c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    32ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	42 89       	ldd	r20, Z+18	; 0x12
    32d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	c9 01       	movw	r24, r18
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	82 0f       	add	r24, r18
    32e2:	93 1f       	adc	r25, r19
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	bc 01       	movw	r22, r24
    32f2:	62 1b       	sub	r22, r18
    32f4:	73 0b       	sbc	r23, r19
    32f6:	9b 01       	movw	r18, r22
    32f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    32fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    32fc:	fc 01       	movw	r30, r24
    32fe:	e2 0f       	add	r30, r18
    3300:	f3 1f       	adc	r31, r19
    3302:	93 89       	ldd	r25, Z+19	; 0x13
    3304:	84 2f       	mov	r24, r20
    3306:	69 2f       	mov	r22, r25
    3308:	41 e0       	ldi	r20, 0x01	; 1
    330a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
				DIO_enuSetPinDirection(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D0Port,Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8D0Pin, DIO_u8OUTPUT);
    330e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3310:	28 2f       	mov	r18, r24
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	c9 01       	movw	r24, r18
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	82 0f       	add	r24, r18
    331c:	93 1f       	adc	r25, r19
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	88 0f       	add	r24, r24
    3328:	99 1f       	adc	r25, r25
    332a:	ac 01       	movw	r20, r24
    332c:	42 1b       	sub	r20, r18
    332e:	53 0b       	sbc	r21, r19
    3330:	9a 01       	movw	r18, r20
    3332:	8d a5       	ldd	r24, Y+45	; 0x2d
    3334:	9e a5       	ldd	r25, Y+46	; 0x2e
    3336:	fc 01       	movw	r30, r24
    3338:	e2 0f       	add	r30, r18
    333a:	f3 1f       	adc	r31, r19
    333c:	44 89       	ldd	r20, Z+20	; 0x14
    333e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3340:	28 2f       	mov	r18, r24
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	c9 01       	movw	r24, r18
    3346:	88 0f       	add	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	82 0f       	add	r24, r18
    334c:	93 1f       	adc	r25, r19
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	bc 01       	movw	r22, r24
    335c:	62 1b       	sub	r22, r18
    335e:	73 0b       	sbc	r23, r19
    3360:	9b 01       	movw	r18, r22
    3362:	8d a5       	ldd	r24, Y+45	; 0x2d
    3364:	9e a5       	ldd	r25, Y+46	; 0x2e
    3366:	fc 01       	movw	r30, r24
    3368:	e2 0f       	add	r30, r18
    336a:	f3 1f       	adc	r31, r19
    336c:	95 89       	ldd	r25, Z+21	; 0x15
    336e:	84 2f       	mov	r24, r20
    3370:	69 2f       	mov	r22, r25
    3372:	41 e0       	ldi	r20, 0x01	; 1
    3374:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

				LCD_invidSendCommand(Local_u8Iterator,LCD_u8EightbitCommand);
    3378:	8b a5       	ldd	r24, Y+43	; 0x2b
    337a:	68 e3       	ldi	r22, 0x38	; 56
    337c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
    3380:	21 c0       	rjmp	.+66     	; 0x33c4 <LCD_enuInit+0x61e>
			}
			else if(Copy_PsrtLCDConfig[Local_u8Iterator].LCD_u8LCDMode==FOUR_BIT)
    3382:	8b a5       	ldd	r24, Y+43	; 0x2b
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	c9 01       	movw	r24, r18
    338a:	88 0f       	add	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	82 0f       	add	r24, r18
    3390:	93 1f       	adc	r25, r19
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	88 0f       	add	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	ac 01       	movw	r20, r24
    33a0:	42 1b       	sub	r20, r18
    33a2:	53 0b       	sbc	r21, r19
    33a4:	9a 01       	movw	r18, r20
    33a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33aa:	fc 01       	movw	r30, r24
    33ac:	e2 0f       	add	r30, r18
    33ae:	f3 1f       	adc	r31, r19
    33b0:	86 89       	ldd	r24, Z+22	; 0x16
    33b2:	84 30       	cpi	r24, 0x04	; 4
    33b4:	29 f4       	brne	.+10     	; 0x33c0 <LCD_enuInit+0x61a>
			{
				LCD_invidSendCommand(Local_u8Iterator,LCD_u8FOURbitCommand);
    33b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    33b8:	68 e2       	ldi	r22, 0x28	; 40
    33ba:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
    33be:	02 c0       	rjmp	.+4      	; 0x33c4 <LCD_enuInit+0x61e>
			}
			else
			{
				Local_enuErrorState = ES_OUTOFRANGE;
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	8c a7       	std	Y+44, r24	; 0x2c
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a0 e8       	ldi	r26, 0x80	; 128
    33ca:	bf e3       	ldi	r27, 0x3F	; 63
    33cc:	89 8f       	std	Y+25, r24	; 0x19
    33ce:	9a 8f       	std	Y+26, r25	; 0x1a
    33d0:	ab 8f       	std	Y+27, r26	; 0x1b
    33d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	69 8d       	ldd	r22, Y+25	; 0x19
    33d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a ef       	ldi	r20, 0xFA	; 250
    33e2:	53 e4       	ldi	r21, 0x43	; 67
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8d 8b       	std	Y+21, r24	; 0x15
    33ee:	9e 8b       	std	Y+22, r25	; 0x16
    33f0:	af 8b       	std	Y+23, r26	; 0x17
    33f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f4:	6d 89       	ldd	r22, Y+21	; 0x15
    33f6:	7e 89       	ldd	r23, Y+22	; 0x16
    33f8:	8f 89       	ldd	r24, Y+23	; 0x17
    33fa:	98 8d       	ldd	r25, Y+24	; 0x18
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <LCD_enuInit+0x670>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9c 8b       	std	Y+20, r25	; 0x14
    3412:	8b 8b       	std	Y+19, r24	; 0x13
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <LCD_enuInit+0x6ee>
	else if (__tmp > 65535)
    3416:	6d 89       	ldd	r22, Y+21	; 0x15
    3418:	7e 89       	ldd	r23, Y+22	; 0x16
    341a:	8f 89       	ldd	r24, Y+23	; 0x17
    341c:	98 8d       	ldd	r25, Y+24	; 0x18
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <LCD_enuInit+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	69 8d       	ldd	r22, Y+25	; 0x19
    3430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <LCD_enuInit+0x6d0>
    3458:	82 e3       	ldi	r24, 0x32	; 50
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9a 8b       	std	Y+18, r25	; 0x12
    345e:	89 8b       	std	Y+17, r24	; 0x11
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	9a 89       	ldd	r25, Y+18	; 0x12
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCD_enuInit+0x6be>
    3468:	9a 8b       	std	Y+18, r25	; 0x12
    346a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8b 89       	ldd	r24, Y+19	; 0x13
    346e:	9c 89       	ldd	r25, Y+20	; 0x14
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9c 8b       	std	Y+20, r25	; 0x14
    3474:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <LCD_enuInit+0x6b2>
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <LCD_enuInit+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	6d 89       	ldd	r22, Y+21	; 0x15
    3482:	7e 89       	ldd	r23, Y+22	; 0x16
    3484:	8f 89       	ldd	r24, Y+23	; 0x17
    3486:	98 8d       	ldd	r25, Y+24	; 0x18
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9c 8b       	std	Y+20, r25	; 0x14
    3492:	8b 8b       	std	Y+19, r24	; 0x13
    3494:	8b 89       	ldd	r24, Y+19	; 0x13
    3496:	9c 89       	ldd	r25, Y+20	; 0x14
    3498:	98 8b       	std	Y+16, r25	; 0x10
    349a:	8f 87       	std	Y+15, r24	; 0x0f
    349c:	8f 85       	ldd	r24, Y+15	; 0x0f
    349e:	98 89       	ldd	r25, Y+16	; 0x10
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_enuInit+0x6fa>
    34a4:	98 8b       	std	Y+16, r25	; 0x10
    34a6:	8f 87       	std	Y+15, r24	; 0x0f
			}
			_delay_ms(1);
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8ClearCommand);
    34a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	a0 e0       	ldi	r26, 0x00	; 0
    34b6:	b0 e4       	ldi	r27, 0x40	; 64
    34b8:	8b 87       	std	Y+11, r24	; 0x0b
    34ba:	9c 87       	std	Y+12, r25	; 0x0c
    34bc:	ad 87       	std	Y+13, r26	; 0x0d
    34be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	4a ef       	ldi	r20, 0xFA	; 250
    34ce:	53 e4       	ldi	r21, 0x43	; 67
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	8f 83       	std	Y+7, r24	; 0x07
    34da:	98 87       	std	Y+8, r25	; 0x08
    34dc:	a9 87       	std	Y+9, r26	; 0x09
    34de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e0:	6f 81       	ldd	r22, Y+7	; 0x07
    34e2:	78 85       	ldd	r23, Y+8	; 0x08
    34e4:	89 85       	ldd	r24, Y+9	; 0x09
    34e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e8       	ldi	r20, 0x80	; 128
    34ee:	5f e3       	ldi	r21, 0x3F	; 63
    34f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f4:	88 23       	and	r24, r24
    34f6:	2c f4       	brge	.+10     	; 0x3502 <LCD_enuInit+0x75c>
		__ticks = 1;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
    3500:	3f c0       	rjmp	.+126    	; 0x3580 <LCD_enuInit+0x7da>
	else if (__tmp > 65535)
    3502:	6f 81       	ldd	r22, Y+7	; 0x07
    3504:	78 85       	ldd	r23, Y+8	; 0x08
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	9a 85       	ldd	r25, Y+10	; 0x0a
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	3f ef       	ldi	r19, 0xFF	; 255
    350e:	4f e7       	ldi	r20, 0x7F	; 127
    3510:	57 e4       	ldi	r21, 0x47	; 71
    3512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3516:	18 16       	cp	r1, r24
    3518:	4c f5       	brge	.+82     	; 0x356c <LCD_enuInit+0x7c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351a:	6b 85       	ldd	r22, Y+11	; 0x0b
    351c:	7c 85       	ldd	r23, Y+12	; 0x0c
    351e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3520:	9e 85       	ldd	r25, Y+14	; 0x0e
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e2       	ldi	r20, 0x20	; 32
    3528:	51 e4       	ldi	r21, 0x41	; 65
    352a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	bc 01       	movw	r22, r24
    3534:	cd 01       	movw	r24, r26
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <LCD_enuInit+0x7bc>
    3544:	82 e3       	ldi	r24, 0x32	; 50
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	9c 83       	std	Y+4, r25	; 0x04
    354a:	8b 83       	std	Y+3, r24	; 0x03
    354c:	8b 81       	ldd	r24, Y+3	; 0x03
    354e:	9c 81       	ldd	r25, Y+4	; 0x04
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <LCD_enuInit+0x7aa>
    3554:	9c 83       	std	Y+4, r25	; 0x04
    3556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3558:	8d 81       	ldd	r24, Y+5	; 0x05
    355a:	9e 81       	ldd	r25, Y+6	; 0x06
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	9e 83       	std	Y+6, r25	; 0x06
    3560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3562:	8d 81       	ldd	r24, Y+5	; 0x05
    3564:	9e 81       	ldd	r25, Y+6	; 0x06
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	69 f7       	brne	.-38     	; 0x3544 <LCD_enuInit+0x79e>
    356a:	14 c0       	rjmp	.+40     	; 0x3594 <LCD_enuInit+0x7ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356c:	6f 81       	ldd	r22, Y+7	; 0x07
    356e:	78 85       	ldd	r23, Y+8	; 0x08
    3570:	89 85       	ldd	r24, Y+9	; 0x09
    3572:	9a 85       	ldd	r25, Y+10	; 0x0a
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	9e 83       	std	Y+6, r25	; 0x06
    357e:	8d 83       	std	Y+5, r24	; 0x05
    3580:	8d 81       	ldd	r24, Y+5	; 0x05
    3582:	9e 81       	ldd	r25, Y+6	; 0x06
    3584:	9a 83       	std	Y+2, r25	; 0x02
    3586:	89 83       	std	Y+1, r24	; 0x01
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <LCD_enuInit+0x7e6>
    3590:	9a 83       	std	Y+2, r25	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8MoveDirection);
    3594:	8b a5       	ldd	r24, Y+43	; 0x2b
    3596:	66 e0       	ldi	r22, 0x06	; 6
    3598:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
{
	ES_T Local_enuErrorState = ES_NOK;
	u8 Local_u8Iterator=0;
	if(Copy_PsrtLCDConfig != NULL)
	{
		for(Local_u8Iterator=0 ; Local_u8Iterator < LCD_NUM;Local_u8Iterator++)
    359c:	8b a5       	ldd	r24, Y+43	; 0x2b
    359e:	8f 5f       	subi	r24, 0xFF	; 255
    35a0:	8b a7       	std	Y+43, r24	; 0x2b
    35a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    35a4:	88 23       	and	r24, r24
    35a6:	09 f4       	brne	.+2      	; 0x35aa <LCD_enuInit+0x804>
    35a8:	13 cc       	rjmp	.-2010   	; 0x2dd0 <LCD_enuInit+0x2a>
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8ClearCommand);
			_delay_ms(2);
			LCD_invidSendCommand(Local_u8Iterator,LCD_u8MoveDirection);

		}
		Local_enuErrorState = ES_OK;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	8c a7       	std	Y+44, r24	; 0x2c
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <LCD_enuInit+0x80e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	8c a7       	std	Y+44, r24	; 0x2c
	}

	return Local_enuErrorState;
    35b4:	8c a5       	ldd	r24, Y+44	; 0x2c
}
    35b6:	ae 96       	adiw	r28, 0x2e	; 46
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <LCD_enuDisplayChar>:

ES_T LCD_enuDisplayChar(u8 Copy_u8LCDID , u8 Copy_u8Char)
{
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <LCD_enuDisplayChar+0x6>
    35ce:	0f 92       	push	r0
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	8a 83       	std	Y+2, r24	; 0x02
    35d6:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    35d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID <LCD_NUM)
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	88 23       	and	r24, r24
    35de:	a1 f5       	brne	.+104    	; 0x3648 <LCD_enuDisplayChar+0x80>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	c9 01       	movw	r24, r18
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	82 0f       	add	r24, r18
    35ee:	93 1f       	adc	r25, r19
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	88 0f       	add	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	82 1b       	sub	r24, r18
    35fe:	93 0b       	sbc	r25, r19
    3600:	fc 01       	movw	r30, r24
    3602:	ed 57       	subi	r30, 0x7D	; 125
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	40 81       	ld	r20, Z
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	c9 01       	movw	r24, r18
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	82 0f       	add	r24, r18
    3616:	93 1f       	adc	r25, r19
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	82 1b       	sub	r24, r18
    3626:	93 0b       	sbc	r25, r19
    3628:	fc 01       	movw	r30, r24
    362a:	ec 57       	subi	r30, 0x7C	; 124
    362c:	fe 4f       	sbci	r31, 0xFE	; 254
    362e:	90 81       	ld	r25, Z
    3630:	84 2f       	mov	r24, r20
    3632:	69 2f       	mov	r22, r25
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendData(Copy_u8LCDID,Copy_u8Char);
    363a:	8a 81       	ldd	r24, Y+2	; 0x02
    363c:	6b 81       	ldd	r22, Y+3	; 0x03
    363e:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
		Local_enuErrorState = ES_OK;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	89 83       	std	Y+1, r24	; 0x01
    3646:	02 c0       	rjmp	.+4      	; 0x364c <LCD_enuDisplayChar+0x84>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    3648:	83 e0       	ldi	r24, 0x03	; 3
    364a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    364c:	89 81       	ldd	r24, Y+1	; 0x01
}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <LCD_enuDisplayString>:

ES_T LCD_enuDisplayString(u8 Copy_u8LCDID , u8 * Copy_u8ptrString)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <LCD_enuDisplayString+0x6>
    3660:	00 d0       	rcall	.+0      	; 0x3662 <LCD_enuDisplayString+0x8>
    3662:	0f 92       	push	r0
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	8b 83       	std	Y+3, r24	; 0x03
    366a:	7d 83       	std	Y+5, r23	; 0x05
    366c:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    366e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator=0;
    3670:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID <LCD_NUM)
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	88 23       	and	r24, r24
    3676:	31 f5       	brne	.+76     	; 0x36c4 <LCD_enuDisplayString+0x6a>
	{
		if(Copy_u8ptrString != NULL)
    3678:	8c 81       	ldd	r24, Y+4	; 0x04
    367a:	9d 81       	ldd	r25, Y+5	; 0x05
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	f9 f0       	breq	.+62     	; 0x36be <LCD_enuDisplayString+0x64>
    3680:	10 c0       	rjmp	.+32     	; 0x36a2 <LCD_enuDisplayString+0x48>
		{
			while(Copy_u8ptrString[Local_u8Iterator] != '\0')
			{
				LCD_invidSendData(Copy_u8LCDID,Copy_u8ptrString[Local_u8Iterator]);
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	8c 81       	ldd	r24, Y+4	; 0x04
    368a:	9d 81       	ldd	r25, Y+5	; 0x05
    368c:	fc 01       	movw	r30, r24
    368e:	e2 0f       	add	r30, r18
    3690:	f3 1f       	adc	r31, r19
    3692:	90 81       	ld	r25, Z
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	69 2f       	mov	r22, r25
    3698:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
				Local_u8Iterator++;
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	8f 5f       	subi	r24, 0xFF	; 255
    36a0:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8Iterator=0;
	if(Copy_u8LCDID <LCD_NUM)
	{
		if(Copy_u8ptrString != NULL)
		{
			while(Copy_u8ptrString[Local_u8Iterator] != '\0')
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	28 2f       	mov	r18, r24
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	8c 81       	ldd	r24, Y+4	; 0x04
    36aa:	9d 81       	ldd	r25, Y+5	; 0x05
    36ac:	fc 01       	movw	r30, r24
    36ae:	e2 0f       	add	r30, r18
    36b0:	f3 1f       	adc	r31, r19
    36b2:	80 81       	ld	r24, Z
    36b4:	88 23       	and	r24, r24
    36b6:	29 f7       	brne	.-54     	; 0x3682 <LCD_enuDisplayString+0x28>
			{
				LCD_invidSendData(Copy_u8LCDID,Copy_u8ptrString[Local_u8Iterator]);
				Local_u8Iterator++;
			}
			Local_enuErrorState = ES_OK;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	8a 83       	std	Y+2, r24	; 0x02
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <LCD_enuDisplayString+0x6e>
		}
		else
		{
			Local_enuErrorState=ES_NULL_POINTER;
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	8a 83       	std	Y+2, r24	; 0x02
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <LCD_enuDisplayString+0x6e>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    36c4:	83 e0       	ldi	r24, 0x03	; 3
    36c6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <LCD_enuDisplayInteger>:

ES_T LCD_enuDisplayInteger(u8 Copy_u8LCDID , s32 Copy_s32Number)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	28 97       	sbiw	r28, 0x08	; 8
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	8e 83       	std	Y+6, r24	; 0x06
    36f0:	78 87       	std	Y+8, r23	; 0x08
    36f2:	6f 83       	std	Y+7, r22	; 0x07
	ES_T Local_enuErrorState = ES_NOK;
    36f4:	1d 82       	std	Y+5, r1	; 0x05

	s32 Local_s32Reverse=0;
    36f6:	1c 82       	std	Y+4, r1	; 0x04
    36f8:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    36fa:	1a 82       	std	Y+2, r1	; 0x02
    36fc:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    36fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	c9 01       	movw	r24, r18
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	82 0f       	add	r24, r18
    370c:	93 1f       	adc	r25, r19
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	82 1b       	sub	r24, r18
    371c:	93 0b       	sbc	r25, r19
    371e:	fc 01       	movw	r30, r24
    3720:	ed 57       	subi	r30, 0x7D	; 125
    3722:	fe 4f       	sbci	r31, 0xFE	; 254
    3724:	40 81       	ld	r20, Z
    3726:	8e 81       	ldd	r24, Y+6	; 0x06
    3728:	28 2f       	mov	r18, r24
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	c9 01       	movw	r24, r18
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	82 0f       	add	r24, r18
    3734:	93 1f       	adc	r25, r19
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	82 1b       	sub	r24, r18
    3744:	93 0b       	sbc	r25, r19
    3746:	fc 01       	movw	r30, r24
    3748:	ec 57       	subi	r30, 0x7C	; 124
    374a:	fe 4f       	sbci	r31, 0xFE	; 254
    374c:	90 81       	ld	r25, Z
    374e:	84 2f       	mov	r24, r20
    3750:	69 2f       	mov	r22, r25
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
	if(Copy_u8LCDID < LCD_NUM)
    3758:	8e 81       	ldd	r24, Y+6	; 0x06
    375a:	88 23       	and	r24, r24
    375c:	09 f0       	breq	.+2      	; 0x3760 <LCD_enuDisplayInteger+0x86>
    375e:	5f c0       	rjmp	.+190    	; 0x381e <LCD_enuDisplayInteger+0x144>
	{
		if(Copy_s32Number < 0)
    3760:	8f 81       	ldd	r24, Y+7	; 0x07
    3762:	98 85       	ldd	r25, Y+8	; 0x08
    3764:	99 23       	and	r25, r25
    3766:	a4 f5       	brge	.+104    	; 0x37d0 <LCD_enuDisplayInteger+0xf6>
		{
			LCD_invidSendData(Copy_u8LCDID,'-');
    3768:	8e 81       	ldd	r24, Y+6	; 0x06
    376a:	6d e2       	ldi	r22, 0x2D	; 45
    376c:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
			Copy_s32Number *= -1 ;
    3770:	8f 81       	ldd	r24, Y+7	; 0x07
    3772:	98 85       	ldd	r25, Y+8	; 0x08
    3774:	90 95       	com	r25
    3776:	81 95       	neg	r24
    3778:	9f 4f       	sbci	r25, 0xFF	; 255
    377a:	98 87       	std	Y+8, r25	; 0x08
    377c:	8f 83       	std	Y+7, r24	; 0x07
    377e:	28 c0       	rjmp	.+80     	; 0x37d0 <LCD_enuDisplayInteger+0xf6>
		}
		while(Copy_s32Number)
		{
			Local_u8Remainder = Copy_s32Number % 10;
    3780:	8f 81       	ldd	r24, Y+7	; 0x07
    3782:	98 85       	ldd	r25, Y+8	; 0x08
    3784:	2a e0       	ldi	r18, 0x0A	; 10
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	b9 01       	movw	r22, r18
    378a:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    378e:	8a 83       	std	Y+2, r24	; 0x02
			Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    3790:	8b 81       	ldd	r24, Y+3	; 0x03
    3792:	9c 81       	ldd	r25, Y+4	; 0x04
    3794:	9c 01       	movw	r18, r24
    3796:	22 0f       	add	r18, r18
    3798:	33 1f       	adc	r19, r19
    379a:	c9 01       	movw	r24, r18
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	28 0f       	add	r18, r24
    37a6:	39 1f       	adc	r19, r25
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	88 2f       	mov	r24, r24
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	82 0f       	add	r24, r18
    37b0:	93 1f       	adc	r25, r19
    37b2:	9c 83       	std	Y+4, r25	; 0x04
    37b4:	8b 83       	std	Y+3, r24	; 0x03
			Copy_s32Number /=10;
    37b6:	8f 81       	ldd	r24, Y+7	; 0x07
    37b8:	98 85       	ldd	r25, Y+8	; 0x08
    37ba:	2a e0       	ldi	r18, 0x0A	; 10
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	b9 01       	movw	r22, r18
    37c0:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    37c4:	cb 01       	movw	r24, r22
    37c6:	98 87       	std	Y+8, r25	; 0x08
    37c8:	8f 83       	std	Y+7, r24	; 0x07
			Local_u8NumDigit ++;
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	8f 5f       	subi	r24, 0xFF	; 255
    37ce:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_s32Number < 0)
		{
			LCD_invidSendData(Copy_u8LCDID,'-');
			Copy_s32Number *= -1 ;
		}
		while(Copy_s32Number)
    37d0:	8f 81       	ldd	r24, Y+7	; 0x07
    37d2:	98 85       	ldd	r25, Y+8	; 0x08
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	a1 f6       	brne	.-88     	; 0x3780 <LCD_enuDisplayInteger+0xa6>
    37d8:	1c c0       	rjmp	.+56     	; 0x3812 <LCD_enuDisplayInteger+0x138>
			Copy_s32Number /=10;
			Local_u8NumDigit ++;
		}
		while(Local_u8NumDigit)
		{
			Local_u8Remainder = Local_s32Reverse % 10;
    37da:	8b 81       	ldd	r24, Y+3	; 0x03
    37dc:	9c 81       	ldd	r25, Y+4	; 0x04
    37de:	2a e0       	ldi	r18, 0x0A	; 10
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	b9 01       	movw	r22, r18
    37e4:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    37e8:	8a 83       	std	Y+2, r24	; 0x02
			LCD_invidSendData(Copy_u8LCDID,Local_u8Remainder + '0');
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	98 2f       	mov	r25, r24
    37ee:	90 5d       	subi	r25, 0xD0	; 208
    37f0:	8e 81       	ldd	r24, Y+6	; 0x06
    37f2:	69 2f       	mov	r22, r25
    37f4:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
			Local_s32Reverse /= 10;
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	9c 81       	ldd	r25, Y+4	; 0x04
    37fc:	2a e0       	ldi	r18, 0x0A	; 10
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	b9 01       	movw	r22, r18
    3802:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    3806:	cb 01       	movw	r24, r22
    3808:	9c 83       	std	Y+4, r25	; 0x04
    380a:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8NumDigit --;
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	81 50       	subi	r24, 0x01	; 1
    3810:	89 83       	std	Y+1, r24	; 0x01
			Local_u8Remainder = Copy_s32Number % 10;
			Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
			Copy_s32Number /=10;
			Local_u8NumDigit ++;
		}
		while(Local_u8NumDigit)
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	88 23       	and	r24, r24
    3816:	09 f7       	brne	.-62     	; 0x37da <LCD_enuDisplayInteger+0x100>
			Local_u8Remainder = Local_s32Reverse % 10;
			LCD_invidSendData(Copy_u8LCDID,Local_u8Remainder + '0');
			Local_s32Reverse /= 10;
			Local_u8NumDigit --;
		}
		Local_enuErrorState = ES_OK;
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <LCD_enuDisplayInteger+0x148>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    381e:	83 e0       	ldi	r24, 0x03	; 3
    3820:	8d 83       	std	Y+5, r24	; 0x05
	}


	return Local_enuErrorState;
    3822:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3824:	28 96       	adiw	r28, 0x08	; 8
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <LCD_enuSendCommand>:

ES_T LCD_enuSendCommand(u8 Copy_u8LCDID , u8 Copy_u8Command)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	00 d0       	rcall	.+0      	; 0x383c <LCD_enuSendCommand+0x6>
    383c:	0f 92       	push	r0
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	8a 83       	std	Y+2, r24	; 0x02
    3844:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    3846:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID <LCD_NUM)
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	88 23       	and	r24, r24
    384c:	a1 f5       	brne	.+104    	; 0x38b6 <LCD_enuSendCommand+0x80>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	28 2f       	mov	r18, r24
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	c9 01       	movw	r24, r18
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	82 0f       	add	r24, r18
    385c:	93 1f       	adc	r25, r19
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	82 1b       	sub	r24, r18
    386c:	93 0b       	sbc	r25, r19
    386e:	fc 01       	movw	r30, r24
    3870:	ed 57       	subi	r30, 0x7D	; 125
    3872:	fe 4f       	sbci	r31, 0xFE	; 254
    3874:	40 81       	ld	r20, Z
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	28 2f       	mov	r18, r24
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	c9 01       	movw	r24, r18
    387e:	88 0f       	add	r24, r24
    3880:	99 1f       	adc	r25, r25
    3882:	82 0f       	add	r24, r18
    3884:	93 1f       	adc	r25, r19
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	88 0f       	add	r24, r24
    3890:	99 1f       	adc	r25, r25
    3892:	82 1b       	sub	r24, r18
    3894:	93 0b       	sbc	r25, r19
    3896:	fc 01       	movw	r30, r24
    3898:	ec 57       	subi	r30, 0x7C	; 124
    389a:	fe 4f       	sbci	r31, 0xFE	; 254
    389c:	90 81       	ld	r25, Z
    389e:	84 2f       	mov	r24, r20
    38a0:	69 2f       	mov	r22, r25
    38a2:	40 e0       	ldi	r20, 0x00	; 0
    38a4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendCommand(Copy_u8LCDID, Copy_u8Command);
    38a8:	8a 81       	ldd	r24, Y+2	; 0x02
    38aa:	6b 81       	ldd	r22, Y+3	; 0x03
    38ac:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
		Local_enuErrorState = ES_OK;
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <LCD_enuSendCommand+0x84>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <LCD_enuSetPosition>:

ES_T LCD_enuSetPosition(u8 Copy_u8LCDID , u8 Copy_u8Row , u8 Copy_u8Col)
{
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <LCD_enuSetPosition+0x6>
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <LCD_enuSetPosition+0x8>
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	8a 83       	std	Y+2, r24	; 0x02
    38d6:	6b 83       	std	Y+3, r22	; 0x03
    38d8:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    38da:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8LCDID < LCD_NUM && Copy_u8Row<LCD_u8Row2 && Copy_u8Col < LCD_u8Col16)
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	88 23       	and	r24, r24
    38e0:	09 f0       	breq	.+2      	; 0x38e4 <LCD_enuSetPosition+0x1c>
    38e2:	7a c0       	rjmp	.+244    	; 0x39d8 <LCD_enuSetPosition+0x110>
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	82 30       	cpi	r24, 0x02	; 2
    38e8:	08 f0       	brcs	.+2      	; 0x38ec <LCD_enuSetPosition+0x24>
    38ea:	76 c0       	rjmp	.+236    	; 0x39d8 <LCD_enuSetPosition+0x110>
    38ec:	8c 81       	ldd	r24, Y+4	; 0x04
    38ee:	80 31       	cpi	r24, 0x10	; 16
    38f0:	08 f0       	brcs	.+2      	; 0x38f4 <LCD_enuSetPosition+0x2c>
    38f2:	72 c0       	rjmp	.+228    	; 0x39d8 <LCD_enuSetPosition+0x110>
	{
		if(Copy_u8Row == LCD_u8Row1)
    38f4:	8b 81       	ldd	r24, Y+3	; 0x03
    38f6:	81 30       	cpi	r24, 0x01	; 1
    38f8:	a9 f5       	brne	.+106    	; 0x3964 <LCD_enuSetPosition+0x9c>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	28 2f       	mov	r18, r24
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	c9 01       	movw	r24, r18
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	82 0f       	add	r24, r18
    3908:	93 1f       	adc	r25, r19
    390a:	88 0f       	add	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	88 0f       	add	r24, r24
    3910:	99 1f       	adc	r25, r25
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	82 1b       	sub	r24, r18
    3918:	93 0b       	sbc	r25, r19
    391a:	fc 01       	movw	r30, r24
    391c:	ed 57       	subi	r30, 0x7D	; 125
    391e:	fe 4f       	sbci	r31, 0xFE	; 254
    3920:	40 81       	ld	r20, Z
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	28 2f       	mov	r18, r24
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	c9 01       	movw	r24, r18
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	82 0f       	add	r24, r18
    3930:	93 1f       	adc	r25, r19
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	88 0f       	add	r24, r24
    3938:	99 1f       	adc	r25, r25
    393a:	88 0f       	add	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	82 1b       	sub	r24, r18
    3940:	93 0b       	sbc	r25, r19
    3942:	fc 01       	movw	r30, r24
    3944:	ec 57       	subi	r30, 0x7C	; 124
    3946:	fe 4f       	sbci	r31, 0xFE	; 254
    3948:	90 81       	ld	r25, Z
    394a:	84 2f       	mov	r24, r20
    394c:	69 2f       	mov	r22, r25
    394e:	40 e0       	ldi	r20, 0x00	; 0
    3950:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			LCD_invidSendCommand(Copy_u8LCDID , ((LCD_u8R1Command)+Copy_u8Col) );
    3954:	8c 81       	ldd	r24, Y+4	; 0x04
    3956:	98 2f       	mov	r25, r24
    3958:	90 58       	subi	r25, 0x80	; 128
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	69 2f       	mov	r22, r25
    395e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
    3962:	37 c0       	rjmp	.+110    	; 0x39d2 <LCD_enuSetPosition+0x10a>
		}
		else if(Copy_u8Row == LCD_u8Row2)
    3964:	8b 81       	ldd	r24, Y+3	; 0x03
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	a1 f5       	brne	.+104    	; 0x39d2 <LCD_enuSetPosition+0x10a>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    396a:	8a 81       	ldd	r24, Y+2	; 0x02
    396c:	28 2f       	mov	r18, r24
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	c9 01       	movw	r24, r18
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	82 0f       	add	r24, r18
    3978:	93 1f       	adc	r25, r19
    397a:	88 0f       	add	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	88 0f       	add	r24, r24
    3980:	99 1f       	adc	r25, r25
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	82 1b       	sub	r24, r18
    3988:	93 0b       	sbc	r25, r19
    398a:	fc 01       	movw	r30, r24
    398c:	ed 57       	subi	r30, 0x7D	; 125
    398e:	fe 4f       	sbci	r31, 0xFE	; 254
    3990:	40 81       	ld	r20, Z
    3992:	8a 81       	ldd	r24, Y+2	; 0x02
    3994:	28 2f       	mov	r18, r24
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	c9 01       	movw	r24, r18
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	82 0f       	add	r24, r18
    39a0:	93 1f       	adc	r25, r19
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	82 1b       	sub	r24, r18
    39b0:	93 0b       	sbc	r25, r19
    39b2:	fc 01       	movw	r30, r24
    39b4:	ec 57       	subi	r30, 0x7C	; 124
    39b6:	fe 4f       	sbci	r31, 0xFE	; 254
    39b8:	90 81       	ld	r25, Z
    39ba:	84 2f       	mov	r24, r20
    39bc:	69 2f       	mov	r22, r25
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			LCD_invidSendCommand(Copy_u8LCDID , ((LCD_u8R2Command)+Copy_u8Col) );
    39c4:	8c 81       	ldd	r24, Y+4	; 0x04
    39c6:	98 2f       	mov	r25, r24
    39c8:	90 54       	subi	r25, 0x40	; 64
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	69 2f       	mov	r22, r25
    39ce:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LCD_invidSendCommand>
		}
		Local_enuErrorState = ES_OK;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <LCD_enuSetPosition+0x114>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    39d8:	83 e0       	ldi	r24, 0x03	; 3
    39da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <LCD_invidSendCommand>:
	}
	return Local_enuErrorState;
}
*/
static inline void  LCD_invidSendCommand(u8 Copy_u8LCDID , u8 Copy_u8Command)
{
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	6e 97       	sbiw	r28, 0x1e	; 30
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	8d 8f       	std	Y+29, r24	; 0x1d
    3a02:	6e 8f       	std	Y+30, r22	; 0x1e
	if(Copy_u8LCDID < LCD_NUM)
    3a04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a06:	88 23       	and	r24, r24
    3a08:	09 f0       	breq	.+2      	; 0x3a0c <LCD_invidSendCommand+0x20>
    3a0a:	fb c2       	rjmp	.+1526   	; 0x4002 <LCD_invidSendCommand+0x616>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8LOW);
    3a0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	c9 01       	movw	r24, r18
    3a14:	88 0f       	add	r24, r24
    3a16:	99 1f       	adc	r25, r25
    3a18:	82 0f       	add	r24, r18
    3a1a:	93 1f       	adc	r25, r19
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	82 1b       	sub	r24, r18
    3a2a:	93 0b       	sbc	r25, r19
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	ed 57       	subi	r30, 0x7D	; 125
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	40 81       	ld	r20, Z
    3a34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a36:	28 2f       	mov	r18, r24
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	c9 01       	movw	r24, r18
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	82 0f       	add	r24, r18
    3a42:	93 1f       	adc	r25, r19
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	88 0f       	add	r24, r24
    3a4e:	99 1f       	adc	r25, r25
    3a50:	82 1b       	sub	r24, r18
    3a52:	93 0b       	sbc	r25, r19
    3a54:	fc 01       	movw	r30, r24
    3a56:	ec 57       	subi	r30, 0x7C	; 124
    3a58:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5a:	90 81       	ld	r25, Z
    3a5c:	84 2f       	mov	r24, r20
    3a5e:	69 2f       	mov	r22, r25
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPin,DIO_u8LOW);
    3a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a68:	28 2f       	mov	r18, r24
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	c9 01       	movw	r24, r18
    3a6e:	88 0f       	add	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	82 0f       	add	r24, r18
    3a74:	93 1f       	adc	r25, r19
    3a76:	88 0f       	add	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	88 0f       	add	r24, r24
    3a7c:	99 1f       	adc	r25, r25
    3a7e:	88 0f       	add	r24, r24
    3a80:	99 1f       	adc	r25, r25
    3a82:	82 1b       	sub	r24, r18
    3a84:	93 0b       	sbc	r25, r19
    3a86:	fc 01       	movw	r30, r24
    3a88:	eb 57       	subi	r30, 0x7B	; 123
    3a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8c:	40 81       	ld	r20, Z
    3a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a90:	28 2f       	mov	r18, r24
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	c9 01       	movw	r24, r18
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	82 0f       	add	r24, r18
    3a9c:	93 1f       	adc	r25, r19
    3a9e:	88 0f       	add	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	82 1b       	sub	r24, r18
    3aac:	93 0b       	sbc	r25, r19
    3aae:	fc 01       	movw	r30, r24
    3ab0:	ea 57       	subi	r30, 0x7A	; 122
    3ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab4:	90 81       	ld	r25, Z
    3ab6:	84 2f       	mov	r24, r20
    3ab8:	69 2f       	mov	r22, r25
    3aba:	40 e0       	ldi	r20, 0x00	; 0
    3abc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    3ac0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ac2:	28 2f       	mov	r18, r24
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	82 0f       	add	r24, r18
    3ace:	93 1f       	adc	r25, r19
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	88 0f       	add	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	82 1b       	sub	r24, r18
    3ade:	93 0b       	sbc	r25, r19
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	e9 57       	subi	r30, 0x79	; 121
    3ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae6:	40 81       	ld	r20, Z
    3ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aea:	28 2f       	mov	r18, r24
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	c9 01       	movw	r24, r18
    3af0:	88 0f       	add	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	82 0f       	add	r24, r18
    3af6:	93 1f       	adc	r25, r19
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	88 0f       	add	r24, r24
    3b02:	99 1f       	adc	r25, r25
    3b04:	82 1b       	sub	r24, r18
    3b06:	93 0b       	sbc	r25, r19
    3b08:	fc 01       	movw	r30, r24
    3b0a:	e8 57       	subi	r30, 0x78	; 120
    3b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0e:	90 81       	ld	r25, Z
    3b10:	84 2f       	mov	r24, r20
    3b12:	69 2f       	mov	r22, r25
    3b14:	40 e0       	ldi	r20, 0x00	; 0
    3b16:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Pin,(Copy_u8Command>>BIT_SEVEN)&BIT_MASKING);
    3b1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b1c:	28 2f       	mov	r18, r24
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	c9 01       	movw	r24, r18
    3b22:	88 0f       	add	r24, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	82 0f       	add	r24, r18
    3b28:	93 1f       	adc	r25, r19
    3b2a:	88 0f       	add	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	82 1b       	sub	r24, r18
    3b38:	93 0b       	sbc	r25, r19
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	e7 57       	subi	r30, 0x77	; 119
    3b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b40:	40 81       	ld	r20, Z
    3b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	c9 01       	movw	r24, r18
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	82 0f       	add	r24, r18
    3b50:	93 1f       	adc	r25, r19
    3b52:	88 0f       	add	r24, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	88 0f       	add	r24, r24
    3b5c:	99 1f       	adc	r25, r25
    3b5e:	82 1b       	sub	r24, r18
    3b60:	93 0b       	sbc	r25, r19
    3b62:	fc 01       	movw	r30, r24
    3b64:	e6 57       	subi	r30, 0x76	; 118
    3b66:	fe 4f       	sbci	r31, 0xFE	; 254
    3b68:	20 81       	ld	r18, Z
    3b6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b6c:	98 2f       	mov	r25, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	99 27       	eor	r25, r25
    3b72:	99 1f       	adc	r25, r25
    3b74:	84 2f       	mov	r24, r20
    3b76:	62 2f       	mov	r22, r18
    3b78:	49 2f       	mov	r20, r25
    3b7a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Pin,(Copy_u8Command>>BIT_SIX)&BIT_MASKING);
    3b7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b80:	28 2f       	mov	r18, r24
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	c9 01       	movw	r24, r18
    3b86:	88 0f       	add	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	82 0f       	add	r24, r18
    3b8c:	93 1f       	adc	r25, r19
    3b8e:	88 0f       	add	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	88 0f       	add	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	82 1b       	sub	r24, r18
    3b9c:	93 0b       	sbc	r25, r19
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	e5 57       	subi	r30, 0x75	; 117
    3ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba4:	40 81       	ld	r20, Z
    3ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ba8:	28 2f       	mov	r18, r24
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	c9 01       	movw	r24, r18
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	82 0f       	add	r24, r18
    3bb4:	93 1f       	adc	r25, r19
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	88 0f       	add	r24, r24
    3bbc:	99 1f       	adc	r25, r25
    3bbe:	88 0f       	add	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	82 1b       	sub	r24, r18
    3bc4:	93 0b       	sbc	r25, r19
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	e4 57       	subi	r30, 0x74	; 116
    3bca:	fe 4f       	sbci	r31, 0xFE	; 254
    3bcc:	20 81       	ld	r18, Z
    3bce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bd0:	82 95       	swap	r24
    3bd2:	86 95       	lsr	r24
    3bd4:	86 95       	lsr	r24
    3bd6:	83 70       	andi	r24, 0x03	; 3
    3bd8:	98 2f       	mov	r25, r24
    3bda:	91 70       	andi	r25, 0x01	; 1
    3bdc:	84 2f       	mov	r24, r20
    3bde:	62 2f       	mov	r22, r18
    3be0:	49 2f       	mov	r20, r25
    3be2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Pin,(Copy_u8Command>>BIT_FIVE)&BIT_MASKING);
    3be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	c9 01       	movw	r24, r18
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	82 0f       	add	r24, r18
    3bf4:	93 1f       	adc	r25, r19
    3bf6:	88 0f       	add	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	88 0f       	add	r24, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	88 0f       	add	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	82 1b       	sub	r24, r18
    3c04:	93 0b       	sbc	r25, r19
    3c06:	fc 01       	movw	r30, r24
    3c08:	e3 57       	subi	r30, 0x73	; 115
    3c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0c:	40 81       	ld	r20, Z
    3c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c10:	28 2f       	mov	r18, r24
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	c9 01       	movw	r24, r18
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	82 0f       	add	r24, r18
    3c1c:	93 1f       	adc	r25, r19
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	88 0f       	add	r24, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	82 1b       	sub	r24, r18
    3c2c:	93 0b       	sbc	r25, r19
    3c2e:	fc 01       	movw	r30, r24
    3c30:	e2 57       	subi	r30, 0x72	; 114
    3c32:	fe 4f       	sbci	r31, 0xFE	; 254
    3c34:	20 81       	ld	r18, Z
    3c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c38:	82 95       	swap	r24
    3c3a:	86 95       	lsr	r24
    3c3c:	87 70       	andi	r24, 0x07	; 7
    3c3e:	98 2f       	mov	r25, r24
    3c40:	91 70       	andi	r25, 0x01	; 1
    3c42:	84 2f       	mov	r24, r20
    3c44:	62 2f       	mov	r22, r18
    3c46:	49 2f       	mov	r20, r25
    3c48:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Pin,(Copy_u8Command>>BIT_FOUR)&BIT_MASKING);
    3c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c4e:	28 2f       	mov	r18, r24
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	c9 01       	movw	r24, r18
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	82 0f       	add	r24, r18
    3c5a:	93 1f       	adc	r25, r19
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	88 0f       	add	r24, r24
    3c62:	99 1f       	adc	r25, r25
    3c64:	88 0f       	add	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	82 1b       	sub	r24, r18
    3c6a:	93 0b       	sbc	r25, r19
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	e1 57       	subi	r30, 0x71	; 113
    3c70:	fe 4f       	sbci	r31, 0xFE	; 254
    3c72:	40 81       	ld	r20, Z
    3c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c76:	28 2f       	mov	r18, r24
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	c9 01       	movw	r24, r18
    3c7c:	88 0f       	add	r24, r24
    3c7e:	99 1f       	adc	r25, r25
    3c80:	82 0f       	add	r24, r18
    3c82:	93 1f       	adc	r25, r19
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	82 1b       	sub	r24, r18
    3c92:	93 0b       	sbc	r25, r19
    3c94:	fc 01       	movw	r30, r24
    3c96:	e0 57       	subi	r30, 0x70	; 112
    3c98:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9a:	20 81       	ld	r18, Z
    3c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c9e:	82 95       	swap	r24
    3ca0:	8f 70       	andi	r24, 0x0F	; 15
    3ca2:	98 2f       	mov	r25, r24
    3ca4:	91 70       	andi	r25, 0x01	; 1
    3ca6:	84 2f       	mov	r24, r20
    3ca8:	62 2f       	mov	r22, r18
    3caa:	49 2f       	mov	r20, r25
    3cac:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		if(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8LCDMode == EIGHT_BIT)
    3cb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	c9 01       	movw	r24, r18
    3cb8:	88 0f       	add	r24, r24
    3cba:	99 1f       	adc	r25, r25
    3cbc:	82 0f       	add	r24, r18
    3cbe:	93 1f       	adc	r25, r19
    3cc0:	88 0f       	add	r24, r24
    3cc2:	99 1f       	adc	r25, r25
    3cc4:	88 0f       	add	r24, r24
    3cc6:	99 1f       	adc	r25, r25
    3cc8:	88 0f       	add	r24, r24
    3cca:	99 1f       	adc	r25, r25
    3ccc:	82 1b       	sub	r24, r18
    3cce:	93 0b       	sbc	r25, r19
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	e7 56       	subi	r30, 0x67	; 103
    3cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd6:	80 81       	ld	r24, Z
    3cd8:	88 30       	cpi	r24, 0x08	; 8
    3cda:	09 f0       	breq	.+2      	; 0x3cde <LCD_invidSendCommand+0x2f2>
    3cdc:	c6 c0       	rjmp	.+396    	; 0x3e6a <LCD_invidSendCommand+0x47e>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Pin,(Copy_u8Command>>BIT_THREE)&BIT_MASKING);
    3cde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	c9 01       	movw	r24, r18
    3ce6:	88 0f       	add	r24, r24
    3ce8:	99 1f       	adc	r25, r25
    3cea:	82 0f       	add	r24, r18
    3cec:	93 1f       	adc	r25, r19
    3cee:	88 0f       	add	r24, r24
    3cf0:	99 1f       	adc	r25, r25
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	82 1b       	sub	r24, r18
    3cfc:	93 0b       	sbc	r25, r19
    3cfe:	fc 01       	movw	r30, r24
    3d00:	ef 56       	subi	r30, 0x6F	; 111
    3d02:	fe 4f       	sbci	r31, 0xFE	; 254
    3d04:	40 81       	ld	r20, Z
    3d06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d08:	28 2f       	mov	r18, r24
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	c9 01       	movw	r24, r18
    3d0e:	88 0f       	add	r24, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	82 0f       	add	r24, r18
    3d14:	93 1f       	adc	r25, r19
    3d16:	88 0f       	add	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	88 0f       	add	r24, r24
    3d20:	99 1f       	adc	r25, r25
    3d22:	82 1b       	sub	r24, r18
    3d24:	93 0b       	sbc	r25, r19
    3d26:	fc 01       	movw	r30, r24
    3d28:	ee 56       	subi	r30, 0x6E	; 110
    3d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2c:	20 81       	ld	r18, Z
    3d2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d30:	86 95       	lsr	r24
    3d32:	86 95       	lsr	r24
    3d34:	86 95       	lsr	r24
    3d36:	98 2f       	mov	r25, r24
    3d38:	91 70       	andi	r25, 0x01	; 1
    3d3a:	84 2f       	mov	r24, r20
    3d3c:	62 2f       	mov	r22, r18
    3d3e:	49 2f       	mov	r20, r25
    3d40:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Pin,(Copy_u8Command>>BIT_TWO)&BIT_MASKING);
    3d44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d46:	28 2f       	mov	r18, r24
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	c9 01       	movw	r24, r18
    3d4c:	88 0f       	add	r24, r24
    3d4e:	99 1f       	adc	r25, r25
    3d50:	82 0f       	add	r24, r18
    3d52:	93 1f       	adc	r25, r19
    3d54:	88 0f       	add	r24, r24
    3d56:	99 1f       	adc	r25, r25
    3d58:	88 0f       	add	r24, r24
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	88 0f       	add	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	82 1b       	sub	r24, r18
    3d62:	93 0b       	sbc	r25, r19
    3d64:	fc 01       	movw	r30, r24
    3d66:	ed 56       	subi	r30, 0x6D	; 109
    3d68:	fe 4f       	sbci	r31, 0xFE	; 254
    3d6a:	40 81       	ld	r20, Z
    3d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d6e:	28 2f       	mov	r18, r24
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	c9 01       	movw	r24, r18
    3d74:	88 0f       	add	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	82 0f       	add	r24, r18
    3d7a:	93 1f       	adc	r25, r19
    3d7c:	88 0f       	add	r24, r24
    3d7e:	99 1f       	adc	r25, r25
    3d80:	88 0f       	add	r24, r24
    3d82:	99 1f       	adc	r25, r25
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	82 1b       	sub	r24, r18
    3d8a:	93 0b       	sbc	r25, r19
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	ec 56       	subi	r30, 0x6C	; 108
    3d90:	fe 4f       	sbci	r31, 0xFE	; 254
    3d92:	20 81       	ld	r18, Z
    3d94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d96:	86 95       	lsr	r24
    3d98:	86 95       	lsr	r24
    3d9a:	98 2f       	mov	r25, r24
    3d9c:	91 70       	andi	r25, 0x01	; 1
    3d9e:	84 2f       	mov	r24, r20
    3da0:	62 2f       	mov	r22, r18
    3da2:	49 2f       	mov	r20, r25
    3da4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Pin,(Copy_u8Command>>BIT_ONE)&BIT_MASKING);
    3da8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3daa:	28 2f       	mov	r18, r24
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	c9 01       	movw	r24, r18
    3db0:	88 0f       	add	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	82 0f       	add	r24, r18
    3db6:	93 1f       	adc	r25, r19
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	82 1b       	sub	r24, r18
    3dc6:	93 0b       	sbc	r25, r19
    3dc8:	fc 01       	movw	r30, r24
    3dca:	eb 56       	subi	r30, 0x6B	; 107
    3dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dce:	40 81       	ld	r20, Z
    3dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	c9 01       	movw	r24, r18
    3dd8:	88 0f       	add	r24, r24
    3dda:	99 1f       	adc	r25, r25
    3ddc:	82 0f       	add	r24, r18
    3dde:	93 1f       	adc	r25, r19
    3de0:	88 0f       	add	r24, r24
    3de2:	99 1f       	adc	r25, r25
    3de4:	88 0f       	add	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	88 0f       	add	r24, r24
    3dea:	99 1f       	adc	r25, r25
    3dec:	82 1b       	sub	r24, r18
    3dee:	93 0b       	sbc	r25, r19
    3df0:	fc 01       	movw	r30, r24
    3df2:	ea 56       	subi	r30, 0x6A	; 106
    3df4:	fe 4f       	sbci	r31, 0xFE	; 254
    3df6:	20 81       	ld	r18, Z
    3df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3dfa:	86 95       	lsr	r24
    3dfc:	98 2f       	mov	r25, r24
    3dfe:	91 70       	andi	r25, 0x01	; 1
    3e00:	84 2f       	mov	r24, r20
    3e02:	62 2f       	mov	r22, r18
    3e04:	49 2f       	mov	r20, r25
    3e06:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Pin,(Copy_u8Command>>BIT_ZERO)&BIT_MASKING);
    3e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e0c:	28 2f       	mov	r18, r24
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	c9 01       	movw	r24, r18
    3e12:	88 0f       	add	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	82 0f       	add	r24, r18
    3e18:	93 1f       	adc	r25, r19
    3e1a:	88 0f       	add	r24, r24
    3e1c:	99 1f       	adc	r25, r25
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	82 1b       	sub	r24, r18
    3e28:	93 0b       	sbc	r25, r19
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	e9 56       	subi	r30, 0x69	; 105
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	40 81       	ld	r20, Z
    3e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e34:	28 2f       	mov	r18, r24
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	c9 01       	movw	r24, r18
    3e3a:	88 0f       	add	r24, r24
    3e3c:	99 1f       	adc	r25, r25
    3e3e:	82 0f       	add	r24, r18
    3e40:	93 1f       	adc	r25, r19
    3e42:	88 0f       	add	r24, r24
    3e44:	99 1f       	adc	r25, r25
    3e46:	88 0f       	add	r24, r24
    3e48:	99 1f       	adc	r25, r25
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	82 1b       	sub	r24, r18
    3e50:	93 0b       	sbc	r25, r19
    3e52:	fc 01       	movw	r30, r24
    3e54:	e8 56       	subi	r30, 0x68	; 104
    3e56:	fe 4f       	sbci	r31, 0xFE	; 254
    3e58:	20 81       	ld	r18, Z
    3e5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	91 70       	andi	r25, 0x01	; 1
    3e60:	84 2f       	mov	r24, r20
    3e62:	62 2f       	mov	r22, r18
    3e64:	49 2f       	mov	r20, r25
    3e66:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		}
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8HIGH);
    3e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e6c:	28 2f       	mov	r18, r24
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	c9 01       	movw	r24, r18
    3e72:	88 0f       	add	r24, r24
    3e74:	99 1f       	adc	r25, r25
    3e76:	82 0f       	add	r24, r18
    3e78:	93 1f       	adc	r25, r19
    3e7a:	88 0f       	add	r24, r24
    3e7c:	99 1f       	adc	r25, r25
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	82 1b       	sub	r24, r18
    3e88:	93 0b       	sbc	r25, r19
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	e9 57       	subi	r30, 0x79	; 121
    3e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e90:	40 81       	ld	r20, Z
    3e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	c9 01       	movw	r24, r18
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	82 0f       	add	r24, r18
    3ea0:	93 1f       	adc	r25, r19
    3ea2:	88 0f       	add	r24, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	88 0f       	add	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	82 1b       	sub	r24, r18
    3eb0:	93 0b       	sbc	r25, r19
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	e8 57       	subi	r30, 0x78	; 120
    3eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb8:	90 81       	ld	r25, Z
    3eba:	84 2f       	mov	r24, r20
    3ebc:	69 2f       	mov	r22, r25
    3ebe:	41 e0       	ldi	r20, 0x01	; 1
    3ec0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	a0 e2       	ldi	r26, 0x20	; 32
    3eca:	b1 e4       	ldi	r27, 0x41	; 65
    3ecc:	89 8f       	std	Y+25, r24	; 0x19
    3ece:	9a 8f       	std	Y+26, r25	; 0x1a
    3ed0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ed2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	4a ef       	ldi	r20, 0xFA	; 250
    3ee2:	53 e4       	ldi	r21, 0x43	; 67
    3ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	8d 8b       	std	Y+21, r24	; 0x15
    3eee:	9e 8b       	std	Y+22, r25	; 0x16
    3ef0:	af 8b       	std	Y+23, r26	; 0x17
    3ef2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ef4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ef6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    3efa:	98 8d       	ldd	r25, Y+24	; 0x18
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e8       	ldi	r20, 0x80	; 128
    3f02:	5f e3       	ldi	r21, 0x3F	; 63
    3f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f08:	88 23       	and	r24, r24
    3f0a:	2c f4       	brge	.+10     	; 0x3f16 <LCD_invidSendCommand+0x52a>
		__ticks = 1;
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	9c 8b       	std	Y+20, r25	; 0x14
    3f12:	8b 8b       	std	Y+19, r24	; 0x13
    3f14:	3f c0       	rjmp	.+126    	; 0x3f94 <LCD_invidSendCommand+0x5a8>
	else if (__tmp > 65535)
    3f16:	6d 89       	ldd	r22, Y+21	; 0x15
    3f18:	7e 89       	ldd	r23, Y+22	; 0x16
    3f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	3f ef       	ldi	r19, 0xFF	; 255
    3f22:	4f e7       	ldi	r20, 0x7F	; 127
    3f24:	57 e4       	ldi	r21, 0x47	; 71
    3f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f2a:	18 16       	cp	r1, r24
    3f2c:	4c f5       	brge	.+82     	; 0x3f80 <LCD_invidSendCommand+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f2e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	40 e2       	ldi	r20, 0x20	; 32
    3f3c:	51 e4       	ldi	r21, 0x41	; 65
    3f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	9c 8b       	std	Y+20, r25	; 0x14
    3f54:	8b 8b       	std	Y+19, r24	; 0x13
    3f56:	0f c0       	rjmp	.+30     	; 0x3f76 <LCD_invidSendCommand+0x58a>
    3f58:	82 e3       	ldi	r24, 0x32	; 50
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	9a 8b       	std	Y+18, r25	; 0x12
    3f5e:	89 8b       	std	Y+17, r24	; 0x11
    3f60:	89 89       	ldd	r24, Y+17	; 0x11
    3f62:	9a 89       	ldd	r25, Y+18	; 0x12
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <LCD_invidSendCommand+0x578>
    3f68:	9a 8b       	std	Y+18, r25	; 0x12
    3f6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f70:	01 97       	sbiw	r24, 0x01	; 1
    3f72:	9c 8b       	std	Y+20, r25	; 0x14
    3f74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f76:	8b 89       	ldd	r24, Y+19	; 0x13
    3f78:	9c 89       	ldd	r25, Y+20	; 0x14
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	69 f7       	brne	.-38     	; 0x3f58 <LCD_invidSendCommand+0x56c>
    3f7e:	14 c0       	rjmp	.+40     	; 0x3fa8 <LCD_invidSendCommand+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f80:	6d 89       	ldd	r22, Y+21	; 0x15
    3f82:	7e 89       	ldd	r23, Y+22	; 0x16
    3f84:	8f 89       	ldd	r24, Y+23	; 0x17
    3f86:	98 8d       	ldd	r25, Y+24	; 0x18
    3f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	9c 8b       	std	Y+20, r25	; 0x14
    3f92:	8b 8b       	std	Y+19, r24	; 0x13
    3f94:	8b 89       	ldd	r24, Y+19	; 0x13
    3f96:	9c 89       	ldd	r25, Y+20	; 0x14
    3f98:	98 8b       	std	Y+16, r25	; 0x10
    3f9a:	8f 87       	std	Y+15, r24	; 0x0f
    3f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f9e:	98 89       	ldd	r25, Y+16	; 0x10
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <LCD_invidSendCommand+0x5b4>
    3fa4:	98 8b       	std	Y+16, r25	; 0x10
    3fa6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    3fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3faa:	28 2f       	mov	r18, r24
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	c9 01       	movw	r24, r18
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	82 0f       	add	r24, r18
    3fb6:	93 1f       	adc	r25, r19
    3fb8:	88 0f       	add	r24, r24
    3fba:	99 1f       	adc	r25, r25
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	82 1b       	sub	r24, r18
    3fc6:	93 0b       	sbc	r25, r19
    3fc8:	fc 01       	movw	r30, r24
    3fca:	e9 57       	subi	r30, 0x79	; 121
    3fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fce:	40 81       	ld	r20, Z
    3fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fd2:	28 2f       	mov	r18, r24
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	c9 01       	movw	r24, r18
    3fd8:	88 0f       	add	r24, r24
    3fda:	99 1f       	adc	r25, r25
    3fdc:	82 0f       	add	r24, r18
    3fde:	93 1f       	adc	r25, r19
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	88 0f       	add	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	82 1b       	sub	r24, r18
    3fee:	93 0b       	sbc	r25, r19
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	e8 57       	subi	r30, 0x78	; 120
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	90 81       	ld	r25, Z
    3ff8:	84 2f       	mov	r24, r20
    3ffa:	69 2f       	mov	r22, r25
    3ffc:	40 e0       	ldi	r20, 0x00	; 0
    3ffe:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	a0 e2       	ldi	r26, 0x20	; 32
    4008:	b1 e4       	ldi	r27, 0x41	; 65
    400a:	8b 87       	std	Y+11, r24	; 0x0b
    400c:	9c 87       	std	Y+12, r25	; 0x0c
    400e:	ad 87       	std	Y+13, r26	; 0x0d
    4010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4012:	6b 85       	ldd	r22, Y+11	; 0x0b
    4014:	7c 85       	ldd	r23, Y+12	; 0x0c
    4016:	8d 85       	ldd	r24, Y+13	; 0x0d
    4018:	9e 85       	ldd	r25, Y+14	; 0x0e
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	4a ef       	ldi	r20, 0xFA	; 250
    4020:	53 e4       	ldi	r21, 0x43	; 67
    4022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	8f 83       	std	Y+7, r24	; 0x07
    402c:	98 87       	std	Y+8, r25	; 0x08
    402e:	a9 87       	std	Y+9, r26	; 0x09
    4030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4032:	6f 81       	ldd	r22, Y+7	; 0x07
    4034:	78 85       	ldd	r23, Y+8	; 0x08
    4036:	89 85       	ldd	r24, Y+9	; 0x09
    4038:	9a 85       	ldd	r25, Y+10	; 0x0a
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e8       	ldi	r20, 0x80	; 128
    4040:	5f e3       	ldi	r21, 0x3F	; 63
    4042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4046:	88 23       	and	r24, r24
    4048:	2c f4       	brge	.+10     	; 0x4054 <LCD_invidSendCommand+0x668>
		__ticks = 1;
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	9e 83       	std	Y+6, r25	; 0x06
    4050:	8d 83       	std	Y+5, r24	; 0x05
    4052:	3f c0       	rjmp	.+126    	; 0x40d2 <LCD_invidSendCommand+0x6e6>
	else if (__tmp > 65535)
    4054:	6f 81       	ldd	r22, Y+7	; 0x07
    4056:	78 85       	ldd	r23, Y+8	; 0x08
    4058:	89 85       	ldd	r24, Y+9	; 0x09
    405a:	9a 85       	ldd	r25, Y+10	; 0x0a
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	3f ef       	ldi	r19, 0xFF	; 255
    4060:	4f e7       	ldi	r20, 0x7F	; 127
    4062:	57 e4       	ldi	r21, 0x47	; 71
    4064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4068:	18 16       	cp	r1, r24
    406a:	4c f5       	brge	.+82     	; 0x40be <LCD_invidSendCommand+0x6d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    406c:	6b 85       	ldd	r22, Y+11	; 0x0b
    406e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4070:	8d 85       	ldd	r24, Y+13	; 0x0d
    4072:	9e 85       	ldd	r25, Y+14	; 0x0e
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e2       	ldi	r20, 0x20	; 32
    407a:	51 e4       	ldi	r21, 0x41	; 65
    407c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	bc 01       	movw	r22, r24
    4086:	cd 01       	movw	r24, r26
    4088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	9e 83       	std	Y+6, r25	; 0x06
    4092:	8d 83       	std	Y+5, r24	; 0x05
    4094:	0f c0       	rjmp	.+30     	; 0x40b4 <LCD_invidSendCommand+0x6c8>
    4096:	82 e3       	ldi	r24, 0x32	; 50
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	8b 83       	std	Y+3, r24	; 0x03
    409e:	8b 81       	ldd	r24, Y+3	; 0x03
    40a0:	9c 81       	ldd	r25, Y+4	; 0x04
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	f1 f7       	brne	.-4      	; 0x40a2 <LCD_invidSendCommand+0x6b6>
    40a6:	9c 83       	std	Y+4, r25	; 0x04
    40a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40aa:	8d 81       	ldd	r24, Y+5	; 0x05
    40ac:	9e 81       	ldd	r25, Y+6	; 0x06
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	9e 83       	std	Y+6, r25	; 0x06
    40b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b4:	8d 81       	ldd	r24, Y+5	; 0x05
    40b6:	9e 81       	ldd	r25, Y+6	; 0x06
    40b8:	00 97       	sbiw	r24, 0x00	; 0
    40ba:	69 f7       	brne	.-38     	; 0x4096 <LCD_invidSendCommand+0x6aa>
    40bc:	14 c0       	rjmp	.+40     	; 0x40e6 <LCD_invidSendCommand+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40be:	6f 81       	ldd	r22, Y+7	; 0x07
    40c0:	78 85       	ldd	r23, Y+8	; 0x08
    40c2:	89 85       	ldd	r24, Y+9	; 0x09
    40c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	9e 83       	std	Y+6, r25	; 0x06
    40d0:	8d 83       	std	Y+5, r24	; 0x05
    40d2:	8d 81       	ldd	r24, Y+5	; 0x05
    40d4:	9e 81       	ldd	r25, Y+6	; 0x06
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	9a 81       	ldd	r25, Y+2	; 0x02
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <LCD_invidSendCommand+0x6f2>
    40e2:	9a 83       	std	Y+2, r25	; 0x02
    40e4:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(10);
}
    40e6:	6e 96       	adiw	r28, 0x1e	; 30
    40e8:	0f b6       	in	r0, 0x3f	; 63
    40ea:	f8 94       	cli
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	0f be       	out	0x3f, r0	; 63
    40f0:	cd bf       	out	0x3d, r28	; 61
    40f2:	cf 91       	pop	r28
    40f4:	df 91       	pop	r29
    40f6:	08 95       	ret

000040f8 <LCD_invidSendData>:

static void  LCD_invidSendData(u8 Copy_u8LCDID , u8 Copy_u8Data)
{
    40f8:	df 93       	push	r29
    40fa:	cf 93       	push	r28
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	60 97       	sbiw	r28, 0x10	; 16
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	8f 87       	std	Y+15, r24	; 0x0f
    410e:	68 8b       	std	Y+16, r22	; 0x10
	if(Copy_u8LCDID < LCD_NUM)
    4110:	8f 85       	ldd	r24, Y+15	; 0x0f
    4112:	88 23       	and	r24, r24
    4114:	09 f0       	breq	.+2      	; 0x4118 <LCD_invidSendData+0x20>
    4116:	ce c2       	rjmp	.+1436   	; 0x46b4 <LCD_invidSendData+0x5bc>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RWPin,DIO_u8LOW);
    4118:	8f 85       	ldd	r24, Y+15	; 0x0f
    411a:	28 2f       	mov	r18, r24
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	c9 01       	movw	r24, r18
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	82 0f       	add	r24, r18
    4126:	93 1f       	adc	r25, r19
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	82 1b       	sub	r24, r18
    4136:	93 0b       	sbc	r25, r19
    4138:	fc 01       	movw	r30, r24
    413a:	eb 57       	subi	r30, 0x7B	; 123
    413c:	fe 4f       	sbci	r31, 0xFE	; 254
    413e:	40 81       	ld	r20, Z
    4140:	8f 85       	ldd	r24, Y+15	; 0x0f
    4142:	28 2f       	mov	r18, r24
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	c9 01       	movw	r24, r18
    4148:	88 0f       	add	r24, r24
    414a:	99 1f       	adc	r25, r25
    414c:	82 0f       	add	r24, r18
    414e:	93 1f       	adc	r25, r19
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	88 0f       	add	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	82 1b       	sub	r24, r18
    415e:	93 0b       	sbc	r25, r19
    4160:	fc 01       	movw	r30, r24
    4162:	ea 57       	subi	r30, 0x7A	; 122
    4164:	fe 4f       	sbci	r31, 0xFE	; 254
    4166:	90 81       	ld	r25, Z
    4168:	84 2f       	mov	r24, r20
    416a:	69 2f       	mov	r22, r25
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    4172:	8f 85       	ldd	r24, Y+15	; 0x0f
    4174:	28 2f       	mov	r18, r24
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	c9 01       	movw	r24, r18
    417a:	88 0f       	add	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	82 0f       	add	r24, r18
    4180:	93 1f       	adc	r25, r19
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	88 0f       	add	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	82 1b       	sub	r24, r18
    4190:	93 0b       	sbc	r25, r19
    4192:	fc 01       	movw	r30, r24
    4194:	e9 57       	subi	r30, 0x79	; 121
    4196:	fe 4f       	sbci	r31, 0xFE	; 254
    4198:	40 81       	ld	r20, Z
    419a:	8f 85       	ldd	r24, Y+15	; 0x0f
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	c9 01       	movw	r24, r18
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	82 0f       	add	r24, r18
    41a8:	93 1f       	adc	r25, r19
    41aa:	88 0f       	add	r24, r24
    41ac:	99 1f       	adc	r25, r25
    41ae:	88 0f       	add	r24, r24
    41b0:	99 1f       	adc	r25, r25
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	82 1b       	sub	r24, r18
    41b8:	93 0b       	sbc	r25, r19
    41ba:	fc 01       	movw	r30, r24
    41bc:	e8 57       	subi	r30, 0x78	; 120
    41be:	fe 4f       	sbci	r31, 0xFE	; 254
    41c0:	90 81       	ld	r25, Z
    41c2:	84 2f       	mov	r24, r20
    41c4:	69 2f       	mov	r22, r25
    41c6:	40 e0       	ldi	r20, 0x00	; 0
    41c8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D7Pin,(Copy_u8Data>>BIT_SEVEN)&BIT_MASKING);
    41cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ce:	28 2f       	mov	r18, r24
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	c9 01       	movw	r24, r18
    41d4:	88 0f       	add	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	82 0f       	add	r24, r18
    41da:	93 1f       	adc	r25, r19
    41dc:	88 0f       	add	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	88 0f       	add	r24, r24
    41e2:	99 1f       	adc	r25, r25
    41e4:	88 0f       	add	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	82 1b       	sub	r24, r18
    41ea:	93 0b       	sbc	r25, r19
    41ec:	fc 01       	movw	r30, r24
    41ee:	e7 57       	subi	r30, 0x77	; 119
    41f0:	fe 4f       	sbci	r31, 0xFE	; 254
    41f2:	40 81       	ld	r20, Z
    41f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f6:	28 2f       	mov	r18, r24
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	c9 01       	movw	r24, r18
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	82 0f       	add	r24, r18
    4202:	93 1f       	adc	r25, r19
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	88 0f       	add	r24, r24
    420a:	99 1f       	adc	r25, r25
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	82 1b       	sub	r24, r18
    4212:	93 0b       	sbc	r25, r19
    4214:	fc 01       	movw	r30, r24
    4216:	e6 57       	subi	r30, 0x76	; 118
    4218:	fe 4f       	sbci	r31, 0xFE	; 254
    421a:	20 81       	ld	r18, Z
    421c:	88 89       	ldd	r24, Y+16	; 0x10
    421e:	98 2f       	mov	r25, r24
    4220:	99 1f       	adc	r25, r25
    4222:	99 27       	eor	r25, r25
    4224:	99 1f       	adc	r25, r25
    4226:	84 2f       	mov	r24, r20
    4228:	62 2f       	mov	r22, r18
    422a:	49 2f       	mov	r20, r25
    422c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D6Pin,(Copy_u8Data>>BIT_SIX)&BIT_MASKING);
    4230:	8f 85       	ldd	r24, Y+15	; 0x0f
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	c9 01       	movw	r24, r18
    4238:	88 0f       	add	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	82 0f       	add	r24, r18
    423e:	93 1f       	adc	r25, r19
    4240:	88 0f       	add	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	88 0f       	add	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	88 0f       	add	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	82 1b       	sub	r24, r18
    424e:	93 0b       	sbc	r25, r19
    4250:	fc 01       	movw	r30, r24
    4252:	e5 57       	subi	r30, 0x75	; 117
    4254:	fe 4f       	sbci	r31, 0xFE	; 254
    4256:	40 81       	ld	r20, Z
    4258:	8f 85       	ldd	r24, Y+15	; 0x0f
    425a:	28 2f       	mov	r18, r24
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	c9 01       	movw	r24, r18
    4260:	88 0f       	add	r24, r24
    4262:	99 1f       	adc	r25, r25
    4264:	82 0f       	add	r24, r18
    4266:	93 1f       	adc	r25, r19
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	88 0f       	add	r24, r24
    426e:	99 1f       	adc	r25, r25
    4270:	88 0f       	add	r24, r24
    4272:	99 1f       	adc	r25, r25
    4274:	82 1b       	sub	r24, r18
    4276:	93 0b       	sbc	r25, r19
    4278:	fc 01       	movw	r30, r24
    427a:	e4 57       	subi	r30, 0x74	; 116
    427c:	fe 4f       	sbci	r31, 0xFE	; 254
    427e:	20 81       	ld	r18, Z
    4280:	88 89       	ldd	r24, Y+16	; 0x10
    4282:	82 95       	swap	r24
    4284:	86 95       	lsr	r24
    4286:	86 95       	lsr	r24
    4288:	83 70       	andi	r24, 0x03	; 3
    428a:	98 2f       	mov	r25, r24
    428c:	91 70       	andi	r25, 0x01	; 1
    428e:	84 2f       	mov	r24, r20
    4290:	62 2f       	mov	r22, r18
    4292:	49 2f       	mov	r20, r25
    4294:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D5Pin,(Copy_u8Data>>BIT_FIVE)&BIT_MASKING);
    4298:	8f 85       	ldd	r24, Y+15	; 0x0f
    429a:	28 2f       	mov	r18, r24
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	c9 01       	movw	r24, r18
    42a0:	88 0f       	add	r24, r24
    42a2:	99 1f       	adc	r25, r25
    42a4:	82 0f       	add	r24, r18
    42a6:	93 1f       	adc	r25, r19
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	88 0f       	add	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	88 0f       	add	r24, r24
    42b2:	99 1f       	adc	r25, r25
    42b4:	82 1b       	sub	r24, r18
    42b6:	93 0b       	sbc	r25, r19
    42b8:	fc 01       	movw	r30, r24
    42ba:	e3 57       	subi	r30, 0x73	; 115
    42bc:	fe 4f       	sbci	r31, 0xFE	; 254
    42be:	40 81       	ld	r20, Z
    42c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c2:	28 2f       	mov	r18, r24
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	c9 01       	movw	r24, r18
    42c8:	88 0f       	add	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	82 0f       	add	r24, r18
    42ce:	93 1f       	adc	r25, r19
    42d0:	88 0f       	add	r24, r24
    42d2:	99 1f       	adc	r25, r25
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	88 0f       	add	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	82 1b       	sub	r24, r18
    42de:	93 0b       	sbc	r25, r19
    42e0:	fc 01       	movw	r30, r24
    42e2:	e2 57       	subi	r30, 0x72	; 114
    42e4:	fe 4f       	sbci	r31, 0xFE	; 254
    42e6:	20 81       	ld	r18, Z
    42e8:	88 89       	ldd	r24, Y+16	; 0x10
    42ea:	82 95       	swap	r24
    42ec:	86 95       	lsr	r24
    42ee:	87 70       	andi	r24, 0x07	; 7
    42f0:	98 2f       	mov	r25, r24
    42f2:	91 70       	andi	r25, 0x01	; 1
    42f4:	84 2f       	mov	r24, r20
    42f6:	62 2f       	mov	r22, r18
    42f8:	49 2f       	mov	r20, r25
    42fa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D4Pin,(Copy_u8Data>>BIT_FOUR)&BIT_MASKING);
    42fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4300:	28 2f       	mov	r18, r24
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	c9 01       	movw	r24, r18
    4306:	88 0f       	add	r24, r24
    4308:	99 1f       	adc	r25, r25
    430a:	82 0f       	add	r24, r18
    430c:	93 1f       	adc	r25, r19
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	82 1b       	sub	r24, r18
    431c:	93 0b       	sbc	r25, r19
    431e:	fc 01       	movw	r30, r24
    4320:	e1 57       	subi	r30, 0x71	; 113
    4322:	fe 4f       	sbci	r31, 0xFE	; 254
    4324:	40 81       	ld	r20, Z
    4326:	8f 85       	ldd	r24, Y+15	; 0x0f
    4328:	28 2f       	mov	r18, r24
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	c9 01       	movw	r24, r18
    432e:	88 0f       	add	r24, r24
    4330:	99 1f       	adc	r25, r25
    4332:	82 0f       	add	r24, r18
    4334:	93 1f       	adc	r25, r19
    4336:	88 0f       	add	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	88 0f       	add	r24, r24
    433c:	99 1f       	adc	r25, r25
    433e:	88 0f       	add	r24, r24
    4340:	99 1f       	adc	r25, r25
    4342:	82 1b       	sub	r24, r18
    4344:	93 0b       	sbc	r25, r19
    4346:	fc 01       	movw	r30, r24
    4348:	e0 57       	subi	r30, 0x70	; 112
    434a:	fe 4f       	sbci	r31, 0xFE	; 254
    434c:	20 81       	ld	r18, Z
    434e:	88 89       	ldd	r24, Y+16	; 0x10
    4350:	82 95       	swap	r24
    4352:	8f 70       	andi	r24, 0x0F	; 15
    4354:	98 2f       	mov	r25, r24
    4356:	91 70       	andi	r25, 0x01	; 1
    4358:	84 2f       	mov	r24, r20
    435a:	62 2f       	mov	r22, r18
    435c:	49 2f       	mov	r20, r25
    435e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

		if(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8LCDMode == EIGHT_BIT)
    4362:	8f 85       	ldd	r24, Y+15	; 0x0f
    4364:	28 2f       	mov	r18, r24
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	c9 01       	movw	r24, r18
    436a:	88 0f       	add	r24, r24
    436c:	99 1f       	adc	r25, r25
    436e:	82 0f       	add	r24, r18
    4370:	93 1f       	adc	r25, r19
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	88 0f       	add	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	88 0f       	add	r24, r24
    437c:	99 1f       	adc	r25, r25
    437e:	82 1b       	sub	r24, r18
    4380:	93 0b       	sbc	r25, r19
    4382:	fc 01       	movw	r30, r24
    4384:	e7 56       	subi	r30, 0x67	; 103
    4386:	fe 4f       	sbci	r31, 0xFE	; 254
    4388:	80 81       	ld	r24, Z
    438a:	88 30       	cpi	r24, 0x08	; 8
    438c:	09 f0       	breq	.+2      	; 0x4390 <LCD_invidSendData+0x298>
    438e:	c6 c0       	rjmp	.+396    	; 0x451c <LCD_invidSendData+0x424>
		{
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D3Pin,(Copy_u8Data>>BIT_THREE)&BIT_MASKING);
    4390:	8f 85       	ldd	r24, Y+15	; 0x0f
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	c9 01       	movw	r24, r18
    4398:	88 0f       	add	r24, r24
    439a:	99 1f       	adc	r25, r25
    439c:	82 0f       	add	r24, r18
    439e:	93 1f       	adc	r25, r19
    43a0:	88 0f       	add	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	88 0f       	add	r24, r24
    43a6:	99 1f       	adc	r25, r25
    43a8:	88 0f       	add	r24, r24
    43aa:	99 1f       	adc	r25, r25
    43ac:	82 1b       	sub	r24, r18
    43ae:	93 0b       	sbc	r25, r19
    43b0:	fc 01       	movw	r30, r24
    43b2:	ef 56       	subi	r30, 0x6F	; 111
    43b4:	fe 4f       	sbci	r31, 0xFE	; 254
    43b6:	40 81       	ld	r20, Z
    43b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	c9 01       	movw	r24, r18
    43c0:	88 0f       	add	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	82 0f       	add	r24, r18
    43c6:	93 1f       	adc	r25, r19
    43c8:	88 0f       	add	r24, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	88 0f       	add	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	88 0f       	add	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	82 1b       	sub	r24, r18
    43d6:	93 0b       	sbc	r25, r19
    43d8:	fc 01       	movw	r30, r24
    43da:	ee 56       	subi	r30, 0x6E	; 110
    43dc:	fe 4f       	sbci	r31, 0xFE	; 254
    43de:	20 81       	ld	r18, Z
    43e0:	88 89       	ldd	r24, Y+16	; 0x10
    43e2:	86 95       	lsr	r24
    43e4:	86 95       	lsr	r24
    43e6:	86 95       	lsr	r24
    43e8:	98 2f       	mov	r25, r24
    43ea:	91 70       	andi	r25, 0x01	; 1
    43ec:	84 2f       	mov	r24, r20
    43ee:	62 2f       	mov	r22, r18
    43f0:	49 2f       	mov	r20, r25
    43f2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D2Pin,(Copy_u8Data>>BIT_TWO)&BIT_MASKING);
    43f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f8:	28 2f       	mov	r18, r24
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	c9 01       	movw	r24, r18
    43fe:	88 0f       	add	r24, r24
    4400:	99 1f       	adc	r25, r25
    4402:	82 0f       	add	r24, r18
    4404:	93 1f       	adc	r25, r19
    4406:	88 0f       	add	r24, r24
    4408:	99 1f       	adc	r25, r25
    440a:	88 0f       	add	r24, r24
    440c:	99 1f       	adc	r25, r25
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	82 1b       	sub	r24, r18
    4414:	93 0b       	sbc	r25, r19
    4416:	fc 01       	movw	r30, r24
    4418:	ed 56       	subi	r30, 0x6D	; 109
    441a:	fe 4f       	sbci	r31, 0xFE	; 254
    441c:	40 81       	ld	r20, Z
    441e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	c9 01       	movw	r24, r18
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	82 0f       	add	r24, r18
    442c:	93 1f       	adc	r25, r19
    442e:	88 0f       	add	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	82 1b       	sub	r24, r18
    443c:	93 0b       	sbc	r25, r19
    443e:	fc 01       	movw	r30, r24
    4440:	ec 56       	subi	r30, 0x6C	; 108
    4442:	fe 4f       	sbci	r31, 0xFE	; 254
    4444:	20 81       	ld	r18, Z
    4446:	88 89       	ldd	r24, Y+16	; 0x10
    4448:	86 95       	lsr	r24
    444a:	86 95       	lsr	r24
    444c:	98 2f       	mov	r25, r24
    444e:	91 70       	andi	r25, 0x01	; 1
    4450:	84 2f       	mov	r24, r20
    4452:	62 2f       	mov	r22, r18
    4454:	49 2f       	mov	r20, r25
    4456:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D1Pin,(Copy_u8Data>>BIT_ONE)&BIT_MASKING);
    445a:	8f 85       	ldd	r24, Y+15	; 0x0f
    445c:	28 2f       	mov	r18, r24
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	c9 01       	movw	r24, r18
    4462:	88 0f       	add	r24, r24
    4464:	99 1f       	adc	r25, r25
    4466:	82 0f       	add	r24, r18
    4468:	93 1f       	adc	r25, r19
    446a:	88 0f       	add	r24, r24
    446c:	99 1f       	adc	r25, r25
    446e:	88 0f       	add	r24, r24
    4470:	99 1f       	adc	r25, r25
    4472:	88 0f       	add	r24, r24
    4474:	99 1f       	adc	r25, r25
    4476:	82 1b       	sub	r24, r18
    4478:	93 0b       	sbc	r25, r19
    447a:	fc 01       	movw	r30, r24
    447c:	eb 56       	subi	r30, 0x6B	; 107
    447e:	fe 4f       	sbci	r31, 0xFE	; 254
    4480:	40 81       	ld	r20, Z
    4482:	8f 85       	ldd	r24, Y+15	; 0x0f
    4484:	28 2f       	mov	r18, r24
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	c9 01       	movw	r24, r18
    448a:	88 0f       	add	r24, r24
    448c:	99 1f       	adc	r25, r25
    448e:	82 0f       	add	r24, r18
    4490:	93 1f       	adc	r25, r19
    4492:	88 0f       	add	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	88 0f       	add	r24, r24
    4498:	99 1f       	adc	r25, r25
    449a:	88 0f       	add	r24, r24
    449c:	99 1f       	adc	r25, r25
    449e:	82 1b       	sub	r24, r18
    44a0:	93 0b       	sbc	r25, r19
    44a2:	fc 01       	movw	r30, r24
    44a4:	ea 56       	subi	r30, 0x6A	; 106
    44a6:	fe 4f       	sbci	r31, 0xFE	; 254
    44a8:	20 81       	ld	r18, Z
    44aa:	88 89       	ldd	r24, Y+16	; 0x10
    44ac:	86 95       	lsr	r24
    44ae:	98 2f       	mov	r25, r24
    44b0:	91 70       	andi	r25, 0x01	; 1
    44b2:	84 2f       	mov	r24, r20
    44b4:	62 2f       	mov	r22, r18
    44b6:	49 2f       	mov	r20, r25
    44b8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Port,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8D0Pin,(Copy_u8Data>>BIT_ZERO)&BIT_MASKING);
    44bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    44be:	28 2f       	mov	r18, r24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	c9 01       	movw	r24, r18
    44c4:	88 0f       	add	r24, r24
    44c6:	99 1f       	adc	r25, r25
    44c8:	82 0f       	add	r24, r18
    44ca:	93 1f       	adc	r25, r19
    44cc:	88 0f       	add	r24, r24
    44ce:	99 1f       	adc	r25, r25
    44d0:	88 0f       	add	r24, r24
    44d2:	99 1f       	adc	r25, r25
    44d4:	88 0f       	add	r24, r24
    44d6:	99 1f       	adc	r25, r25
    44d8:	82 1b       	sub	r24, r18
    44da:	93 0b       	sbc	r25, r19
    44dc:	fc 01       	movw	r30, r24
    44de:	e9 56       	subi	r30, 0x69	; 105
    44e0:	fe 4f       	sbci	r31, 0xFE	; 254
    44e2:	40 81       	ld	r20, Z
    44e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44e6:	28 2f       	mov	r18, r24
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	c9 01       	movw	r24, r18
    44ec:	88 0f       	add	r24, r24
    44ee:	99 1f       	adc	r25, r25
    44f0:	82 0f       	add	r24, r18
    44f2:	93 1f       	adc	r25, r19
    44f4:	88 0f       	add	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	88 0f       	add	r24, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	82 1b       	sub	r24, r18
    4502:	93 0b       	sbc	r25, r19
    4504:	fc 01       	movw	r30, r24
    4506:	e8 56       	subi	r30, 0x68	; 104
    4508:	fe 4f       	sbci	r31, 0xFE	; 254
    450a:	20 81       	ld	r18, Z
    450c:	88 89       	ldd	r24, Y+16	; 0x10
    450e:	98 2f       	mov	r25, r24
    4510:	91 70       	andi	r25, 0x01	; 1
    4512:	84 2f       	mov	r24, r20
    4514:	62 2f       	mov	r22, r18
    4516:	49 2f       	mov	r20, r25
    4518:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		}
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8HIGH);
    451c:	8f 85       	ldd	r24, Y+15	; 0x0f
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	c9 01       	movw	r24, r18
    4524:	88 0f       	add	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	82 0f       	add	r24, r18
    452a:	93 1f       	adc	r25, r19
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	82 1b       	sub	r24, r18
    453a:	93 0b       	sbc	r25, r19
    453c:	fc 01       	movw	r30, r24
    453e:	e9 57       	subi	r30, 0x79	; 121
    4540:	fe 4f       	sbci	r31, 0xFE	; 254
    4542:	40 81       	ld	r20, Z
    4544:	8f 85       	ldd	r24, Y+15	; 0x0f
    4546:	28 2f       	mov	r18, r24
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	c9 01       	movw	r24, r18
    454c:	88 0f       	add	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	82 0f       	add	r24, r18
    4552:	93 1f       	adc	r25, r19
    4554:	88 0f       	add	r24, r24
    4556:	99 1f       	adc	r25, r25
    4558:	88 0f       	add	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	88 0f       	add	r24, r24
    455e:	99 1f       	adc	r25, r25
    4560:	82 1b       	sub	r24, r18
    4562:	93 0b       	sbc	r25, r19
    4564:	fc 01       	movw	r30, r24
    4566:	e8 57       	subi	r30, 0x78	; 120
    4568:	fe 4f       	sbci	r31, 0xFE	; 254
    456a:	90 81       	ld	r25, Z
    456c:	84 2f       	mov	r24, r20
    456e:	69 2f       	mov	r22, r25
    4570:	41 e0       	ldi	r20, 0x01	; 1
    4572:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	a0 e2       	ldi	r26, 0x20	; 32
    457c:	b1 e4       	ldi	r27, 0x41	; 65
    457e:	8b 87       	std	Y+11, r24	; 0x0b
    4580:	9c 87       	std	Y+12, r25	; 0x0c
    4582:	ad 87       	std	Y+13, r26	; 0x0d
    4584:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4586:	6b 85       	ldd	r22, Y+11	; 0x0b
    4588:	7c 85       	ldd	r23, Y+12	; 0x0c
    458a:	8d 85       	ldd	r24, Y+13	; 0x0d
    458c:	9e 85       	ldd	r25, Y+14	; 0x0e
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	4a ef       	ldi	r20, 0xFA	; 250
    4594:	53 e4       	ldi	r21, 0x43	; 67
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	8f 83       	std	Y+7, r24	; 0x07
    45a0:	98 87       	std	Y+8, r25	; 0x08
    45a2:	a9 87       	std	Y+9, r26	; 0x09
    45a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45a6:	6f 81       	ldd	r22, Y+7	; 0x07
    45a8:	78 85       	ldd	r23, Y+8	; 0x08
    45aa:	89 85       	ldd	r24, Y+9	; 0x09
    45ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e8       	ldi	r20, 0x80	; 128
    45b4:	5f e3       	ldi	r21, 0x3F	; 63
    45b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ba:	88 23       	and	r24, r24
    45bc:	2c f4       	brge	.+10     	; 0x45c8 <LCD_invidSendData+0x4d0>
		__ticks = 1;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	9e 83       	std	Y+6, r25	; 0x06
    45c4:	8d 83       	std	Y+5, r24	; 0x05
    45c6:	3f c0       	rjmp	.+126    	; 0x4646 <LCD_invidSendData+0x54e>
	else if (__tmp > 65535)
    45c8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ca:	78 85       	ldd	r23, Y+8	; 0x08
    45cc:	89 85       	ldd	r24, Y+9	; 0x09
    45ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	3f ef       	ldi	r19, 0xFF	; 255
    45d4:	4f e7       	ldi	r20, 0x7F	; 127
    45d6:	57 e4       	ldi	r21, 0x47	; 71
    45d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45dc:	18 16       	cp	r1, r24
    45de:	4c f5       	brge	.+82     	; 0x4632 <LCD_invidSendData+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	40 e2       	ldi	r20, 0x20	; 32
    45ee:	51 e4       	ldi	r21, 0x41	; 65
    45f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
    4608:	0f c0       	rjmp	.+30     	; 0x4628 <LCD_invidSendData+0x530>
    460a:	82 e3       	ldi	r24, 0x32	; 50
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	9c 83       	std	Y+4, r25	; 0x04
    4610:	8b 83       	std	Y+3, r24	; 0x03
    4612:	8b 81       	ldd	r24, Y+3	; 0x03
    4614:	9c 81       	ldd	r25, Y+4	; 0x04
    4616:	01 97       	sbiw	r24, 0x01	; 1
    4618:	f1 f7       	brne	.-4      	; 0x4616 <LCD_invidSendData+0x51e>
    461a:	9c 83       	std	Y+4, r25	; 0x04
    461c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461e:	8d 81       	ldd	r24, Y+5	; 0x05
    4620:	9e 81       	ldd	r25, Y+6	; 0x06
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	9e 83       	std	Y+6, r25	; 0x06
    4626:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4628:	8d 81       	ldd	r24, Y+5	; 0x05
    462a:	9e 81       	ldd	r25, Y+6	; 0x06
    462c:	00 97       	sbiw	r24, 0x00	; 0
    462e:	69 f7       	brne	.-38     	; 0x460a <LCD_invidSendData+0x512>
    4630:	14 c0       	rjmp	.+40     	; 0x465a <LCD_invidSendData+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4632:	6f 81       	ldd	r22, Y+7	; 0x07
    4634:	78 85       	ldd	r23, Y+8	; 0x08
    4636:	89 85       	ldd	r24, Y+9	; 0x09
    4638:	9a 85       	ldd	r25, Y+10	; 0x0a
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9e 83       	std	Y+6, r25	; 0x06
    4644:	8d 83       	std	Y+5, r24	; 0x05
    4646:	8d 81       	ldd	r24, Y+5	; 0x05
    4648:	9e 81       	ldd	r25, Y+6	; 0x06
    464a:	9a 83       	std	Y+2, r25	; 0x02
    464c:	89 83       	std	Y+1, r24	; 0x01
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	9a 81       	ldd	r25, Y+2	; 0x02
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <LCD_invidSendData+0x55a>
    4656:	9a 83       	std	Y+2, r25	; 0x02
    4658:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8ENPin,DIO_u8LOW);
    465a:	8f 85       	ldd	r24, Y+15	; 0x0f
    465c:	28 2f       	mov	r18, r24
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	c9 01       	movw	r24, r18
    4662:	88 0f       	add	r24, r24
    4664:	99 1f       	adc	r25, r25
    4666:	82 0f       	add	r24, r18
    4668:	93 1f       	adc	r25, r19
    466a:	88 0f       	add	r24, r24
    466c:	99 1f       	adc	r25, r25
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	88 0f       	add	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	82 1b       	sub	r24, r18
    4678:	93 0b       	sbc	r25, r19
    467a:	fc 01       	movw	r30, r24
    467c:	e9 57       	subi	r30, 0x79	; 121
    467e:	fe 4f       	sbci	r31, 0xFE	; 254
    4680:	40 81       	ld	r20, Z
    4682:	8f 85       	ldd	r24, Y+15	; 0x0f
    4684:	28 2f       	mov	r18, r24
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	c9 01       	movw	r24, r18
    468a:	88 0f       	add	r24, r24
    468c:	99 1f       	adc	r25, r25
    468e:	82 0f       	add	r24, r18
    4690:	93 1f       	adc	r25, r19
    4692:	88 0f       	add	r24, r24
    4694:	99 1f       	adc	r25, r25
    4696:	88 0f       	add	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	82 1b       	sub	r24, r18
    46a0:	93 0b       	sbc	r25, r19
    46a2:	fc 01       	movw	r30, r24
    46a4:	e8 57       	subi	r30, 0x78	; 120
    46a6:	fe 4f       	sbci	r31, 0xFE	; 254
    46a8:	90 81       	ld	r25, Z
    46aa:	84 2f       	mov	r24, r20
    46ac:	69 2f       	mov	r22, r25
    46ae:	40 e0       	ldi	r20, 0x00	; 0
    46b0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
	}
}
    46b4:	60 96       	adiw	r28, 0x10	; 16
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	f8 94       	cli
    46ba:	de bf       	out	0x3e, r29	; 62
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	cd bf       	out	0x3d, r28	; 61
    46c0:	cf 91       	pop	r28
    46c2:	df 91       	pop	r29
    46c4:	08 95       	ret

000046c6 <LCD_enuDisplayFloatNum>:
ES_T LCD_enuDisplayFloatNum(u8 Copy_u8LCDID ,f32 Copy_f32Num)
{
    46c6:	df 93       	push	r29
    46c8:	cf 93       	push	r28
    46ca:	cd b7       	in	r28, 0x3d	; 61
    46cc:	de b7       	in	r29, 0x3e	; 62
    46ce:	66 97       	sbiw	r28, 0x16	; 22
    46d0:	0f b6       	in	r0, 0x3f	; 63
    46d2:	f8 94       	cli
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	0f be       	out	0x3f, r0	; 63
    46d8:	cd bf       	out	0x3d, r28	; 61
    46da:	8a 8b       	std	Y+18, r24	; 0x12
    46dc:	4b 8b       	std	Y+19, r20	; 0x13
    46de:	5c 8b       	std	Y+20, r21	; 0x14
    46e0:	6d 8b       	std	Y+21, r22	; 0x15
    46e2:	7e 8b       	std	Y+22, r23	; 0x16
	ES_T Local_enuErrorState = ES_NOK;
    46e4:	19 8a       	std	Y+17, r1	; 0x11
	if(Copy_u8LCDID < LCD_NUM)
    46e6:	8a 89       	ldd	r24, Y+18	; 0x12
    46e8:	88 23       	and	r24, r24
    46ea:	09 f0       	breq	.+2      	; 0x46ee <LCD_enuDisplayFloatNum+0x28>
    46ec:	8a c1       	rjmp	.+788    	; 0x4a02 <LCD_enuDisplayFloatNum+0x33c>
	{
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    46ee:	8a 89       	ldd	r24, Y+18	; 0x12
    46f0:	28 2f       	mov	r18, r24
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	c9 01       	movw	r24, r18
    46f6:	88 0f       	add	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	82 0f       	add	r24, r18
    46fc:	93 1f       	adc	r25, r19
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	82 1b       	sub	r24, r18
    470c:	93 0b       	sbc	r25, r19
    470e:	fc 01       	movw	r30, r24
    4710:	ed 57       	subi	r30, 0x7D	; 125
    4712:	fe 4f       	sbci	r31, 0xFE	; 254
    4714:	40 81       	ld	r20, Z
    4716:	8a 89       	ldd	r24, Y+18	; 0x12
    4718:	28 2f       	mov	r18, r24
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	c9 01       	movw	r24, r18
    471e:	88 0f       	add	r24, r24
    4720:	99 1f       	adc	r25, r25
    4722:	82 0f       	add	r24, r18
    4724:	93 1f       	adc	r25, r19
    4726:	88 0f       	add	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	82 1b       	sub	r24, r18
    4734:	93 0b       	sbc	r25, r19
    4736:	fc 01       	movw	r30, r24
    4738:	ec 57       	subi	r30, 0x7C	; 124
    473a:	fe 4f       	sbci	r31, 0xFE	; 254
    473c:	90 81       	ld	r25, Z
    473e:	84 2f       	mov	r24, r20
    4740:	69 2f       	mov	r22, r25
    4742:	41 e0       	ldi	r20, 0x01	; 1
    4744:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>

	s32 Local_s32ReverseINT=0;
    4748:	18 8a       	std	Y+16, r1	; 0x10
    474a:	1f 86       	std	Y+15, r1	; 0x0f
	s32 Local_s32ReverseDEC=0;
    474c:	1e 86       	std	Y+14, r1	; 0x0e
    474e:	1d 86       	std	Y+13, r1	; 0x0d
	u8 Local_u8RemainderINT=0 ,Local_u8RemainderDEC=0, Local_u8NumDigitINT=0 , Local_u8NumDigitDEC=0;
    4750:	1c 86       	std	Y+12, r1	; 0x0c
    4752:	1b 86       	std	Y+11, r1	; 0x0b
    4754:	1a 86       	std	Y+10, r1	; 0x0a
    4756:	19 86       	std	Y+9, r1	; 0x09

	u32 Local_u32IntPart1=0 ; f32 Local_f32FloatPart=0.0 ;
    4758:	18 86       	std	Y+8, r1	; 0x08
    475a:	1f 82       	std	Y+7, r1	; 0x07
    475c:	80 e0       	ldi	r24, 0x00	; 0
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	a0 e0       	ldi	r26, 0x00	; 0
    4762:	b0 e0       	ldi	r27, 0x00	; 0
    4764:	8b 83       	std	Y+3, r24	; 0x03
    4766:	9c 83       	std	Y+4, r25	; 0x04
    4768:	ad 83       	std	Y+5, r26	; 0x05
    476a:	be 83       	std	Y+6, r27	; 0x06
	u32 Local_u32IntPart2=0 ;
    476c:	1a 82       	std	Y+2, r1	; 0x02
    476e:	19 82       	std	Y+1, r1	; 0x01
	Local_u32IntPart1 = (u32) Copy_f32Num;
    4770:	6b 89       	ldd	r22, Y+19	; 0x13
    4772:	7c 89       	ldd	r23, Y+20	; 0x14
    4774:	8d 89       	ldd	r24, Y+21	; 0x15
    4776:	9e 89       	ldd	r25, Y+22	; 0x16
    4778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	98 87       	std	Y+8, r25	; 0x08
    4782:	8f 83       	std	Y+7, r24	; 0x07

	Local_f32FloatPart = Copy_f32Num - Local_u32IntPart1;
    4784:	8f 81       	ldd	r24, Y+7	; 0x07
    4786:	98 85       	ldd	r25, Y+8	; 0x08
    4788:	cc 01       	movw	r24, r24
    478a:	a0 e0       	ldi	r26, 0x00	; 0
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4796:	9b 01       	movw	r18, r22
    4798:	ac 01       	movw	r20, r24
    479a:	6b 89       	ldd	r22, Y+19	; 0x13
    479c:	7c 89       	ldd	r23, Y+20	; 0x14
    479e:	8d 89       	ldd	r24, Y+21	; 0x15
    47a0:	9e 89       	ldd	r25, Y+22	; 0x16
    47a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	8b 83       	std	Y+3, r24	; 0x03
    47ac:	9c 83       	std	Y+4, r25	; 0x04
    47ae:	ad 83       	std	Y+5, r26	; 0x05
    47b0:	be 83       	std	Y+6, r27	; 0x06
	Local_u32IntPart2 = Local_f32FloatPart * 10000;
    47b2:	6b 81       	ldd	r22, Y+3	; 0x03
    47b4:	7c 81       	ldd	r23, Y+4	; 0x04
    47b6:	8d 81       	ldd	r24, Y+5	; 0x05
    47b8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e4       	ldi	r19, 0x40	; 64
    47be:	4c e1       	ldi	r20, 0x1C	; 28
    47c0:	56 e4       	ldi	r21, 0x46	; 70
    47c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	bc 01       	movw	r22, r24
    47cc:	cd 01       	movw	r24, r26
    47ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	9a 83       	std	Y+2, r25	; 0x02
    47d8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_f32Num <0)
    47da:	6b 89       	ldd	r22, Y+19	; 0x13
    47dc:	7c 89       	ldd	r23, Y+20	; 0x14
    47de:	8d 89       	ldd	r24, Y+21	; 0x15
    47e0:	9e 89       	ldd	r25, Y+22	; 0x16
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e0       	ldi	r20, 0x00	; 0
    47e8:	50 e0       	ldi	r21, 0x00	; 0
    47ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47ee:	88 23       	and	r24, r24
    47f0:	b4 f5       	brge	.+108    	; 0x485e <LCD_enuDisplayFloatNum+0x198>
	{
		LCD_invidSendData(Copy_u8LCDID,'-');
    47f2:	8a 89       	ldd	r24, Y+18	; 0x12
    47f4:	6d e2       	ldi	r22, 0x2D	; 45
    47f6:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
		Copy_f32Num *= -1 ;
    47fa:	8b 89       	ldd	r24, Y+19	; 0x13
    47fc:	9c 89       	ldd	r25, Y+20	; 0x14
    47fe:	ad 89       	ldd	r26, Y+21	; 0x15
    4800:	be 89       	ldd	r27, Y+22	; 0x16
    4802:	b0 58       	subi	r27, 0x80	; 128
    4804:	8b 8b       	std	Y+19, r24	; 0x13
    4806:	9c 8b       	std	Y+20, r25	; 0x14
    4808:	ad 8b       	std	Y+21, r26	; 0x15
    480a:	be 8b       	std	Y+22, r27	; 0x16
    480c:	28 c0       	rjmp	.+80     	; 0x485e <LCD_enuDisplayFloatNum+0x198>
	}
	while (Local_u32IntPart1)
	{
		Local_u8RemainderINT = Local_u32IntPart1 % 10;
    480e:	8f 81       	ldd	r24, Y+7	; 0x07
    4810:	98 85       	ldd	r25, Y+8	; 0x08
    4812:	2a e0       	ldi	r18, 0x0A	; 10
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	b9 01       	movw	r22, r18
    4818:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__udivmodhi4>
    481c:	8c 87       	std	Y+12, r24	; 0x0c
		Local_s32ReverseINT = Local_s32ReverseINT * 10 + Local_u8RemainderINT;
    481e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4820:	98 89       	ldd	r25, Y+16	; 0x10
    4822:	9c 01       	movw	r18, r24
    4824:	22 0f       	add	r18, r18
    4826:	33 1f       	adc	r19, r19
    4828:	c9 01       	movw	r24, r18
    482a:	88 0f       	add	r24, r24
    482c:	99 1f       	adc	r25, r25
    482e:	88 0f       	add	r24, r24
    4830:	99 1f       	adc	r25, r25
    4832:	28 0f       	add	r18, r24
    4834:	39 1f       	adc	r19, r25
    4836:	8c 85       	ldd	r24, Y+12	; 0x0c
    4838:	88 2f       	mov	r24, r24
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	82 0f       	add	r24, r18
    483e:	93 1f       	adc	r25, r19
    4840:	98 8b       	std	Y+16, r25	; 0x10
    4842:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u32IntPart1 /=10;
    4844:	8f 81       	ldd	r24, Y+7	; 0x07
    4846:	98 85       	ldd	r25, Y+8	; 0x08
    4848:	2a e0       	ldi	r18, 0x0A	; 10
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	b9 01       	movw	r22, r18
    484e:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__udivmodhi4>
    4852:	cb 01       	movw	r24, r22
    4854:	98 87       	std	Y+8, r25	; 0x08
    4856:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8NumDigitINT ++;
    4858:	8a 85       	ldd	r24, Y+10	; 0x0a
    485a:	8f 5f       	subi	r24, 0xFF	; 255
    485c:	8a 87       	std	Y+10, r24	; 0x0a
	if(Copy_f32Num <0)
	{
		LCD_invidSendData(Copy_u8LCDID,'-');
		Copy_f32Num *= -1 ;
	}
	while (Local_u32IntPart1)
    485e:	8f 81       	ldd	r24, Y+7	; 0x07
    4860:	98 85       	ldd	r25, Y+8	; 0x08
    4862:	00 97       	sbiw	r24, 0x00	; 0
    4864:	a1 f6       	brne	.-88     	; 0x480e <LCD_enuDisplayFloatNum+0x148>
    4866:	28 c0       	rjmp	.+80     	; 0x48b8 <LCD_enuDisplayFloatNum+0x1f2>
		Local_u32IntPart1 /=10;
		Local_u8NumDigitINT ++;
	}
	while (Local_u32IntPart2)
	{
		Local_u8RemainderDEC = Local_u32IntPart2 % 10;
    4868:	89 81       	ldd	r24, Y+1	; 0x01
    486a:	9a 81       	ldd	r25, Y+2	; 0x02
    486c:	2a e0       	ldi	r18, 0x0A	; 10
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	b9 01       	movw	r22, r18
    4872:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__udivmodhi4>
    4876:	8b 87       	std	Y+11, r24	; 0x0b
		Local_s32ReverseDEC = Local_s32ReverseDEC * 10 + Local_u8RemainderDEC;
    4878:	8d 85       	ldd	r24, Y+13	; 0x0d
    487a:	9e 85       	ldd	r25, Y+14	; 0x0e
    487c:	9c 01       	movw	r18, r24
    487e:	22 0f       	add	r18, r18
    4880:	33 1f       	adc	r19, r19
    4882:	c9 01       	movw	r24, r18
    4884:	88 0f       	add	r24, r24
    4886:	99 1f       	adc	r25, r25
    4888:	88 0f       	add	r24, r24
    488a:	99 1f       	adc	r25, r25
    488c:	28 0f       	add	r18, r24
    488e:	39 1f       	adc	r19, r25
    4890:	8b 85       	ldd	r24, Y+11	; 0x0b
    4892:	88 2f       	mov	r24, r24
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	82 0f       	add	r24, r18
    4898:	93 1f       	adc	r25, r19
    489a:	9e 87       	std	Y+14, r25	; 0x0e
    489c:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u32IntPart2 /=10;
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	9a 81       	ldd	r25, Y+2	; 0x02
    48a2:	2a e0       	ldi	r18, 0x0A	; 10
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	b9 01       	movw	r22, r18
    48a8:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__udivmodhi4>
    48ac:	cb 01       	movw	r24, r22
    48ae:	9a 83       	std	Y+2, r25	; 0x02
    48b0:	89 83       	std	Y+1, r24	; 0x01
		Local_u8NumDigitDEC ++;
    48b2:	89 85       	ldd	r24, Y+9	; 0x09
    48b4:	8f 5f       	subi	r24, 0xFF	; 255
    48b6:	89 87       	std	Y+9, r24	; 0x09
		Local_u8RemainderINT = Local_u32IntPart1 % 10;
		Local_s32ReverseINT = Local_s32ReverseINT * 10 + Local_u8RemainderINT;
		Local_u32IntPart1 /=10;
		Local_u8NumDigitINT ++;
	}
	while (Local_u32IntPart2)
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	9a 81       	ldd	r25, Y+2	; 0x02
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	a1 f6       	brne	.-88     	; 0x4868 <LCD_enuDisplayFloatNum+0x1a2>
    48c0:	49 c0       	rjmp	.+146    	; 0x4954 <LCD_enuDisplayFloatNum+0x28e>
		Local_u32IntPart2 /=10;
		Local_u8NumDigitDEC ++;
	}
	while (Local_u8NumDigitINT)
	{
		Local_u8RemainderINT = Local_s32ReverseINT % 10;
    48c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48c4:	98 89       	ldd	r25, Y+16	; 0x10
    48c6:	2a e0       	ldi	r18, 0x0A	; 10
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	b9 01       	movw	r22, r18
    48cc:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    48d0:	8c 87       	std	Y+12, r24	; 0x0c
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    48d2:	8a 89       	ldd	r24, Y+18	; 0x12
    48d4:	28 2f       	mov	r18, r24
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	c9 01       	movw	r24, r18
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	82 0f       	add	r24, r18
    48e0:	93 1f       	adc	r25, r19
    48e2:	88 0f       	add	r24, r24
    48e4:	99 1f       	adc	r25, r25
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	88 0f       	add	r24, r24
    48ec:	99 1f       	adc	r25, r25
    48ee:	82 1b       	sub	r24, r18
    48f0:	93 0b       	sbc	r25, r19
    48f2:	fc 01       	movw	r30, r24
    48f4:	ed 57       	subi	r30, 0x7D	; 125
    48f6:	fe 4f       	sbci	r31, 0xFE	; 254
    48f8:	40 81       	ld	r20, Z
    48fa:	8a 89       	ldd	r24, Y+18	; 0x12
    48fc:	28 2f       	mov	r18, r24
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	c9 01       	movw	r24, r18
    4902:	88 0f       	add	r24, r24
    4904:	99 1f       	adc	r25, r25
    4906:	82 0f       	add	r24, r18
    4908:	93 1f       	adc	r25, r19
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	88 0f       	add	r24, r24
    4910:	99 1f       	adc	r25, r25
    4912:	88 0f       	add	r24, r24
    4914:	99 1f       	adc	r25, r25
    4916:	82 1b       	sub	r24, r18
    4918:	93 0b       	sbc	r25, r19
    491a:	fc 01       	movw	r30, r24
    491c:	ec 57       	subi	r30, 0x7C	; 124
    491e:	fe 4f       	sbci	r31, 0xFE	; 254
    4920:	90 81       	ld	r25, Z
    4922:	84 2f       	mov	r24, r20
    4924:	69 2f       	mov	r22, r25
    4926:	41 e0       	ldi	r20, 0x01	; 1
    4928:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderINT + '0'));
    492c:	8c 85       	ldd	r24, Y+12	; 0x0c
    492e:	98 2f       	mov	r25, r24
    4930:	90 5d       	subi	r25, 0xD0	; 208
    4932:	8a 89       	ldd	r24, Y+18	; 0x12
    4934:	69 2f       	mov	r22, r25
    4936:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
		Local_s32ReverseINT /= 10;
    493a:	8f 85       	ldd	r24, Y+15	; 0x0f
    493c:	98 89       	ldd	r25, Y+16	; 0x10
    493e:	2a e0       	ldi	r18, 0x0A	; 10
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	b9 01       	movw	r22, r18
    4944:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    4948:	cb 01       	movw	r24, r22
    494a:	98 8b       	std	Y+16, r25	; 0x10
    494c:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u8NumDigitINT --;
    494e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4950:	81 50       	subi	r24, 0x01	; 1
    4952:	8a 87       	std	Y+10, r24	; 0x0a
		Local_u8RemainderDEC = Local_u32IntPart2 % 10;
		Local_s32ReverseDEC = Local_s32ReverseDEC * 10 + Local_u8RemainderDEC;
		Local_u32IntPart2 /=10;
		Local_u8NumDigitDEC ++;
	}
	while (Local_u8NumDigitINT)
    4954:	8a 85       	ldd	r24, Y+10	; 0x0a
    4956:	88 23       	and	r24, r24
    4958:	09 f0       	breq	.+2      	; 0x495c <LCD_enuDisplayFloatNum+0x296>
    495a:	b3 cf       	rjmp	.-154    	; 0x48c2 <LCD_enuDisplayFloatNum+0x1fc>
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderINT + '0'));
		Local_s32ReverseINT /= 10;
		Local_u8NumDigitINT --;
	}
	LCD_invidSendData(Copy_u8LCDID,'.');
    495c:	8a 89       	ldd	r24, Y+18	; 0x12
    495e:	6e e2       	ldi	r22, 0x2E	; 46
    4960:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
    4964:	49 c0       	rjmp	.+146    	; 0x49f8 <LCD_enuDisplayFloatNum+0x332>
	while (Local_u8NumDigitDEC)
	{
		Local_u8RemainderDEC = Local_s32ReverseDEC % 10;
    4966:	8d 85       	ldd	r24, Y+13	; 0x0d
    4968:	9e 85       	ldd	r25, Y+14	; 0x0e
    496a:	2a e0       	ldi	r18, 0x0A	; 10
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	b9 01       	movw	r22, r18
    4970:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    4974:	8b 87       	std	Y+11, r24	; 0x0b
		DIO_enuSetPinValue(LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPort,LCD_AstrLCDConfig[Copy_u8LCDID].LCD_u8RSPin,DIO_u8HIGH);
    4976:	8a 89       	ldd	r24, Y+18	; 0x12
    4978:	28 2f       	mov	r18, r24
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	c9 01       	movw	r24, r18
    497e:	88 0f       	add	r24, r24
    4980:	99 1f       	adc	r25, r25
    4982:	82 0f       	add	r24, r18
    4984:	93 1f       	adc	r25, r19
    4986:	88 0f       	add	r24, r24
    4988:	99 1f       	adc	r25, r25
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	88 0f       	add	r24, r24
    4990:	99 1f       	adc	r25, r25
    4992:	82 1b       	sub	r24, r18
    4994:	93 0b       	sbc	r25, r19
    4996:	fc 01       	movw	r30, r24
    4998:	ed 57       	subi	r30, 0x7D	; 125
    499a:	fe 4f       	sbci	r31, 0xFE	; 254
    499c:	40 81       	ld	r20, Z
    499e:	8a 89       	ldd	r24, Y+18	; 0x12
    49a0:	28 2f       	mov	r18, r24
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	c9 01       	movw	r24, r18
    49a6:	88 0f       	add	r24, r24
    49a8:	99 1f       	adc	r25, r25
    49aa:	82 0f       	add	r24, r18
    49ac:	93 1f       	adc	r25, r19
    49ae:	88 0f       	add	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	88 0f       	add	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	82 1b       	sub	r24, r18
    49bc:	93 0b       	sbc	r25, r19
    49be:	fc 01       	movw	r30, r24
    49c0:	ec 57       	subi	r30, 0x7C	; 124
    49c2:	fe 4f       	sbci	r31, 0xFE	; 254
    49c4:	90 81       	ld	r25, Z
    49c6:	84 2f       	mov	r24, r20
    49c8:	69 2f       	mov	r22, r25
    49ca:	41 e0       	ldi	r20, 0x01	; 1
    49cc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderDEC + '0'));
    49d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    49d2:	98 2f       	mov	r25, r24
    49d4:	90 5d       	subi	r25, 0xD0	; 208
    49d6:	8a 89       	ldd	r24, Y+18	; 0x12
    49d8:	69 2f       	mov	r22, r25
    49da:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <LCD_invidSendData>
		Local_s32ReverseDEC /= 10;
    49de:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e2:	2a e0       	ldi	r18, 0x0A	; 10
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	b9 01       	movw	r22, r18
    49e8:	0e 94 ef 31 	call	0x63de	; 0x63de <__divmodhi4>
    49ec:	cb 01       	movw	r24, r22
    49ee:	9e 87       	std	Y+14, r25	; 0x0e
    49f0:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u8NumDigitDEC --;
    49f2:	89 85       	ldd	r24, Y+9	; 0x09
    49f4:	81 50       	subi	r24, 0x01	; 1
    49f6:	89 87       	std	Y+9, r24	; 0x09
		LCD_invidSendData(Copy_u8LCDID,(Local_u8RemainderINT + '0'));
		Local_s32ReverseINT /= 10;
		Local_u8NumDigitINT --;
	}
	LCD_invidSendData(Copy_u8LCDID,'.');
	while (Local_u8NumDigitDEC)
    49f8:	89 85       	ldd	r24, Y+9	; 0x09
    49fa:	88 23       	and	r24, r24
    49fc:	09 f0       	breq	.+2      	; 0x4a00 <LCD_enuDisplayFloatNum+0x33a>
    49fe:	b3 cf       	rjmp	.-154    	; 0x4966 <LCD_enuDisplayFloatNum+0x2a0>
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <LCD_enuDisplayFloatNum+0x340>
		Local_u8NumDigitDEC --;
	}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    4a02:	83 e0       	ldi	r24, 0x03	; 3
    4a04:	89 8b       	std	Y+17, r24	; 0x11
	}
	return Local_enuErrorState;
    4a06:	89 89       	ldd	r24, Y+17	; 0x11
}
    4a08:	66 96       	adiw	r28, 0x16	; 22
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	08 95       	ret

00004a1a <Seven_Segment_enuInit>:
#include "7-Seg_Private.h"

extern SEG_T SEVSEG_AstrSegConfig [SEVEN_SEG_NUM];

ES_T Seven_Segment_enuInit(SEG_T *Copy_PstrSegConfig)
{
    4a1a:	df 93       	push	r29
    4a1c:	cf 93       	push	r28
    4a1e:	00 d0       	rcall	.+0      	; 0x4a20 <Seven_Segment_enuInit+0x6>
    4a20:	00 d0       	rcall	.+0      	; 0x4a22 <Seven_Segment_enuInit+0x8>
    4a22:	0f 92       	push	r0
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	9c 83       	std	Y+4, r25	; 0x04
    4a2a:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    4a2c:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iter =0;
    4a2e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PstrSegConfig != NULL)
    4a30:	8b 81       	ldd	r24, Y+3	; 0x03
    4a32:	9c 81       	ldd	r25, Y+4	; 0x04
    4a34:	00 97       	sbiw	r24, 0x00	; 0
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <Seven_Segment_enuInit+0x20>
    4a38:	55 c2       	rjmp	.+1194   	; 0x4ee4 <Seven_Segment_enuInit+0x4ca>
	{
		for (Local_u8Iter=0; Local_u8Iter < SEVEN_SEG_NUM; Local_u8Iter++)
    4a3a:	19 82       	std	Y+1, r1	; 0x01
    4a3c:	4a c2       	rjmp	.+1172   	; 0x4ed2 <Seven_Segment_enuInit+0x4b8>
		{
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8APort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8APin, DIO_u8OUTPUT);
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	48 2f       	mov	r20, r24
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	ca 01       	movw	r24, r20
    4a46:	88 0f       	add	r24, r24
    4a48:	99 1f       	adc	r25, r25
    4a4a:	9c 01       	movw	r18, r24
    4a4c:	22 0f       	add	r18, r18
    4a4e:	33 1f       	adc	r19, r19
    4a50:	22 0f       	add	r18, r18
    4a52:	33 1f       	adc	r19, r19
    4a54:	22 0f       	add	r18, r18
    4a56:	33 1f       	adc	r19, r19
    4a58:	82 0f       	add	r24, r18
    4a5a:	93 1f       	adc	r25, r19
    4a5c:	9c 01       	movw	r18, r24
    4a5e:	24 0f       	add	r18, r20
    4a60:	35 1f       	adc	r19, r21
    4a62:	8b 81       	ldd	r24, Y+3	; 0x03
    4a64:	9c 81       	ldd	r25, Y+4	; 0x04
    4a66:	fc 01       	movw	r30, r24
    4a68:	e2 0f       	add	r30, r18
    4a6a:	f3 1f       	adc	r31, r19
    4a6c:	60 81       	ld	r22, Z
    4a6e:	89 81       	ldd	r24, Y+1	; 0x01
    4a70:	48 2f       	mov	r20, r24
    4a72:	50 e0       	ldi	r21, 0x00	; 0
    4a74:	ca 01       	movw	r24, r20
    4a76:	88 0f       	add	r24, r24
    4a78:	99 1f       	adc	r25, r25
    4a7a:	9c 01       	movw	r18, r24
    4a7c:	22 0f       	add	r18, r18
    4a7e:	33 1f       	adc	r19, r19
    4a80:	22 0f       	add	r18, r18
    4a82:	33 1f       	adc	r19, r19
    4a84:	22 0f       	add	r18, r18
    4a86:	33 1f       	adc	r19, r19
    4a88:	82 0f       	add	r24, r18
    4a8a:	93 1f       	adc	r25, r19
    4a8c:	9c 01       	movw	r18, r24
    4a8e:	24 0f       	add	r18, r20
    4a90:	35 1f       	adc	r19, r21
    4a92:	8b 81       	ldd	r24, Y+3	; 0x03
    4a94:	9c 81       	ldd	r25, Y+4	; 0x04
    4a96:	fc 01       	movw	r30, r24
    4a98:	e2 0f       	add	r30, r18
    4a9a:	f3 1f       	adc	r31, r19
    4a9c:	91 81       	ldd	r25, Z+1	; 0x01
    4a9e:	86 2f       	mov	r24, r22
    4aa0:	69 2f       	mov	r22, r25
    4aa2:	41 e0       	ldi	r20, 0x01	; 1
    4aa4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8BPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8BPin, DIO_u8OUTPUT);
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	48 2f       	mov	r20, r24
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	ca 01       	movw	r24, r20
    4ab0:	88 0f       	add	r24, r24
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	9c 01       	movw	r18, r24
    4ab6:	22 0f       	add	r18, r18
    4ab8:	33 1f       	adc	r19, r19
    4aba:	22 0f       	add	r18, r18
    4abc:	33 1f       	adc	r19, r19
    4abe:	22 0f       	add	r18, r18
    4ac0:	33 1f       	adc	r19, r19
    4ac2:	82 0f       	add	r24, r18
    4ac4:	93 1f       	adc	r25, r19
    4ac6:	9c 01       	movw	r18, r24
    4ac8:	24 0f       	add	r18, r20
    4aca:	35 1f       	adc	r19, r21
    4acc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ace:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	e2 0f       	add	r30, r18
    4ad4:	f3 1f       	adc	r31, r19
    4ad6:	62 81       	ldd	r22, Z+2	; 0x02
    4ad8:	89 81       	ldd	r24, Y+1	; 0x01
    4ada:	48 2f       	mov	r20, r24
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	ca 01       	movw	r24, r20
    4ae0:	88 0f       	add	r24, r24
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	9c 01       	movw	r18, r24
    4ae6:	22 0f       	add	r18, r18
    4ae8:	33 1f       	adc	r19, r19
    4aea:	22 0f       	add	r18, r18
    4aec:	33 1f       	adc	r19, r19
    4aee:	22 0f       	add	r18, r18
    4af0:	33 1f       	adc	r19, r19
    4af2:	82 0f       	add	r24, r18
    4af4:	93 1f       	adc	r25, r19
    4af6:	9c 01       	movw	r18, r24
    4af8:	24 0f       	add	r18, r20
    4afa:	35 1f       	adc	r19, r21
    4afc:	8b 81       	ldd	r24, Y+3	; 0x03
    4afe:	9c 81       	ldd	r25, Y+4	; 0x04
    4b00:	fc 01       	movw	r30, r24
    4b02:	e2 0f       	add	r30, r18
    4b04:	f3 1f       	adc	r31, r19
    4b06:	93 81       	ldd	r25, Z+3	; 0x03
    4b08:	86 2f       	mov	r24, r22
    4b0a:	69 2f       	mov	r22, r25
    4b0c:	41 e0       	ldi	r20, 0x01	; 1
    4b0e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8CPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8CPin, DIO_u8OUTPUT);
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	48 2f       	mov	r20, r24
    4b16:	50 e0       	ldi	r21, 0x00	; 0
    4b18:	ca 01       	movw	r24, r20
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	9c 01       	movw	r18, r24
    4b20:	22 0f       	add	r18, r18
    4b22:	33 1f       	adc	r19, r19
    4b24:	22 0f       	add	r18, r18
    4b26:	33 1f       	adc	r19, r19
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	82 0f       	add	r24, r18
    4b2e:	93 1f       	adc	r25, r19
    4b30:	9c 01       	movw	r18, r24
    4b32:	24 0f       	add	r18, r20
    4b34:	35 1f       	adc	r19, r21
    4b36:	8b 81       	ldd	r24, Y+3	; 0x03
    4b38:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	e2 0f       	add	r30, r18
    4b3e:	f3 1f       	adc	r31, r19
    4b40:	64 81       	ldd	r22, Z+4	; 0x04
    4b42:	89 81       	ldd	r24, Y+1	; 0x01
    4b44:	48 2f       	mov	r20, r24
    4b46:	50 e0       	ldi	r21, 0x00	; 0
    4b48:	ca 01       	movw	r24, r20
    4b4a:	88 0f       	add	r24, r24
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	9c 01       	movw	r18, r24
    4b50:	22 0f       	add	r18, r18
    4b52:	33 1f       	adc	r19, r19
    4b54:	22 0f       	add	r18, r18
    4b56:	33 1f       	adc	r19, r19
    4b58:	22 0f       	add	r18, r18
    4b5a:	33 1f       	adc	r19, r19
    4b5c:	82 0f       	add	r24, r18
    4b5e:	93 1f       	adc	r25, r19
    4b60:	9c 01       	movw	r18, r24
    4b62:	24 0f       	add	r18, r20
    4b64:	35 1f       	adc	r19, r21
    4b66:	8b 81       	ldd	r24, Y+3	; 0x03
    4b68:	9c 81       	ldd	r25, Y+4	; 0x04
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	e2 0f       	add	r30, r18
    4b6e:	f3 1f       	adc	r31, r19
    4b70:	95 81       	ldd	r25, Z+5	; 0x05
    4b72:	86 2f       	mov	r24, r22
    4b74:	69 2f       	mov	r22, r25
    4b76:	41 e0       	ldi	r20, 0x01	; 1
    4b78:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8DPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8DPin, DIO_u8OUTPUT);
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	48 2f       	mov	r20, r24
    4b80:	50 e0       	ldi	r21, 0x00	; 0
    4b82:	ca 01       	movw	r24, r20
    4b84:	88 0f       	add	r24, r24
    4b86:	99 1f       	adc	r25, r25
    4b88:	9c 01       	movw	r18, r24
    4b8a:	22 0f       	add	r18, r18
    4b8c:	33 1f       	adc	r19, r19
    4b8e:	22 0f       	add	r18, r18
    4b90:	33 1f       	adc	r19, r19
    4b92:	22 0f       	add	r18, r18
    4b94:	33 1f       	adc	r19, r19
    4b96:	82 0f       	add	r24, r18
    4b98:	93 1f       	adc	r25, r19
    4b9a:	9c 01       	movw	r18, r24
    4b9c:	24 0f       	add	r18, r20
    4b9e:	35 1f       	adc	r19, r21
    4ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	e2 0f       	add	r30, r18
    4ba8:	f3 1f       	adc	r31, r19
    4baa:	66 81       	ldd	r22, Z+6	; 0x06
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	48 2f       	mov	r20, r24
    4bb0:	50 e0       	ldi	r21, 0x00	; 0
    4bb2:	ca 01       	movw	r24, r20
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	9c 01       	movw	r18, r24
    4bba:	22 0f       	add	r18, r18
    4bbc:	33 1f       	adc	r19, r19
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	22 0f       	add	r18, r18
    4bc4:	33 1f       	adc	r19, r19
    4bc6:	82 0f       	add	r24, r18
    4bc8:	93 1f       	adc	r25, r19
    4bca:	9c 01       	movw	r18, r24
    4bcc:	24 0f       	add	r18, r20
    4bce:	35 1f       	adc	r19, r21
    4bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	e2 0f       	add	r30, r18
    4bd8:	f3 1f       	adc	r31, r19
    4bda:	97 81       	ldd	r25, Z+7	; 0x07
    4bdc:	86 2f       	mov	r24, r22
    4bde:	69 2f       	mov	r22, r25
    4be0:	41 e0       	ldi	r20, 0x01	; 1
    4be2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8EPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8EPin, DIO_u8OUTPUT);
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	48 2f       	mov	r20, r24
    4bea:	50 e0       	ldi	r21, 0x00	; 0
    4bec:	ca 01       	movw	r24, r20
    4bee:	88 0f       	add	r24, r24
    4bf0:	99 1f       	adc	r25, r25
    4bf2:	9c 01       	movw	r18, r24
    4bf4:	22 0f       	add	r18, r18
    4bf6:	33 1f       	adc	r19, r19
    4bf8:	22 0f       	add	r18, r18
    4bfa:	33 1f       	adc	r19, r19
    4bfc:	22 0f       	add	r18, r18
    4bfe:	33 1f       	adc	r19, r19
    4c00:	82 0f       	add	r24, r18
    4c02:	93 1f       	adc	r25, r19
    4c04:	9c 01       	movw	r18, r24
    4c06:	24 0f       	add	r18, r20
    4c08:	35 1f       	adc	r19, r21
    4c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c0e:	fc 01       	movw	r30, r24
    4c10:	e2 0f       	add	r30, r18
    4c12:	f3 1f       	adc	r31, r19
    4c14:	60 85       	ldd	r22, Z+8	; 0x08
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	48 2f       	mov	r20, r24
    4c1a:	50 e0       	ldi	r21, 0x00	; 0
    4c1c:	ca 01       	movw	r24, r20
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	9c 01       	movw	r18, r24
    4c24:	22 0f       	add	r18, r18
    4c26:	33 1f       	adc	r19, r19
    4c28:	22 0f       	add	r18, r18
    4c2a:	33 1f       	adc	r19, r19
    4c2c:	22 0f       	add	r18, r18
    4c2e:	33 1f       	adc	r19, r19
    4c30:	82 0f       	add	r24, r18
    4c32:	93 1f       	adc	r25, r19
    4c34:	9c 01       	movw	r18, r24
    4c36:	24 0f       	add	r18, r20
    4c38:	35 1f       	adc	r19, r21
    4c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3e:	fc 01       	movw	r30, r24
    4c40:	e2 0f       	add	r30, r18
    4c42:	f3 1f       	adc	r31, r19
    4c44:	91 85       	ldd	r25, Z+9	; 0x09
    4c46:	86 2f       	mov	r24, r22
    4c48:	69 2f       	mov	r22, r25
    4c4a:	41 e0       	ldi	r20, 0x01	; 1
    4c4c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8FPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8FPin, DIO_u8OUTPUT);
    4c50:	89 81       	ldd	r24, Y+1	; 0x01
    4c52:	48 2f       	mov	r20, r24
    4c54:	50 e0       	ldi	r21, 0x00	; 0
    4c56:	ca 01       	movw	r24, r20
    4c58:	88 0f       	add	r24, r24
    4c5a:	99 1f       	adc	r25, r25
    4c5c:	9c 01       	movw	r18, r24
    4c5e:	22 0f       	add	r18, r18
    4c60:	33 1f       	adc	r19, r19
    4c62:	22 0f       	add	r18, r18
    4c64:	33 1f       	adc	r19, r19
    4c66:	22 0f       	add	r18, r18
    4c68:	33 1f       	adc	r19, r19
    4c6a:	82 0f       	add	r24, r18
    4c6c:	93 1f       	adc	r25, r19
    4c6e:	9c 01       	movw	r18, r24
    4c70:	24 0f       	add	r18, r20
    4c72:	35 1f       	adc	r19, r21
    4c74:	8b 81       	ldd	r24, Y+3	; 0x03
    4c76:	9c 81       	ldd	r25, Y+4	; 0x04
    4c78:	fc 01       	movw	r30, r24
    4c7a:	e2 0f       	add	r30, r18
    4c7c:	f3 1f       	adc	r31, r19
    4c7e:	62 85       	ldd	r22, Z+10	; 0x0a
    4c80:	89 81       	ldd	r24, Y+1	; 0x01
    4c82:	48 2f       	mov	r20, r24
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	ca 01       	movw	r24, r20
    4c88:	88 0f       	add	r24, r24
    4c8a:	99 1f       	adc	r25, r25
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	22 0f       	add	r18, r18
    4c90:	33 1f       	adc	r19, r19
    4c92:	22 0f       	add	r18, r18
    4c94:	33 1f       	adc	r19, r19
    4c96:	22 0f       	add	r18, r18
    4c98:	33 1f       	adc	r19, r19
    4c9a:	82 0f       	add	r24, r18
    4c9c:	93 1f       	adc	r25, r19
    4c9e:	9c 01       	movw	r18, r24
    4ca0:	24 0f       	add	r18, r20
    4ca2:	35 1f       	adc	r19, r21
    4ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ca8:	fc 01       	movw	r30, r24
    4caa:	e2 0f       	add	r30, r18
    4cac:	f3 1f       	adc	r31, r19
    4cae:	93 85       	ldd	r25, Z+11	; 0x0b
    4cb0:	86 2f       	mov	r24, r22
    4cb2:	69 2f       	mov	r22, r25
    4cb4:	41 e0       	ldi	r20, 0x01	; 1
    4cb6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8GPort,Copy_PstrSegConfig[Local_u8Iter].SEG_u8GPin, DIO_u8OUTPUT);
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	48 2f       	mov	r20, r24
    4cbe:	50 e0       	ldi	r21, 0x00	; 0
    4cc0:	ca 01       	movw	r24, r20
    4cc2:	88 0f       	add	r24, r24
    4cc4:	99 1f       	adc	r25, r25
    4cc6:	9c 01       	movw	r18, r24
    4cc8:	22 0f       	add	r18, r18
    4cca:	33 1f       	adc	r19, r19
    4ccc:	22 0f       	add	r18, r18
    4cce:	33 1f       	adc	r19, r19
    4cd0:	22 0f       	add	r18, r18
    4cd2:	33 1f       	adc	r19, r19
    4cd4:	82 0f       	add	r24, r18
    4cd6:	93 1f       	adc	r25, r19
    4cd8:	9c 01       	movw	r18, r24
    4cda:	24 0f       	add	r18, r20
    4cdc:	35 1f       	adc	r19, r21
    4cde:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	e2 0f       	add	r30, r18
    4ce6:	f3 1f       	adc	r31, r19
    4ce8:	64 85       	ldd	r22, Z+12	; 0x0c
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	48 2f       	mov	r20, r24
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	ca 01       	movw	r24, r20
    4cf2:	88 0f       	add	r24, r24
    4cf4:	99 1f       	adc	r25, r25
    4cf6:	9c 01       	movw	r18, r24
    4cf8:	22 0f       	add	r18, r18
    4cfa:	33 1f       	adc	r19, r19
    4cfc:	22 0f       	add	r18, r18
    4cfe:	33 1f       	adc	r19, r19
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	82 0f       	add	r24, r18
    4d06:	93 1f       	adc	r25, r19
    4d08:	9c 01       	movw	r18, r24
    4d0a:	24 0f       	add	r18, r20
    4d0c:	35 1f       	adc	r19, r21
    4d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d10:	9c 81       	ldd	r25, Y+4	; 0x04
    4d12:	fc 01       	movw	r30, r24
    4d14:	e2 0f       	add	r30, r18
    4d16:	f3 1f       	adc	r31, r19
    4d18:	95 85       	ldd	r25, Z+13	; 0x0d
    4d1a:	86 2f       	mov	r24, r22
    4d1c:	69 2f       	mov	r22, r25
    4d1e:	41 e0       	ldi	r20, 0x01	; 1
    4d20:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

			if (Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Port != NOT_CONNECTED &&
    4d24:	89 81       	ldd	r24, Y+1	; 0x01
    4d26:	48 2f       	mov	r20, r24
    4d28:	50 e0       	ldi	r21, 0x00	; 0
    4d2a:	ca 01       	movw	r24, r20
    4d2c:	88 0f       	add	r24, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	9c 01       	movw	r18, r24
    4d32:	22 0f       	add	r18, r18
    4d34:	33 1f       	adc	r19, r19
    4d36:	22 0f       	add	r18, r18
    4d38:	33 1f       	adc	r19, r19
    4d3a:	22 0f       	add	r18, r18
    4d3c:	33 1f       	adc	r19, r19
    4d3e:	82 0f       	add	r24, r18
    4d40:	93 1f       	adc	r25, r19
    4d42:	9c 01       	movw	r18, r24
    4d44:	24 0f       	add	r18, r20
    4d46:	35 1f       	adc	r19, r21
    4d48:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	e2 0f       	add	r30, r18
    4d50:	f3 1f       	adc	r31, r19
    4d52:	86 85       	ldd	r24, Z+14	; 0x0e
    4d54:	84 31       	cpi	r24, 0x14	; 20
    4d56:	09 f4       	brne	.+2      	; 0x4d5a <Seven_Segment_enuInit+0x340>
    4d58:	4f c0       	rjmp	.+158    	; 0x4df8 <Seven_Segment_enuInit+0x3de>
    4d5a:	89 81       	ldd	r24, Y+1	; 0x01
    4d5c:	48 2f       	mov	r20, r24
    4d5e:	50 e0       	ldi	r21, 0x00	; 0
    4d60:	ca 01       	movw	r24, r20
    4d62:	88 0f       	add	r24, r24
    4d64:	99 1f       	adc	r25, r25
    4d66:	9c 01       	movw	r18, r24
    4d68:	22 0f       	add	r18, r18
    4d6a:	33 1f       	adc	r19, r19
    4d6c:	22 0f       	add	r18, r18
    4d6e:	33 1f       	adc	r19, r19
    4d70:	22 0f       	add	r18, r18
    4d72:	33 1f       	adc	r19, r19
    4d74:	82 0f       	add	r24, r18
    4d76:	93 1f       	adc	r25, r19
    4d78:	9c 01       	movw	r18, r24
    4d7a:	24 0f       	add	r18, r20
    4d7c:	35 1f       	adc	r19, r21
    4d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d80:	9c 81       	ldd	r25, Y+4	; 0x04
    4d82:	fc 01       	movw	r30, r24
    4d84:	e2 0f       	add	r30, r18
    4d86:	f3 1f       	adc	r31, r19
    4d88:	87 85       	ldd	r24, Z+15	; 0x0f
    4d8a:	84 31       	cpi	r24, 0x14	; 20
    4d8c:	a9 f1       	breq	.+106    	; 0x4df8 <Seven_Segment_enuInit+0x3de>
					Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Pin != NOT_CONNECTED)
			{
				DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Port ,Copy_PstrSegConfig[Local_u8Iter].SEG_u8CMN_Pin , DIO_u8OUTPUT );
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	48 2f       	mov	r20, r24
    4d92:	50 e0       	ldi	r21, 0x00	; 0
    4d94:	ca 01       	movw	r24, r20
    4d96:	88 0f       	add	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	9c 01       	movw	r18, r24
    4d9c:	22 0f       	add	r18, r18
    4d9e:	33 1f       	adc	r19, r19
    4da0:	22 0f       	add	r18, r18
    4da2:	33 1f       	adc	r19, r19
    4da4:	22 0f       	add	r18, r18
    4da6:	33 1f       	adc	r19, r19
    4da8:	82 0f       	add	r24, r18
    4daa:	93 1f       	adc	r25, r19
    4dac:	9c 01       	movw	r18, r24
    4dae:	24 0f       	add	r18, r20
    4db0:	35 1f       	adc	r19, r21
    4db2:	8b 81       	ldd	r24, Y+3	; 0x03
    4db4:	9c 81       	ldd	r25, Y+4	; 0x04
    4db6:	fc 01       	movw	r30, r24
    4db8:	e2 0f       	add	r30, r18
    4dba:	f3 1f       	adc	r31, r19
    4dbc:	66 85       	ldd	r22, Z+14	; 0x0e
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	48 2f       	mov	r20, r24
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	ca 01       	movw	r24, r20
    4dc6:	88 0f       	add	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	9c 01       	movw	r18, r24
    4dcc:	22 0f       	add	r18, r18
    4dce:	33 1f       	adc	r19, r19
    4dd0:	22 0f       	add	r18, r18
    4dd2:	33 1f       	adc	r19, r19
    4dd4:	22 0f       	add	r18, r18
    4dd6:	33 1f       	adc	r19, r19
    4dd8:	82 0f       	add	r24, r18
    4dda:	93 1f       	adc	r25, r19
    4ddc:	9c 01       	movw	r18, r24
    4dde:	24 0f       	add	r18, r20
    4de0:	35 1f       	adc	r19, r21
    4de2:	8b 81       	ldd	r24, Y+3	; 0x03
    4de4:	9c 81       	ldd	r25, Y+4	; 0x04
    4de6:	fc 01       	movw	r30, r24
    4de8:	e2 0f       	add	r30, r18
    4dea:	f3 1f       	adc	r31, r19
    4dec:	97 85       	ldd	r25, Z+15	; 0x0f
    4dee:	86 2f       	mov	r24, r22
    4df0:	69 2f       	mov	r22, r25
    4df2:	41 e0       	ldi	r20, 0x01	; 1
    4df4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
			}

			if (Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Port != NOT_CONNECTED &&
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	48 2f       	mov	r20, r24
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	ca 01       	movw	r24, r20
    4e00:	88 0f       	add	r24, r24
    4e02:	99 1f       	adc	r25, r25
    4e04:	9c 01       	movw	r18, r24
    4e06:	22 0f       	add	r18, r18
    4e08:	33 1f       	adc	r19, r19
    4e0a:	22 0f       	add	r18, r18
    4e0c:	33 1f       	adc	r19, r19
    4e0e:	22 0f       	add	r18, r18
    4e10:	33 1f       	adc	r19, r19
    4e12:	82 0f       	add	r24, r18
    4e14:	93 1f       	adc	r25, r19
    4e16:	9c 01       	movw	r18, r24
    4e18:	24 0f       	add	r18, r20
    4e1a:	35 1f       	adc	r19, r21
    4e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e20:	fc 01       	movw	r30, r24
    4e22:	e2 0f       	add	r30, r18
    4e24:	f3 1f       	adc	r31, r19
    4e26:	80 89       	ldd	r24, Z+16	; 0x10
    4e28:	84 31       	cpi	r24, 0x14	; 20
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <Seven_Segment_enuInit+0x414>
    4e2c:	4f c0       	rjmp	.+158    	; 0x4ecc <Seven_Segment_enuInit+0x4b2>
    4e2e:	89 81       	ldd	r24, Y+1	; 0x01
    4e30:	48 2f       	mov	r20, r24
    4e32:	50 e0       	ldi	r21, 0x00	; 0
    4e34:	ca 01       	movw	r24, r20
    4e36:	88 0f       	add	r24, r24
    4e38:	99 1f       	adc	r25, r25
    4e3a:	9c 01       	movw	r18, r24
    4e3c:	22 0f       	add	r18, r18
    4e3e:	33 1f       	adc	r19, r19
    4e40:	22 0f       	add	r18, r18
    4e42:	33 1f       	adc	r19, r19
    4e44:	22 0f       	add	r18, r18
    4e46:	33 1f       	adc	r19, r19
    4e48:	82 0f       	add	r24, r18
    4e4a:	93 1f       	adc	r25, r19
    4e4c:	9c 01       	movw	r18, r24
    4e4e:	24 0f       	add	r18, r20
    4e50:	35 1f       	adc	r19, r21
    4e52:	8b 81       	ldd	r24, Y+3	; 0x03
    4e54:	9c 81       	ldd	r25, Y+4	; 0x04
    4e56:	fc 01       	movw	r30, r24
    4e58:	e2 0f       	add	r30, r18
    4e5a:	f3 1f       	adc	r31, r19
    4e5c:	81 89       	ldd	r24, Z+17	; 0x11
    4e5e:	84 31       	cpi	r24, 0x14	; 20
    4e60:	a9 f1       	breq	.+106    	; 0x4ecc <Seven_Segment_enuInit+0x4b2>
					Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Pin != NOT_CONNECTED)
			{
				DIO_enuSetPinDirection(Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Port ,Copy_PstrSegConfig[Local_u8Iter].SEG_u8DOT_Pin , DIO_u8OUTPUT );
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	48 2f       	mov	r20, r24
    4e66:	50 e0       	ldi	r21, 0x00	; 0
    4e68:	ca 01       	movw	r24, r20
    4e6a:	88 0f       	add	r24, r24
    4e6c:	99 1f       	adc	r25, r25
    4e6e:	9c 01       	movw	r18, r24
    4e70:	22 0f       	add	r18, r18
    4e72:	33 1f       	adc	r19, r19
    4e74:	22 0f       	add	r18, r18
    4e76:	33 1f       	adc	r19, r19
    4e78:	22 0f       	add	r18, r18
    4e7a:	33 1f       	adc	r19, r19
    4e7c:	82 0f       	add	r24, r18
    4e7e:	93 1f       	adc	r25, r19
    4e80:	9c 01       	movw	r18, r24
    4e82:	24 0f       	add	r18, r20
    4e84:	35 1f       	adc	r19, r21
    4e86:	8b 81       	ldd	r24, Y+3	; 0x03
    4e88:	9c 81       	ldd	r25, Y+4	; 0x04
    4e8a:	fc 01       	movw	r30, r24
    4e8c:	e2 0f       	add	r30, r18
    4e8e:	f3 1f       	adc	r31, r19
    4e90:	60 89       	ldd	r22, Z+16	; 0x10
    4e92:	89 81       	ldd	r24, Y+1	; 0x01
    4e94:	48 2f       	mov	r20, r24
    4e96:	50 e0       	ldi	r21, 0x00	; 0
    4e98:	ca 01       	movw	r24, r20
    4e9a:	88 0f       	add	r24, r24
    4e9c:	99 1f       	adc	r25, r25
    4e9e:	9c 01       	movw	r18, r24
    4ea0:	22 0f       	add	r18, r18
    4ea2:	33 1f       	adc	r19, r19
    4ea4:	22 0f       	add	r18, r18
    4ea6:	33 1f       	adc	r19, r19
    4ea8:	22 0f       	add	r18, r18
    4eaa:	33 1f       	adc	r19, r19
    4eac:	82 0f       	add	r24, r18
    4eae:	93 1f       	adc	r25, r19
    4eb0:	9c 01       	movw	r18, r24
    4eb2:	24 0f       	add	r18, r20
    4eb4:	35 1f       	adc	r19, r21
    4eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    4eba:	fc 01       	movw	r30, r24
    4ebc:	e2 0f       	add	r30, r18
    4ebe:	f3 1f       	adc	r31, r19
    4ec0:	91 89       	ldd	r25, Z+17	; 0x11
    4ec2:	86 2f       	mov	r24, r22
    4ec4:	69 2f       	mov	r22, r25
    4ec6:	41 e0       	ldi	r20, 0x01	; 1
    4ec8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
	ES_T Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter =0;
	if(Copy_PstrSegConfig != NULL)
	{
		for (Local_u8Iter=0; Local_u8Iter < SEVEN_SEG_NUM; Local_u8Iter++)
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	8f 5f       	subi	r24, 0xFF	; 255
    4ed0:	89 83       	std	Y+1, r24	; 0x01
    4ed2:	89 81       	ldd	r24, Y+1	; 0x01
    4ed4:	82 30       	cpi	r24, 0x02	; 2
    4ed6:	08 f4       	brcc	.+2      	; 0x4eda <Seven_Segment_enuInit+0x4c0>
    4ed8:	b2 cd       	rjmp	.-1180   	; 0x4a3e <Seven_Segment_enuInit+0x24>
	}
	else
	{
		return ES_NULL_POINTER;
	}
	Local_enuErrorState = ES_OK;
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
    4ede:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee0:	8d 83       	std	Y+5, r24	; 0x05
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <Seven_Segment_enuInit+0x4ce>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4ee4:	82 e0       	ldi	r24, 0x02	; 2
    4ee6:	8d 83       	std	Y+5, r24	; 0x05
    4ee8:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	Local_enuErrorState = ES_OK;

	return Local_enuErrorState;
}
    4eea:	0f 90       	pop	r0
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	cf 91       	pop	r28
    4ef6:	df 91       	pop	r29
    4ef8:	08 95       	ret

00004efa <Seven_Segment_enuDisplayNum>:
ES_T Seven_Segment_enuDisplayNum(u8 Copy_u8SegID,u8 Copy_u8Num)
{
    4efa:	df 93       	push	r29
    4efc:	cf 93       	push	r28
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    4f02:	68 97       	sbiw	r28, 0x18	; 24
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	cd bf       	out	0x3d, r28	; 61
    4f0e:	8a 83       	std	Y+2, r24	; 0x02
    4f10:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    4f12:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Num <=SEVEN_SEG_U8MAXRANGE && Copy_u8SegID < SEVEN_SEG_NUM)
    4f14:	8b 81       	ldd	r24, Y+3	; 0x03
    4f16:	8a 30       	cpi	r24, 0x0A	; 10
    4f18:	08 f0       	brcs	.+2      	; 0x4f1c <Seven_Segment_enuDisplayNum+0x22>
    4f1a:	a7 c3       	rjmp	.+1870   	; 0x566a <Seven_Segment_enuDisplayNum+0x770>
    4f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1e:	82 30       	cpi	r24, 0x02	; 2
    4f20:	08 f0       	brcs	.+2      	; 0x4f24 <Seven_Segment_enuDisplayNum+0x2a>
    4f22:	a3 c3       	rjmp	.+1862   	; 0x566a <Seven_Segment_enuDisplayNum+0x770>
	{
		if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    4f24:	8a 81       	ldd	r24, Y+2	; 0x02
    4f26:	48 2f       	mov	r20, r24
    4f28:	50 e0       	ldi	r21, 0x00	; 0
    4f2a:	ca 01       	movw	r24, r20
    4f2c:	88 0f       	add	r24, r24
    4f2e:	99 1f       	adc	r25, r25
    4f30:	9c 01       	movw	r18, r24
    4f32:	22 0f       	add	r18, r18
    4f34:	33 1f       	adc	r19, r19
    4f36:	22 0f       	add	r18, r18
    4f38:	33 1f       	adc	r19, r19
    4f3a:	22 0f       	add	r18, r18
    4f3c:	33 1f       	adc	r19, r19
    4f3e:	82 0f       	add	r24, r18
    4f40:	93 1f       	adc	r25, r19
    4f42:	84 0f       	add	r24, r20
    4f44:	95 1f       	adc	r25, r21
    4f46:	fc 01       	movw	r30, r24
    4f48:	ea 54       	subi	r30, 0x4A	; 74
    4f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f4c:	80 81       	ld	r24, Z
    4f4e:	81 30       	cpi	r24, 0x01	; 1
    4f50:	09 f0       	breq	.+2      	; 0x4f54 <Seven_Segment_enuDisplayNum+0x5a>
    4f52:	9a c1       	rjmp	.+820    	; 0x5288 <Seven_Segment_enuDisplayNum+0x38e>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , ((SEG_Au8NumDisplay[Copy_u8Num]>>ZERO_U8RSH)&BIT_U8MASKING) );
    4f54:	8a 81       	ldd	r24, Y+2	; 0x02
    4f56:	48 2f       	mov	r20, r24
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	ca 01       	movw	r24, r20
    4f5c:	88 0f       	add	r24, r24
    4f5e:	99 1f       	adc	r25, r25
    4f60:	9c 01       	movw	r18, r24
    4f62:	22 0f       	add	r18, r18
    4f64:	33 1f       	adc	r19, r19
    4f66:	22 0f       	add	r18, r18
    4f68:	33 1f       	adc	r19, r19
    4f6a:	22 0f       	add	r18, r18
    4f6c:	33 1f       	adc	r19, r19
    4f6e:	82 0f       	add	r24, r18
    4f70:	93 1f       	adc	r25, r19
    4f72:	84 0f       	add	r24, r20
    4f74:	95 1f       	adc	r25, r21
    4f76:	fc 01       	movw	r30, r24
    4f78:	ec 55       	subi	r30, 0x5C	; 92
    4f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f7c:	60 81       	ld	r22, Z
    4f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f80:	48 2f       	mov	r20, r24
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	ca 01       	movw	r24, r20
    4f86:	88 0f       	add	r24, r24
    4f88:	99 1f       	adc	r25, r25
    4f8a:	9c 01       	movw	r18, r24
    4f8c:	22 0f       	add	r18, r18
    4f8e:	33 1f       	adc	r19, r19
    4f90:	22 0f       	add	r18, r18
    4f92:	33 1f       	adc	r19, r19
    4f94:	22 0f       	add	r18, r18
    4f96:	33 1f       	adc	r19, r19
    4f98:	82 0f       	add	r24, r18
    4f9a:	93 1f       	adc	r25, r19
    4f9c:	84 0f       	add	r24, r20
    4f9e:	95 1f       	adc	r25, r21
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	eb 55       	subi	r30, 0x5B	; 91
    4fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa6:	20 81       	ld	r18, Z
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4faa:	88 2f       	mov	r24, r24
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	fc 01       	movw	r30, r24
    4fb0:	e6 53       	subi	r30, 0x36	; 54
    4fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fb4:	80 81       	ld	r24, Z
    4fb6:	98 2f       	mov	r25, r24
    4fb8:	91 70       	andi	r25, 0x01	; 1
    4fba:	86 2f       	mov	r24, r22
    4fbc:	62 2f       	mov	r22, r18
    4fbe:	49 2f       	mov	r20, r25
    4fc0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>ONE_U8RSH)&BIT_U8MASKING) );
    4fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc6:	48 2f       	mov	r20, r24
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	ca 01       	movw	r24, r20
    4fcc:	88 0f       	add	r24, r24
    4fce:	99 1f       	adc	r25, r25
    4fd0:	9c 01       	movw	r18, r24
    4fd2:	22 0f       	add	r18, r18
    4fd4:	33 1f       	adc	r19, r19
    4fd6:	22 0f       	add	r18, r18
    4fd8:	33 1f       	adc	r19, r19
    4fda:	22 0f       	add	r18, r18
    4fdc:	33 1f       	adc	r19, r19
    4fde:	82 0f       	add	r24, r18
    4fe0:	93 1f       	adc	r25, r19
    4fe2:	84 0f       	add	r24, r20
    4fe4:	95 1f       	adc	r25, r21
    4fe6:	fc 01       	movw	r30, r24
    4fe8:	ea 55       	subi	r30, 0x5A	; 90
    4fea:	fe 4f       	sbci	r31, 0xFE	; 254
    4fec:	60 81       	ld	r22, Z
    4fee:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff0:	48 2f       	mov	r20, r24
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	ca 01       	movw	r24, r20
    4ff6:	88 0f       	add	r24, r24
    4ff8:	99 1f       	adc	r25, r25
    4ffa:	9c 01       	movw	r18, r24
    4ffc:	22 0f       	add	r18, r18
    4ffe:	33 1f       	adc	r19, r19
    5000:	22 0f       	add	r18, r18
    5002:	33 1f       	adc	r19, r19
    5004:	22 0f       	add	r18, r18
    5006:	33 1f       	adc	r19, r19
    5008:	82 0f       	add	r24, r18
    500a:	93 1f       	adc	r25, r19
    500c:	84 0f       	add	r24, r20
    500e:	95 1f       	adc	r25, r21
    5010:	fc 01       	movw	r30, r24
    5012:	e9 55       	subi	r30, 0x59	; 89
    5014:	fe 4f       	sbci	r31, 0xFE	; 254
    5016:	20 81       	ld	r18, Z
    5018:	8b 81       	ldd	r24, Y+3	; 0x03
    501a:	88 2f       	mov	r24, r24
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	fc 01       	movw	r30, r24
    5020:	e6 53       	subi	r30, 0x36	; 54
    5022:	fe 4f       	sbci	r31, 0xFE	; 254
    5024:	80 81       	ld	r24, Z
    5026:	86 95       	lsr	r24
    5028:	98 2f       	mov	r25, r24
    502a:	91 70       	andi	r25, 0x01	; 1
    502c:	86 2f       	mov	r24, r22
    502e:	62 2f       	mov	r22, r18
    5030:	49 2f       	mov	r20, r25
    5032:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>TWO_U8RSH)&BIT_U8MASKING));
    5036:	8a 81       	ldd	r24, Y+2	; 0x02
    5038:	48 2f       	mov	r20, r24
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	ca 01       	movw	r24, r20
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	9c 01       	movw	r18, r24
    5044:	22 0f       	add	r18, r18
    5046:	33 1f       	adc	r19, r19
    5048:	22 0f       	add	r18, r18
    504a:	33 1f       	adc	r19, r19
    504c:	22 0f       	add	r18, r18
    504e:	33 1f       	adc	r19, r19
    5050:	82 0f       	add	r24, r18
    5052:	93 1f       	adc	r25, r19
    5054:	84 0f       	add	r24, r20
    5056:	95 1f       	adc	r25, r21
    5058:	fc 01       	movw	r30, r24
    505a:	e8 55       	subi	r30, 0x58	; 88
    505c:	fe 4f       	sbci	r31, 0xFE	; 254
    505e:	60 81       	ld	r22, Z
    5060:	8a 81       	ldd	r24, Y+2	; 0x02
    5062:	48 2f       	mov	r20, r24
    5064:	50 e0       	ldi	r21, 0x00	; 0
    5066:	ca 01       	movw	r24, r20
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	9c 01       	movw	r18, r24
    506e:	22 0f       	add	r18, r18
    5070:	33 1f       	adc	r19, r19
    5072:	22 0f       	add	r18, r18
    5074:	33 1f       	adc	r19, r19
    5076:	22 0f       	add	r18, r18
    5078:	33 1f       	adc	r19, r19
    507a:	82 0f       	add	r24, r18
    507c:	93 1f       	adc	r25, r19
    507e:	84 0f       	add	r24, r20
    5080:	95 1f       	adc	r25, r21
    5082:	fc 01       	movw	r30, r24
    5084:	e7 55       	subi	r30, 0x57	; 87
    5086:	fe 4f       	sbci	r31, 0xFE	; 254
    5088:	20 81       	ld	r18, Z
    508a:	8b 81       	ldd	r24, Y+3	; 0x03
    508c:	88 2f       	mov	r24, r24
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	fc 01       	movw	r30, r24
    5092:	e6 53       	subi	r30, 0x36	; 54
    5094:	fe 4f       	sbci	r31, 0xFE	; 254
    5096:	80 81       	ld	r24, Z
    5098:	86 95       	lsr	r24
    509a:	86 95       	lsr	r24
    509c:	98 2f       	mov	r25, r24
    509e:	91 70       	andi	r25, 0x01	; 1
    50a0:	86 2f       	mov	r24, r22
    50a2:	62 2f       	mov	r22, r18
    50a4:	49 2f       	mov	r20, r25
    50a6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>THREE_U8RSH)&BIT_U8MASKING));
    50aa:	8a 81       	ldd	r24, Y+2	; 0x02
    50ac:	48 2f       	mov	r20, r24
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	ca 01       	movw	r24, r20
    50b2:	88 0f       	add	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	9c 01       	movw	r18, r24
    50b8:	22 0f       	add	r18, r18
    50ba:	33 1f       	adc	r19, r19
    50bc:	22 0f       	add	r18, r18
    50be:	33 1f       	adc	r19, r19
    50c0:	22 0f       	add	r18, r18
    50c2:	33 1f       	adc	r19, r19
    50c4:	82 0f       	add	r24, r18
    50c6:	93 1f       	adc	r25, r19
    50c8:	84 0f       	add	r24, r20
    50ca:	95 1f       	adc	r25, r21
    50cc:	fc 01       	movw	r30, r24
    50ce:	e6 55       	subi	r30, 0x56	; 86
    50d0:	fe 4f       	sbci	r31, 0xFE	; 254
    50d2:	60 81       	ld	r22, Z
    50d4:	8a 81       	ldd	r24, Y+2	; 0x02
    50d6:	48 2f       	mov	r20, r24
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	ca 01       	movw	r24, r20
    50dc:	88 0f       	add	r24, r24
    50de:	99 1f       	adc	r25, r25
    50e0:	9c 01       	movw	r18, r24
    50e2:	22 0f       	add	r18, r18
    50e4:	33 1f       	adc	r19, r19
    50e6:	22 0f       	add	r18, r18
    50e8:	33 1f       	adc	r19, r19
    50ea:	22 0f       	add	r18, r18
    50ec:	33 1f       	adc	r19, r19
    50ee:	82 0f       	add	r24, r18
    50f0:	93 1f       	adc	r25, r19
    50f2:	84 0f       	add	r24, r20
    50f4:	95 1f       	adc	r25, r21
    50f6:	fc 01       	movw	r30, r24
    50f8:	e5 55       	subi	r30, 0x55	; 85
    50fa:	fe 4f       	sbci	r31, 0xFE	; 254
    50fc:	20 81       	ld	r18, Z
    50fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5100:	88 2f       	mov	r24, r24
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	fc 01       	movw	r30, r24
    5106:	e6 53       	subi	r30, 0x36	; 54
    5108:	fe 4f       	sbci	r31, 0xFE	; 254
    510a:	80 81       	ld	r24, Z
    510c:	86 95       	lsr	r24
    510e:	86 95       	lsr	r24
    5110:	86 95       	lsr	r24
    5112:	98 2f       	mov	r25, r24
    5114:	91 70       	andi	r25, 0x01	; 1
    5116:	86 2f       	mov	r24, r22
    5118:	62 2f       	mov	r22, r18
    511a:	49 2f       	mov	r20, r25
    511c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>FOUR_U8RSH)&BIT_U8MASKING));
    5120:	8a 81       	ldd	r24, Y+2	; 0x02
    5122:	48 2f       	mov	r20, r24
    5124:	50 e0       	ldi	r21, 0x00	; 0
    5126:	ca 01       	movw	r24, r20
    5128:	88 0f       	add	r24, r24
    512a:	99 1f       	adc	r25, r25
    512c:	9c 01       	movw	r18, r24
    512e:	22 0f       	add	r18, r18
    5130:	33 1f       	adc	r19, r19
    5132:	22 0f       	add	r18, r18
    5134:	33 1f       	adc	r19, r19
    5136:	22 0f       	add	r18, r18
    5138:	33 1f       	adc	r19, r19
    513a:	82 0f       	add	r24, r18
    513c:	93 1f       	adc	r25, r19
    513e:	84 0f       	add	r24, r20
    5140:	95 1f       	adc	r25, r21
    5142:	fc 01       	movw	r30, r24
    5144:	e4 55       	subi	r30, 0x54	; 84
    5146:	fe 4f       	sbci	r31, 0xFE	; 254
    5148:	60 81       	ld	r22, Z
    514a:	8a 81       	ldd	r24, Y+2	; 0x02
    514c:	48 2f       	mov	r20, r24
    514e:	50 e0       	ldi	r21, 0x00	; 0
    5150:	ca 01       	movw	r24, r20
    5152:	88 0f       	add	r24, r24
    5154:	99 1f       	adc	r25, r25
    5156:	9c 01       	movw	r18, r24
    5158:	22 0f       	add	r18, r18
    515a:	33 1f       	adc	r19, r19
    515c:	22 0f       	add	r18, r18
    515e:	33 1f       	adc	r19, r19
    5160:	22 0f       	add	r18, r18
    5162:	33 1f       	adc	r19, r19
    5164:	82 0f       	add	r24, r18
    5166:	93 1f       	adc	r25, r19
    5168:	84 0f       	add	r24, r20
    516a:	95 1f       	adc	r25, r21
    516c:	fc 01       	movw	r30, r24
    516e:	e3 55       	subi	r30, 0x53	; 83
    5170:	fe 4f       	sbci	r31, 0xFE	; 254
    5172:	20 81       	ld	r18, Z
    5174:	8b 81       	ldd	r24, Y+3	; 0x03
    5176:	88 2f       	mov	r24, r24
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	fc 01       	movw	r30, r24
    517c:	e6 53       	subi	r30, 0x36	; 54
    517e:	fe 4f       	sbci	r31, 0xFE	; 254
    5180:	80 81       	ld	r24, Z
    5182:	82 95       	swap	r24
    5184:	8f 70       	andi	r24, 0x0F	; 15
    5186:	98 2f       	mov	r25, r24
    5188:	91 70       	andi	r25, 0x01	; 1
    518a:	86 2f       	mov	r24, r22
    518c:	62 2f       	mov	r22, r18
    518e:	49 2f       	mov	r20, r25
    5190:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>FIVE_U8RSH)&BIT_U8MASKING));
    5194:	8a 81       	ldd	r24, Y+2	; 0x02
    5196:	48 2f       	mov	r20, r24
    5198:	50 e0       	ldi	r21, 0x00	; 0
    519a:	ca 01       	movw	r24, r20
    519c:	88 0f       	add	r24, r24
    519e:	99 1f       	adc	r25, r25
    51a0:	9c 01       	movw	r18, r24
    51a2:	22 0f       	add	r18, r18
    51a4:	33 1f       	adc	r19, r19
    51a6:	22 0f       	add	r18, r18
    51a8:	33 1f       	adc	r19, r19
    51aa:	22 0f       	add	r18, r18
    51ac:	33 1f       	adc	r19, r19
    51ae:	82 0f       	add	r24, r18
    51b0:	93 1f       	adc	r25, r19
    51b2:	84 0f       	add	r24, r20
    51b4:	95 1f       	adc	r25, r21
    51b6:	fc 01       	movw	r30, r24
    51b8:	e2 55       	subi	r30, 0x52	; 82
    51ba:	fe 4f       	sbci	r31, 0xFE	; 254
    51bc:	60 81       	ld	r22, Z
    51be:	8a 81       	ldd	r24, Y+2	; 0x02
    51c0:	48 2f       	mov	r20, r24
    51c2:	50 e0       	ldi	r21, 0x00	; 0
    51c4:	ca 01       	movw	r24, r20
    51c6:	88 0f       	add	r24, r24
    51c8:	99 1f       	adc	r25, r25
    51ca:	9c 01       	movw	r18, r24
    51cc:	22 0f       	add	r18, r18
    51ce:	33 1f       	adc	r19, r19
    51d0:	22 0f       	add	r18, r18
    51d2:	33 1f       	adc	r19, r19
    51d4:	22 0f       	add	r18, r18
    51d6:	33 1f       	adc	r19, r19
    51d8:	82 0f       	add	r24, r18
    51da:	93 1f       	adc	r25, r19
    51dc:	84 0f       	add	r24, r20
    51de:	95 1f       	adc	r25, r21
    51e0:	fc 01       	movw	r30, r24
    51e2:	e1 55       	subi	r30, 0x51	; 81
    51e4:	fe 4f       	sbci	r31, 0xFE	; 254
    51e6:	20 81       	ld	r18, Z
    51e8:	8b 81       	ldd	r24, Y+3	; 0x03
    51ea:	88 2f       	mov	r24, r24
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	fc 01       	movw	r30, r24
    51f0:	e6 53       	subi	r30, 0x36	; 54
    51f2:	fe 4f       	sbci	r31, 0xFE	; 254
    51f4:	80 81       	ld	r24, Z
    51f6:	82 95       	swap	r24
    51f8:	86 95       	lsr	r24
    51fa:	87 70       	andi	r24, 0x07	; 7
    51fc:	98 2f       	mov	r25, r24
    51fe:	91 70       	andi	r25, 0x01	; 1
    5200:	86 2f       	mov	r24, r22
    5202:	62 2f       	mov	r22, r18
    5204:	49 2f       	mov	r20, r25
    5206:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , ((SEG_Au8NumDisplay[Copy_u8Num]>>SIX_U8RSH)&BIT_U8MASKING));
    520a:	8a 81       	ldd	r24, Y+2	; 0x02
    520c:	48 2f       	mov	r20, r24
    520e:	50 e0       	ldi	r21, 0x00	; 0
    5210:	ca 01       	movw	r24, r20
    5212:	88 0f       	add	r24, r24
    5214:	99 1f       	adc	r25, r25
    5216:	9c 01       	movw	r18, r24
    5218:	22 0f       	add	r18, r18
    521a:	33 1f       	adc	r19, r19
    521c:	22 0f       	add	r18, r18
    521e:	33 1f       	adc	r19, r19
    5220:	22 0f       	add	r18, r18
    5222:	33 1f       	adc	r19, r19
    5224:	82 0f       	add	r24, r18
    5226:	93 1f       	adc	r25, r19
    5228:	84 0f       	add	r24, r20
    522a:	95 1f       	adc	r25, r21
    522c:	fc 01       	movw	r30, r24
    522e:	e0 55       	subi	r30, 0x50	; 80
    5230:	fe 4f       	sbci	r31, 0xFE	; 254
    5232:	60 81       	ld	r22, Z
    5234:	8a 81       	ldd	r24, Y+2	; 0x02
    5236:	48 2f       	mov	r20, r24
    5238:	50 e0       	ldi	r21, 0x00	; 0
    523a:	ca 01       	movw	r24, r20
    523c:	88 0f       	add	r24, r24
    523e:	99 1f       	adc	r25, r25
    5240:	9c 01       	movw	r18, r24
    5242:	22 0f       	add	r18, r18
    5244:	33 1f       	adc	r19, r19
    5246:	22 0f       	add	r18, r18
    5248:	33 1f       	adc	r19, r19
    524a:	22 0f       	add	r18, r18
    524c:	33 1f       	adc	r19, r19
    524e:	82 0f       	add	r24, r18
    5250:	93 1f       	adc	r25, r19
    5252:	84 0f       	add	r24, r20
    5254:	95 1f       	adc	r25, r21
    5256:	fc 01       	movw	r30, r24
    5258:	ef 54       	subi	r30, 0x4F	; 79
    525a:	fe 4f       	sbci	r31, 0xFE	; 254
    525c:	20 81       	ld	r18, Z
    525e:	8b 81       	ldd	r24, Y+3	; 0x03
    5260:	88 2f       	mov	r24, r24
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	fc 01       	movw	r30, r24
    5266:	e6 53       	subi	r30, 0x36	; 54
    5268:	fe 4f       	sbci	r31, 0xFE	; 254
    526a:	80 81       	ld	r24, Z
    526c:	82 95       	swap	r24
    526e:	86 95       	lsr	r24
    5270:	86 95       	lsr	r24
    5272:	83 70       	andi	r24, 0x03	; 3
    5274:	98 2f       	mov	r25, r24
    5276:	91 70       	andi	r25, 0x01	; 1
    5278:	86 2f       	mov	r24, r22
    527a:	62 2f       	mov	r22, r18
    527c:	49 2f       	mov	r20, r25
    527e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	89 83       	std	Y+1, r24	; 0x01
    5286:	f3 c1       	rjmp	.+998    	; 0x566e <Seven_Segment_enuDisplayNum+0x774>

		}
		else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    5288:	8a 81       	ldd	r24, Y+2	; 0x02
    528a:	48 2f       	mov	r20, r24
    528c:	50 e0       	ldi	r21, 0x00	; 0
    528e:	ca 01       	movw	r24, r20
    5290:	88 0f       	add	r24, r24
    5292:	99 1f       	adc	r25, r25
    5294:	9c 01       	movw	r18, r24
    5296:	22 0f       	add	r18, r18
    5298:	33 1f       	adc	r19, r19
    529a:	22 0f       	add	r18, r18
    529c:	33 1f       	adc	r19, r19
    529e:	22 0f       	add	r18, r18
    52a0:	33 1f       	adc	r19, r19
    52a2:	82 0f       	add	r24, r18
    52a4:	93 1f       	adc	r25, r19
    52a6:	84 0f       	add	r24, r20
    52a8:	95 1f       	adc	r25, r21
    52aa:	fc 01       	movw	r30, r24
    52ac:	ea 54       	subi	r30, 0x4A	; 74
    52ae:	fe 4f       	sbci	r31, 0xFE	; 254
    52b0:	80 81       	ld	r24, Z
    52b2:	82 30       	cpi	r24, 0x02	; 2
    52b4:	09 f0       	breq	.+2      	; 0x52b8 <Seven_Segment_enuDisplayNum+0x3be>
    52b6:	db c1       	rjmp	.+950    	; 0x566e <Seven_Segment_enuDisplayNum+0x774>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , !((SEG_Au8NumDisplay[Copy_u8Num]>>ZERO_U8RSH)&BIT_U8MASKING) );
    52b8:	8a 81       	ldd	r24, Y+2	; 0x02
    52ba:	48 2f       	mov	r20, r24
    52bc:	50 e0       	ldi	r21, 0x00	; 0
    52be:	ca 01       	movw	r24, r20
    52c0:	88 0f       	add	r24, r24
    52c2:	99 1f       	adc	r25, r25
    52c4:	9c 01       	movw	r18, r24
    52c6:	22 0f       	add	r18, r18
    52c8:	33 1f       	adc	r19, r19
    52ca:	22 0f       	add	r18, r18
    52cc:	33 1f       	adc	r19, r19
    52ce:	22 0f       	add	r18, r18
    52d0:	33 1f       	adc	r19, r19
    52d2:	82 0f       	add	r24, r18
    52d4:	93 1f       	adc	r25, r19
    52d6:	84 0f       	add	r24, r20
    52d8:	95 1f       	adc	r25, r21
    52da:	fc 01       	movw	r30, r24
    52dc:	ec 55       	subi	r30, 0x5C	; 92
    52de:	fe 4f       	sbci	r31, 0xFE	; 254
    52e0:	80 81       	ld	r24, Z
    52e2:	88 8f       	std	Y+24, r24	; 0x18
    52e4:	8a 81       	ldd	r24, Y+2	; 0x02
    52e6:	48 2f       	mov	r20, r24
    52e8:	50 e0       	ldi	r21, 0x00	; 0
    52ea:	ca 01       	movw	r24, r20
    52ec:	88 0f       	add	r24, r24
    52ee:	99 1f       	adc	r25, r25
    52f0:	9c 01       	movw	r18, r24
    52f2:	22 0f       	add	r18, r18
    52f4:	33 1f       	adc	r19, r19
    52f6:	22 0f       	add	r18, r18
    52f8:	33 1f       	adc	r19, r19
    52fa:	22 0f       	add	r18, r18
    52fc:	33 1f       	adc	r19, r19
    52fe:	82 0f       	add	r24, r18
    5300:	93 1f       	adc	r25, r19
    5302:	84 0f       	add	r24, r20
    5304:	95 1f       	adc	r25, r21
    5306:	fc 01       	movw	r30, r24
    5308:	eb 55       	subi	r30, 0x5B	; 91
    530a:	fe 4f       	sbci	r31, 0xFE	; 254
    530c:	80 81       	ld	r24, Z
    530e:	8f 8b       	std	Y+23, r24	; 0x17
    5310:	8b 81       	ldd	r24, Y+3	; 0x03
    5312:	88 2f       	mov	r24, r24
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	fc 01       	movw	r30, r24
    5318:	e6 53       	subi	r30, 0x36	; 54
    531a:	fe 4f       	sbci	r31, 0xFE	; 254
    531c:	80 81       	ld	r24, Z
    531e:	88 2f       	mov	r24, r24
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	81 70       	andi	r24, 0x01	; 1
    5324:	90 70       	andi	r25, 0x00	; 0
    5326:	1e 8a       	std	Y+22, r1	; 0x16
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	11 f4       	brne	.+4      	; 0x5330 <Seven_Segment_enuDisplayNum+0x436>
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	8e 8b       	std	Y+22, r24	; 0x16
    5330:	88 8d       	ldd	r24, Y+24	; 0x18
    5332:	6f 89       	ldd	r22, Y+23	; 0x17
    5334:	4e 89       	ldd	r20, Y+22	; 0x16
    5336:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>ONE_U8RSH)&BIT_U8MASKING) );
    533a:	8a 81       	ldd	r24, Y+2	; 0x02
    533c:	48 2f       	mov	r20, r24
    533e:	50 e0       	ldi	r21, 0x00	; 0
    5340:	ca 01       	movw	r24, r20
    5342:	88 0f       	add	r24, r24
    5344:	99 1f       	adc	r25, r25
    5346:	9c 01       	movw	r18, r24
    5348:	22 0f       	add	r18, r18
    534a:	33 1f       	adc	r19, r19
    534c:	22 0f       	add	r18, r18
    534e:	33 1f       	adc	r19, r19
    5350:	22 0f       	add	r18, r18
    5352:	33 1f       	adc	r19, r19
    5354:	82 0f       	add	r24, r18
    5356:	93 1f       	adc	r25, r19
    5358:	84 0f       	add	r24, r20
    535a:	95 1f       	adc	r25, r21
    535c:	fc 01       	movw	r30, r24
    535e:	ea 55       	subi	r30, 0x5A	; 90
    5360:	fe 4f       	sbci	r31, 0xFE	; 254
    5362:	80 81       	ld	r24, Z
    5364:	8d 8b       	std	Y+21, r24	; 0x15
    5366:	8a 81       	ldd	r24, Y+2	; 0x02
    5368:	48 2f       	mov	r20, r24
    536a:	50 e0       	ldi	r21, 0x00	; 0
    536c:	ca 01       	movw	r24, r20
    536e:	88 0f       	add	r24, r24
    5370:	99 1f       	adc	r25, r25
    5372:	9c 01       	movw	r18, r24
    5374:	22 0f       	add	r18, r18
    5376:	33 1f       	adc	r19, r19
    5378:	22 0f       	add	r18, r18
    537a:	33 1f       	adc	r19, r19
    537c:	22 0f       	add	r18, r18
    537e:	33 1f       	adc	r19, r19
    5380:	82 0f       	add	r24, r18
    5382:	93 1f       	adc	r25, r19
    5384:	84 0f       	add	r24, r20
    5386:	95 1f       	adc	r25, r21
    5388:	fc 01       	movw	r30, r24
    538a:	e9 55       	subi	r30, 0x59	; 89
    538c:	fe 4f       	sbci	r31, 0xFE	; 254
    538e:	80 81       	ld	r24, Z
    5390:	8c 8b       	std	Y+20, r24	; 0x14
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	88 2f       	mov	r24, r24
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	fc 01       	movw	r30, r24
    539a:	e6 53       	subi	r30, 0x36	; 54
    539c:	fe 4f       	sbci	r31, 0xFE	; 254
    539e:	80 81       	ld	r24, Z
    53a0:	86 95       	lsr	r24
    53a2:	88 2f       	mov	r24, r24
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	81 70       	andi	r24, 0x01	; 1
    53a8:	90 70       	andi	r25, 0x00	; 0
    53aa:	1b 8a       	std	Y+19, r1	; 0x13
    53ac:	00 97       	sbiw	r24, 0x00	; 0
    53ae:	11 f4       	brne	.+4      	; 0x53b4 <Seven_Segment_enuDisplayNum+0x4ba>
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	8b 8b       	std	Y+19, r24	; 0x13
    53b4:	8d 89       	ldd	r24, Y+21	; 0x15
    53b6:	6c 89       	ldd	r22, Y+20	; 0x14
    53b8:	4b 89       	ldd	r20, Y+19	; 0x13
    53ba:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>TWO_U8RSH)&BIT_U8MASKING));
    53be:	8a 81       	ldd	r24, Y+2	; 0x02
    53c0:	48 2f       	mov	r20, r24
    53c2:	50 e0       	ldi	r21, 0x00	; 0
    53c4:	ca 01       	movw	r24, r20
    53c6:	88 0f       	add	r24, r24
    53c8:	99 1f       	adc	r25, r25
    53ca:	9c 01       	movw	r18, r24
    53cc:	22 0f       	add	r18, r18
    53ce:	33 1f       	adc	r19, r19
    53d0:	22 0f       	add	r18, r18
    53d2:	33 1f       	adc	r19, r19
    53d4:	22 0f       	add	r18, r18
    53d6:	33 1f       	adc	r19, r19
    53d8:	82 0f       	add	r24, r18
    53da:	93 1f       	adc	r25, r19
    53dc:	84 0f       	add	r24, r20
    53de:	95 1f       	adc	r25, r21
    53e0:	fc 01       	movw	r30, r24
    53e2:	e8 55       	subi	r30, 0x58	; 88
    53e4:	fe 4f       	sbci	r31, 0xFE	; 254
    53e6:	80 81       	ld	r24, Z
    53e8:	8a 8b       	std	Y+18, r24	; 0x12
    53ea:	8a 81       	ldd	r24, Y+2	; 0x02
    53ec:	48 2f       	mov	r20, r24
    53ee:	50 e0       	ldi	r21, 0x00	; 0
    53f0:	ca 01       	movw	r24, r20
    53f2:	88 0f       	add	r24, r24
    53f4:	99 1f       	adc	r25, r25
    53f6:	9c 01       	movw	r18, r24
    53f8:	22 0f       	add	r18, r18
    53fa:	33 1f       	adc	r19, r19
    53fc:	22 0f       	add	r18, r18
    53fe:	33 1f       	adc	r19, r19
    5400:	22 0f       	add	r18, r18
    5402:	33 1f       	adc	r19, r19
    5404:	82 0f       	add	r24, r18
    5406:	93 1f       	adc	r25, r19
    5408:	84 0f       	add	r24, r20
    540a:	95 1f       	adc	r25, r21
    540c:	fc 01       	movw	r30, r24
    540e:	e7 55       	subi	r30, 0x57	; 87
    5410:	fe 4f       	sbci	r31, 0xFE	; 254
    5412:	80 81       	ld	r24, Z
    5414:	89 8b       	std	Y+17, r24	; 0x11
    5416:	8b 81       	ldd	r24, Y+3	; 0x03
    5418:	88 2f       	mov	r24, r24
    541a:	90 e0       	ldi	r25, 0x00	; 0
    541c:	fc 01       	movw	r30, r24
    541e:	e6 53       	subi	r30, 0x36	; 54
    5420:	fe 4f       	sbci	r31, 0xFE	; 254
    5422:	80 81       	ld	r24, Z
    5424:	86 95       	lsr	r24
    5426:	86 95       	lsr	r24
    5428:	88 2f       	mov	r24, r24
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	81 70       	andi	r24, 0x01	; 1
    542e:	90 70       	andi	r25, 0x00	; 0
    5430:	18 8a       	std	Y+16, r1	; 0x10
    5432:	00 97       	sbiw	r24, 0x00	; 0
    5434:	11 f4       	brne	.+4      	; 0x543a <Seven_Segment_enuDisplayNum+0x540>
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	88 8b       	std	Y+16, r24	; 0x10
    543a:	8a 89       	ldd	r24, Y+18	; 0x12
    543c:	69 89       	ldd	r22, Y+17	; 0x11
    543e:	48 89       	ldd	r20, Y+16	; 0x10
    5440:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>THREE_U8RSH)&BIT_U8MASKING));
    5444:	8a 81       	ldd	r24, Y+2	; 0x02
    5446:	48 2f       	mov	r20, r24
    5448:	50 e0       	ldi	r21, 0x00	; 0
    544a:	ca 01       	movw	r24, r20
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	9c 01       	movw	r18, r24
    5452:	22 0f       	add	r18, r18
    5454:	33 1f       	adc	r19, r19
    5456:	22 0f       	add	r18, r18
    5458:	33 1f       	adc	r19, r19
    545a:	22 0f       	add	r18, r18
    545c:	33 1f       	adc	r19, r19
    545e:	82 0f       	add	r24, r18
    5460:	93 1f       	adc	r25, r19
    5462:	84 0f       	add	r24, r20
    5464:	95 1f       	adc	r25, r21
    5466:	fc 01       	movw	r30, r24
    5468:	e6 55       	subi	r30, 0x56	; 86
    546a:	fe 4f       	sbci	r31, 0xFE	; 254
    546c:	80 81       	ld	r24, Z
    546e:	8f 87       	std	Y+15, r24	; 0x0f
    5470:	8a 81       	ldd	r24, Y+2	; 0x02
    5472:	48 2f       	mov	r20, r24
    5474:	50 e0       	ldi	r21, 0x00	; 0
    5476:	ca 01       	movw	r24, r20
    5478:	88 0f       	add	r24, r24
    547a:	99 1f       	adc	r25, r25
    547c:	9c 01       	movw	r18, r24
    547e:	22 0f       	add	r18, r18
    5480:	33 1f       	adc	r19, r19
    5482:	22 0f       	add	r18, r18
    5484:	33 1f       	adc	r19, r19
    5486:	22 0f       	add	r18, r18
    5488:	33 1f       	adc	r19, r19
    548a:	82 0f       	add	r24, r18
    548c:	93 1f       	adc	r25, r19
    548e:	84 0f       	add	r24, r20
    5490:	95 1f       	adc	r25, r21
    5492:	fc 01       	movw	r30, r24
    5494:	e5 55       	subi	r30, 0x55	; 85
    5496:	fe 4f       	sbci	r31, 0xFE	; 254
    5498:	80 81       	ld	r24, Z
    549a:	8e 87       	std	Y+14, r24	; 0x0e
    549c:	8b 81       	ldd	r24, Y+3	; 0x03
    549e:	88 2f       	mov	r24, r24
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	fc 01       	movw	r30, r24
    54a4:	e6 53       	subi	r30, 0x36	; 54
    54a6:	fe 4f       	sbci	r31, 0xFE	; 254
    54a8:	80 81       	ld	r24, Z
    54aa:	86 95       	lsr	r24
    54ac:	86 95       	lsr	r24
    54ae:	86 95       	lsr	r24
    54b0:	88 2f       	mov	r24, r24
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	81 70       	andi	r24, 0x01	; 1
    54b6:	90 70       	andi	r25, 0x00	; 0
    54b8:	1d 86       	std	Y+13, r1	; 0x0d
    54ba:	00 97       	sbiw	r24, 0x00	; 0
    54bc:	11 f4       	brne	.+4      	; 0x54c2 <Seven_Segment_enuDisplayNum+0x5c8>
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	8d 87       	std	Y+13, r24	; 0x0d
    54c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    54c4:	6e 85       	ldd	r22, Y+14	; 0x0e
    54c6:	4d 85       	ldd	r20, Y+13	; 0x0d
    54c8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>FOUR_U8RSH)&BIT_U8MASKING));
    54cc:	8a 81       	ldd	r24, Y+2	; 0x02
    54ce:	48 2f       	mov	r20, r24
    54d0:	50 e0       	ldi	r21, 0x00	; 0
    54d2:	ca 01       	movw	r24, r20
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	9c 01       	movw	r18, r24
    54da:	22 0f       	add	r18, r18
    54dc:	33 1f       	adc	r19, r19
    54de:	22 0f       	add	r18, r18
    54e0:	33 1f       	adc	r19, r19
    54e2:	22 0f       	add	r18, r18
    54e4:	33 1f       	adc	r19, r19
    54e6:	82 0f       	add	r24, r18
    54e8:	93 1f       	adc	r25, r19
    54ea:	84 0f       	add	r24, r20
    54ec:	95 1f       	adc	r25, r21
    54ee:	fc 01       	movw	r30, r24
    54f0:	e4 55       	subi	r30, 0x54	; 84
    54f2:	fe 4f       	sbci	r31, 0xFE	; 254
    54f4:	80 81       	ld	r24, Z
    54f6:	8c 87       	std	Y+12, r24	; 0x0c
    54f8:	8a 81       	ldd	r24, Y+2	; 0x02
    54fa:	48 2f       	mov	r20, r24
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	ca 01       	movw	r24, r20
    5500:	88 0f       	add	r24, r24
    5502:	99 1f       	adc	r25, r25
    5504:	9c 01       	movw	r18, r24
    5506:	22 0f       	add	r18, r18
    5508:	33 1f       	adc	r19, r19
    550a:	22 0f       	add	r18, r18
    550c:	33 1f       	adc	r19, r19
    550e:	22 0f       	add	r18, r18
    5510:	33 1f       	adc	r19, r19
    5512:	82 0f       	add	r24, r18
    5514:	93 1f       	adc	r25, r19
    5516:	84 0f       	add	r24, r20
    5518:	95 1f       	adc	r25, r21
    551a:	fc 01       	movw	r30, r24
    551c:	e3 55       	subi	r30, 0x53	; 83
    551e:	fe 4f       	sbci	r31, 0xFE	; 254
    5520:	80 81       	ld	r24, Z
    5522:	8b 87       	std	Y+11, r24	; 0x0b
    5524:	8b 81       	ldd	r24, Y+3	; 0x03
    5526:	88 2f       	mov	r24, r24
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	fc 01       	movw	r30, r24
    552c:	e6 53       	subi	r30, 0x36	; 54
    552e:	fe 4f       	sbci	r31, 0xFE	; 254
    5530:	80 81       	ld	r24, Z
    5532:	82 95       	swap	r24
    5534:	8f 70       	andi	r24, 0x0F	; 15
    5536:	88 2f       	mov	r24, r24
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	81 70       	andi	r24, 0x01	; 1
    553c:	90 70       	andi	r25, 0x00	; 0
    553e:	1a 86       	std	Y+10, r1	; 0x0a
    5540:	00 97       	sbiw	r24, 0x00	; 0
    5542:	11 f4       	brne	.+4      	; 0x5548 <Seven_Segment_enuDisplayNum+0x64e>
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	8a 87       	std	Y+10, r24	; 0x0a
    5548:	8c 85       	ldd	r24, Y+12	; 0x0c
    554a:	6b 85       	ldd	r22, Y+11	; 0x0b
    554c:	4a 85       	ldd	r20, Y+10	; 0x0a
    554e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>FIVE_U8RSH)&BIT_U8MASKING));
    5552:	8a 81       	ldd	r24, Y+2	; 0x02
    5554:	48 2f       	mov	r20, r24
    5556:	50 e0       	ldi	r21, 0x00	; 0
    5558:	ca 01       	movw	r24, r20
    555a:	88 0f       	add	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	9c 01       	movw	r18, r24
    5560:	22 0f       	add	r18, r18
    5562:	33 1f       	adc	r19, r19
    5564:	22 0f       	add	r18, r18
    5566:	33 1f       	adc	r19, r19
    5568:	22 0f       	add	r18, r18
    556a:	33 1f       	adc	r19, r19
    556c:	82 0f       	add	r24, r18
    556e:	93 1f       	adc	r25, r19
    5570:	84 0f       	add	r24, r20
    5572:	95 1f       	adc	r25, r21
    5574:	fc 01       	movw	r30, r24
    5576:	e2 55       	subi	r30, 0x52	; 82
    5578:	fe 4f       	sbci	r31, 0xFE	; 254
    557a:	80 81       	ld	r24, Z
    557c:	89 87       	std	Y+9, r24	; 0x09
    557e:	8a 81       	ldd	r24, Y+2	; 0x02
    5580:	48 2f       	mov	r20, r24
    5582:	50 e0       	ldi	r21, 0x00	; 0
    5584:	ca 01       	movw	r24, r20
    5586:	88 0f       	add	r24, r24
    5588:	99 1f       	adc	r25, r25
    558a:	9c 01       	movw	r18, r24
    558c:	22 0f       	add	r18, r18
    558e:	33 1f       	adc	r19, r19
    5590:	22 0f       	add	r18, r18
    5592:	33 1f       	adc	r19, r19
    5594:	22 0f       	add	r18, r18
    5596:	33 1f       	adc	r19, r19
    5598:	82 0f       	add	r24, r18
    559a:	93 1f       	adc	r25, r19
    559c:	84 0f       	add	r24, r20
    559e:	95 1f       	adc	r25, r21
    55a0:	fc 01       	movw	r30, r24
    55a2:	e1 55       	subi	r30, 0x51	; 81
    55a4:	fe 4f       	sbci	r31, 0xFE	; 254
    55a6:	80 81       	ld	r24, Z
    55a8:	88 87       	std	Y+8, r24	; 0x08
    55aa:	8b 81       	ldd	r24, Y+3	; 0x03
    55ac:	88 2f       	mov	r24, r24
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	fc 01       	movw	r30, r24
    55b2:	e6 53       	subi	r30, 0x36	; 54
    55b4:	fe 4f       	sbci	r31, 0xFE	; 254
    55b6:	80 81       	ld	r24, Z
    55b8:	82 95       	swap	r24
    55ba:	86 95       	lsr	r24
    55bc:	87 70       	andi	r24, 0x07	; 7
    55be:	88 2f       	mov	r24, r24
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	81 70       	andi	r24, 0x01	; 1
    55c4:	90 70       	andi	r25, 0x00	; 0
    55c6:	1f 82       	std	Y+7, r1	; 0x07
    55c8:	00 97       	sbiw	r24, 0x00	; 0
    55ca:	11 f4       	brne	.+4      	; 0x55d0 <Seven_Segment_enuDisplayNum+0x6d6>
    55cc:	81 e0       	ldi	r24, 0x01	; 1
    55ce:	8f 83       	std	Y+7, r24	; 0x07
    55d0:	89 85       	ldd	r24, Y+9	; 0x09
    55d2:	68 85       	ldd	r22, Y+8	; 0x08
    55d4:	4f 81       	ldd	r20, Y+7	; 0x07
    55d6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , !((SEG_Au8NumDisplay[Copy_u8Num]>>SIX_U8RSH)&BIT_U8MASKING));
    55da:	8a 81       	ldd	r24, Y+2	; 0x02
    55dc:	48 2f       	mov	r20, r24
    55de:	50 e0       	ldi	r21, 0x00	; 0
    55e0:	ca 01       	movw	r24, r20
    55e2:	88 0f       	add	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	9c 01       	movw	r18, r24
    55e8:	22 0f       	add	r18, r18
    55ea:	33 1f       	adc	r19, r19
    55ec:	22 0f       	add	r18, r18
    55ee:	33 1f       	adc	r19, r19
    55f0:	22 0f       	add	r18, r18
    55f2:	33 1f       	adc	r19, r19
    55f4:	82 0f       	add	r24, r18
    55f6:	93 1f       	adc	r25, r19
    55f8:	84 0f       	add	r24, r20
    55fa:	95 1f       	adc	r25, r21
    55fc:	fc 01       	movw	r30, r24
    55fe:	e0 55       	subi	r30, 0x50	; 80
    5600:	fe 4f       	sbci	r31, 0xFE	; 254
    5602:	80 81       	ld	r24, Z
    5604:	8e 83       	std	Y+6, r24	; 0x06
    5606:	8a 81       	ldd	r24, Y+2	; 0x02
    5608:	48 2f       	mov	r20, r24
    560a:	50 e0       	ldi	r21, 0x00	; 0
    560c:	ca 01       	movw	r24, r20
    560e:	88 0f       	add	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	9c 01       	movw	r18, r24
    5614:	22 0f       	add	r18, r18
    5616:	33 1f       	adc	r19, r19
    5618:	22 0f       	add	r18, r18
    561a:	33 1f       	adc	r19, r19
    561c:	22 0f       	add	r18, r18
    561e:	33 1f       	adc	r19, r19
    5620:	82 0f       	add	r24, r18
    5622:	93 1f       	adc	r25, r19
    5624:	84 0f       	add	r24, r20
    5626:	95 1f       	adc	r25, r21
    5628:	fc 01       	movw	r30, r24
    562a:	ef 54       	subi	r30, 0x4F	; 79
    562c:	fe 4f       	sbci	r31, 0xFE	; 254
    562e:	80 81       	ld	r24, Z
    5630:	8d 83       	std	Y+5, r24	; 0x05
    5632:	8b 81       	ldd	r24, Y+3	; 0x03
    5634:	88 2f       	mov	r24, r24
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	fc 01       	movw	r30, r24
    563a:	e6 53       	subi	r30, 0x36	; 54
    563c:	fe 4f       	sbci	r31, 0xFE	; 254
    563e:	80 81       	ld	r24, Z
    5640:	82 95       	swap	r24
    5642:	86 95       	lsr	r24
    5644:	86 95       	lsr	r24
    5646:	83 70       	andi	r24, 0x03	; 3
    5648:	88 2f       	mov	r24, r24
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	81 70       	andi	r24, 0x01	; 1
    564e:	90 70       	andi	r25, 0x00	; 0
    5650:	1c 82       	std	Y+4, r1	; 0x04
    5652:	00 97       	sbiw	r24, 0x00	; 0
    5654:	11 f4       	brne	.+4      	; 0x565a <Seven_Segment_enuDisplayNum+0x760>
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	8c 83       	std	Y+4, r24	; 0x04
    565a:	8e 81       	ldd	r24, Y+6	; 0x06
    565c:	6d 81       	ldd	r22, Y+5	; 0x05
    565e:	4c 81       	ldd	r20, Y+4	; 0x04
    5660:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    5664:	81 e0       	ldi	r24, 0x01	; 1
    5666:	89 83       	std	Y+1, r24	; 0x01
    5668:	02 c0       	rjmp	.+4      	; 0x566e <Seven_Segment_enuDisplayNum+0x774>

		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    566a:	83 e0       	ldi	r24, 0x03	; 3
    566c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    566e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5670:	68 96       	adiw	r28, 0x18	; 24
    5672:	0f b6       	in	r0, 0x3f	; 63
    5674:	f8 94       	cli
    5676:	de bf       	out	0x3e, r29	; 62
    5678:	0f be       	out	0x3f, r0	; 63
    567a:	cd bf       	out	0x3d, r28	; 61
    567c:	cf 91       	pop	r28
    567e:	df 91       	pop	r29
    5680:	08 95       	ret

00005682 <Seven_Segment_enuEnableCommon>:
ES_T Seven_Segment_enuEnableCommon(u8 Copy_u8SegID)
{
    5682:	df 93       	push	r29
    5684:	cf 93       	push	r28
    5686:	00 d0       	rcall	.+0      	; 0x5688 <Seven_Segment_enuEnableCommon+0x6>
    5688:	cd b7       	in	r28, 0x3d	; 61
    568a:	de b7       	in	r29, 0x3e	; 62
    568c:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    568e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5690:	8a 81       	ldd	r24, Y+2	; 0x02
    5692:	82 30       	cpi	r24, 0x02	; 2
    5694:	08 f0       	brcs	.+2      	; 0x5698 <Seven_Segment_enuEnableCommon+0x16>
    5696:	c8 c0       	rjmp	.+400    	; 0x5828 <Seven_Segment_enuEnableCommon+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED
    5698:	8a 81       	ldd	r24, Y+2	; 0x02
    569a:	48 2f       	mov	r20, r24
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	ca 01       	movw	r24, r20
    56a0:	88 0f       	add	r24, r24
    56a2:	99 1f       	adc	r25, r25
    56a4:	9c 01       	movw	r18, r24
    56a6:	22 0f       	add	r18, r18
    56a8:	33 1f       	adc	r19, r19
    56aa:	22 0f       	add	r18, r18
    56ac:	33 1f       	adc	r19, r19
    56ae:	22 0f       	add	r18, r18
    56b0:	33 1f       	adc	r19, r19
    56b2:	82 0f       	add	r24, r18
    56b4:	93 1f       	adc	r25, r19
    56b6:	84 0f       	add	r24, r20
    56b8:	95 1f       	adc	r25, r21
    56ba:	fc 01       	movw	r30, r24
    56bc:	ee 54       	subi	r30, 0x4E	; 78
    56be:	fe 4f       	sbci	r31, 0xFE	; 254
    56c0:	80 81       	ld	r24, Z
    56c2:	84 31       	cpi	r24, 0x14	; 20
    56c4:	09 f4       	brne	.+2      	; 0x56c8 <Seven_Segment_enuEnableCommon+0x46>
    56c6:	ad c0       	rjmp	.+346    	; 0x5822 <Seven_Segment_enuEnableCommon+0x1a0>
    56c8:	8a 81       	ldd	r24, Y+2	; 0x02
    56ca:	48 2f       	mov	r20, r24
    56cc:	50 e0       	ldi	r21, 0x00	; 0
    56ce:	ca 01       	movw	r24, r20
    56d0:	88 0f       	add	r24, r24
    56d2:	99 1f       	adc	r25, r25
    56d4:	9c 01       	movw	r18, r24
    56d6:	22 0f       	add	r18, r18
    56d8:	33 1f       	adc	r19, r19
    56da:	22 0f       	add	r18, r18
    56dc:	33 1f       	adc	r19, r19
    56de:	22 0f       	add	r18, r18
    56e0:	33 1f       	adc	r19, r19
    56e2:	82 0f       	add	r24, r18
    56e4:	93 1f       	adc	r25, r19
    56e6:	84 0f       	add	r24, r20
    56e8:	95 1f       	adc	r25, r21
    56ea:	fc 01       	movw	r30, r24
    56ec:	ed 54       	subi	r30, 0x4D	; 77
    56ee:	fe 4f       	sbci	r31, 0xFE	; 254
    56f0:	80 81       	ld	r24, Z
    56f2:	84 31       	cpi	r24, 0x14	; 20
    56f4:	09 f4       	brne	.+2      	; 0x56f8 <Seven_Segment_enuEnableCommon+0x76>
    56f6:	95 c0       	rjmp	.+298    	; 0x5822 <Seven_Segment_enuEnableCommon+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    56f8:	8a 81       	ldd	r24, Y+2	; 0x02
    56fa:	48 2f       	mov	r20, r24
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	ca 01       	movw	r24, r20
    5700:	88 0f       	add	r24, r24
    5702:	99 1f       	adc	r25, r25
    5704:	9c 01       	movw	r18, r24
    5706:	22 0f       	add	r18, r18
    5708:	33 1f       	adc	r19, r19
    570a:	22 0f       	add	r18, r18
    570c:	33 1f       	adc	r19, r19
    570e:	22 0f       	add	r18, r18
    5710:	33 1f       	adc	r19, r19
    5712:	82 0f       	add	r24, r18
    5714:	93 1f       	adc	r25, r19
    5716:	84 0f       	add	r24, r20
    5718:	95 1f       	adc	r25, r21
    571a:	fc 01       	movw	r30, r24
    571c:	ea 54       	subi	r30, 0x4A	; 74
    571e:	fe 4f       	sbci	r31, 0xFE	; 254
    5720:	80 81       	ld	r24, Z
    5722:	81 30       	cpi	r24, 0x01	; 1
    5724:	91 f5       	brne	.+100    	; 0x578a <Seven_Segment_enuEnableCommon+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8HIGH);
    5726:	8a 81       	ldd	r24, Y+2	; 0x02
    5728:	48 2f       	mov	r20, r24
    572a:	50 e0       	ldi	r21, 0x00	; 0
    572c:	ca 01       	movw	r24, r20
    572e:	88 0f       	add	r24, r24
    5730:	99 1f       	adc	r25, r25
    5732:	9c 01       	movw	r18, r24
    5734:	22 0f       	add	r18, r18
    5736:	33 1f       	adc	r19, r19
    5738:	22 0f       	add	r18, r18
    573a:	33 1f       	adc	r19, r19
    573c:	22 0f       	add	r18, r18
    573e:	33 1f       	adc	r19, r19
    5740:	82 0f       	add	r24, r18
    5742:	93 1f       	adc	r25, r19
    5744:	84 0f       	add	r24, r20
    5746:	95 1f       	adc	r25, r21
    5748:	fc 01       	movw	r30, r24
    574a:	ee 54       	subi	r30, 0x4E	; 78
    574c:	fe 4f       	sbci	r31, 0xFE	; 254
    574e:	60 81       	ld	r22, Z
    5750:	8a 81       	ldd	r24, Y+2	; 0x02
    5752:	48 2f       	mov	r20, r24
    5754:	50 e0       	ldi	r21, 0x00	; 0
    5756:	ca 01       	movw	r24, r20
    5758:	88 0f       	add	r24, r24
    575a:	99 1f       	adc	r25, r25
    575c:	9c 01       	movw	r18, r24
    575e:	22 0f       	add	r18, r18
    5760:	33 1f       	adc	r19, r19
    5762:	22 0f       	add	r18, r18
    5764:	33 1f       	adc	r19, r19
    5766:	22 0f       	add	r18, r18
    5768:	33 1f       	adc	r19, r19
    576a:	82 0f       	add	r24, r18
    576c:	93 1f       	adc	r25, r19
    576e:	84 0f       	add	r24, r20
    5770:	95 1f       	adc	r25, r21
    5772:	fc 01       	movw	r30, r24
    5774:	ed 54       	subi	r30, 0x4D	; 77
    5776:	fe 4f       	sbci	r31, 0xFE	; 254
    5778:	90 81       	ld	r25, Z
    577a:	86 2f       	mov	r24, r22
    577c:	69 2f       	mov	r22, r25
    577e:	41 e0       	ldi	r20, 0x01	; 1
    5780:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	89 83       	std	Y+1, r24	; 0x01
    5788:	51 c0       	rjmp	.+162    	; 0x582c <Seven_Segment_enuEnableCommon+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    578a:	8a 81       	ldd	r24, Y+2	; 0x02
    578c:	48 2f       	mov	r20, r24
    578e:	50 e0       	ldi	r21, 0x00	; 0
    5790:	ca 01       	movw	r24, r20
    5792:	88 0f       	add	r24, r24
    5794:	99 1f       	adc	r25, r25
    5796:	9c 01       	movw	r18, r24
    5798:	22 0f       	add	r18, r18
    579a:	33 1f       	adc	r19, r19
    579c:	22 0f       	add	r18, r18
    579e:	33 1f       	adc	r19, r19
    57a0:	22 0f       	add	r18, r18
    57a2:	33 1f       	adc	r19, r19
    57a4:	82 0f       	add	r24, r18
    57a6:	93 1f       	adc	r25, r19
    57a8:	84 0f       	add	r24, r20
    57aa:	95 1f       	adc	r25, r21
    57ac:	fc 01       	movw	r30, r24
    57ae:	ea 54       	subi	r30, 0x4A	; 74
    57b0:	fe 4f       	sbci	r31, 0xFE	; 254
    57b2:	80 81       	ld	r24, Z
    57b4:	82 30       	cpi	r24, 0x02	; 2
    57b6:	91 f5       	brne	.+100    	; 0x581c <Seven_Segment_enuEnableCommon+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8LOW);
    57b8:	8a 81       	ldd	r24, Y+2	; 0x02
    57ba:	48 2f       	mov	r20, r24
    57bc:	50 e0       	ldi	r21, 0x00	; 0
    57be:	ca 01       	movw	r24, r20
    57c0:	88 0f       	add	r24, r24
    57c2:	99 1f       	adc	r25, r25
    57c4:	9c 01       	movw	r18, r24
    57c6:	22 0f       	add	r18, r18
    57c8:	33 1f       	adc	r19, r19
    57ca:	22 0f       	add	r18, r18
    57cc:	33 1f       	adc	r19, r19
    57ce:	22 0f       	add	r18, r18
    57d0:	33 1f       	adc	r19, r19
    57d2:	82 0f       	add	r24, r18
    57d4:	93 1f       	adc	r25, r19
    57d6:	84 0f       	add	r24, r20
    57d8:	95 1f       	adc	r25, r21
    57da:	fc 01       	movw	r30, r24
    57dc:	ee 54       	subi	r30, 0x4E	; 78
    57de:	fe 4f       	sbci	r31, 0xFE	; 254
    57e0:	60 81       	ld	r22, Z
    57e2:	8a 81       	ldd	r24, Y+2	; 0x02
    57e4:	48 2f       	mov	r20, r24
    57e6:	50 e0       	ldi	r21, 0x00	; 0
    57e8:	ca 01       	movw	r24, r20
    57ea:	88 0f       	add	r24, r24
    57ec:	99 1f       	adc	r25, r25
    57ee:	9c 01       	movw	r18, r24
    57f0:	22 0f       	add	r18, r18
    57f2:	33 1f       	adc	r19, r19
    57f4:	22 0f       	add	r18, r18
    57f6:	33 1f       	adc	r19, r19
    57f8:	22 0f       	add	r18, r18
    57fa:	33 1f       	adc	r19, r19
    57fc:	82 0f       	add	r24, r18
    57fe:	93 1f       	adc	r25, r19
    5800:	84 0f       	add	r24, r20
    5802:	95 1f       	adc	r25, r21
    5804:	fc 01       	movw	r30, r24
    5806:	ed 54       	subi	r30, 0x4D	; 77
    5808:	fe 4f       	sbci	r31, 0xFE	; 254
    580a:	90 81       	ld	r25, Z
    580c:	86 2f       	mov	r24, r22
    580e:	69 2f       	mov	r22, r25
    5810:	40 e0       	ldi	r20, 0x00	; 0
    5812:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	89 83       	std	Y+1, r24	; 0x01
    581a:	08 c0       	rjmp	.+16     	; 0x582c <Seven_Segment_enuEnableCommon+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    581c:	84 e0       	ldi	r24, 0x04	; 4
    581e:	89 83       	std	Y+1, r24	; 0x01
    5820:	05 c0       	rjmp	.+10     	; 0x582c <Seven_Segment_enuEnableCommon+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    5822:	84 e0       	ldi	r24, 0x04	; 4
    5824:	89 83       	std	Y+1, r24	; 0x01
    5826:	02 c0       	rjmp	.+4      	; 0x582c <Seven_Segment_enuEnableCommon+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    5828:	83 e0       	ldi	r24, 0x03	; 3
    582a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    582c:	89 81       	ldd	r24, Y+1	; 0x01

}
    582e:	0f 90       	pop	r0
    5830:	0f 90       	pop	r0
    5832:	cf 91       	pop	r28
    5834:	df 91       	pop	r29
    5836:	08 95       	ret

00005838 <Seven_Segment_enuDisableCommon>:

ES_T Seven_Segment_enuDisableCommon(u8 Copy_u8SegID)
{
    5838:	df 93       	push	r29
    583a:	cf 93       	push	r28
    583c:	00 d0       	rcall	.+0      	; 0x583e <Seven_Segment_enuDisableCommon+0x6>
    583e:	cd b7       	in	r28, 0x3d	; 61
    5840:	de b7       	in	r29, 0x3e	; 62
    5842:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    5844:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5846:	8a 81       	ldd	r24, Y+2	; 0x02
    5848:	82 30       	cpi	r24, 0x02	; 2
    584a:	08 f0       	brcs	.+2      	; 0x584e <Seven_Segment_enuDisableCommon+0x16>
    584c:	c8 c0       	rjmp	.+400    	; 0x59de <Seven_Segment_enuDisableCommon+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED
    584e:	8a 81       	ldd	r24, Y+2	; 0x02
    5850:	48 2f       	mov	r20, r24
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	ca 01       	movw	r24, r20
    5856:	88 0f       	add	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	9c 01       	movw	r18, r24
    585c:	22 0f       	add	r18, r18
    585e:	33 1f       	adc	r19, r19
    5860:	22 0f       	add	r18, r18
    5862:	33 1f       	adc	r19, r19
    5864:	22 0f       	add	r18, r18
    5866:	33 1f       	adc	r19, r19
    5868:	82 0f       	add	r24, r18
    586a:	93 1f       	adc	r25, r19
    586c:	84 0f       	add	r24, r20
    586e:	95 1f       	adc	r25, r21
    5870:	fc 01       	movw	r30, r24
    5872:	ee 54       	subi	r30, 0x4E	; 78
    5874:	fe 4f       	sbci	r31, 0xFE	; 254
    5876:	80 81       	ld	r24, Z
    5878:	84 31       	cpi	r24, 0x14	; 20
    587a:	09 f4       	brne	.+2      	; 0x587e <Seven_Segment_enuDisableCommon+0x46>
    587c:	ad c0       	rjmp	.+346    	; 0x59d8 <Seven_Segment_enuDisableCommon+0x1a0>
    587e:	8a 81       	ldd	r24, Y+2	; 0x02
    5880:	48 2f       	mov	r20, r24
    5882:	50 e0       	ldi	r21, 0x00	; 0
    5884:	ca 01       	movw	r24, r20
    5886:	88 0f       	add	r24, r24
    5888:	99 1f       	adc	r25, r25
    588a:	9c 01       	movw	r18, r24
    588c:	22 0f       	add	r18, r18
    588e:	33 1f       	adc	r19, r19
    5890:	22 0f       	add	r18, r18
    5892:	33 1f       	adc	r19, r19
    5894:	22 0f       	add	r18, r18
    5896:	33 1f       	adc	r19, r19
    5898:	82 0f       	add	r24, r18
    589a:	93 1f       	adc	r25, r19
    589c:	84 0f       	add	r24, r20
    589e:	95 1f       	adc	r25, r21
    58a0:	fc 01       	movw	r30, r24
    58a2:	ed 54       	subi	r30, 0x4D	; 77
    58a4:	fe 4f       	sbci	r31, 0xFE	; 254
    58a6:	80 81       	ld	r24, Z
    58a8:	84 31       	cpi	r24, 0x14	; 20
    58aa:	09 f4       	brne	.+2      	; 0x58ae <Seven_Segment_enuDisableCommon+0x76>
    58ac:	95 c0       	rjmp	.+298    	; 0x59d8 <Seven_Segment_enuDisableCommon+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    58ae:	8a 81       	ldd	r24, Y+2	; 0x02
    58b0:	48 2f       	mov	r20, r24
    58b2:	50 e0       	ldi	r21, 0x00	; 0
    58b4:	ca 01       	movw	r24, r20
    58b6:	88 0f       	add	r24, r24
    58b8:	99 1f       	adc	r25, r25
    58ba:	9c 01       	movw	r18, r24
    58bc:	22 0f       	add	r18, r18
    58be:	33 1f       	adc	r19, r19
    58c0:	22 0f       	add	r18, r18
    58c2:	33 1f       	adc	r19, r19
    58c4:	22 0f       	add	r18, r18
    58c6:	33 1f       	adc	r19, r19
    58c8:	82 0f       	add	r24, r18
    58ca:	93 1f       	adc	r25, r19
    58cc:	84 0f       	add	r24, r20
    58ce:	95 1f       	adc	r25, r21
    58d0:	fc 01       	movw	r30, r24
    58d2:	ea 54       	subi	r30, 0x4A	; 74
    58d4:	fe 4f       	sbci	r31, 0xFE	; 254
    58d6:	80 81       	ld	r24, Z
    58d8:	81 30       	cpi	r24, 0x01	; 1
    58da:	91 f5       	brne	.+100    	; 0x5940 <Seven_Segment_enuDisableCommon+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8LOW);
    58dc:	8a 81       	ldd	r24, Y+2	; 0x02
    58de:	48 2f       	mov	r20, r24
    58e0:	50 e0       	ldi	r21, 0x00	; 0
    58e2:	ca 01       	movw	r24, r20
    58e4:	88 0f       	add	r24, r24
    58e6:	99 1f       	adc	r25, r25
    58e8:	9c 01       	movw	r18, r24
    58ea:	22 0f       	add	r18, r18
    58ec:	33 1f       	adc	r19, r19
    58ee:	22 0f       	add	r18, r18
    58f0:	33 1f       	adc	r19, r19
    58f2:	22 0f       	add	r18, r18
    58f4:	33 1f       	adc	r19, r19
    58f6:	82 0f       	add	r24, r18
    58f8:	93 1f       	adc	r25, r19
    58fa:	84 0f       	add	r24, r20
    58fc:	95 1f       	adc	r25, r21
    58fe:	fc 01       	movw	r30, r24
    5900:	ee 54       	subi	r30, 0x4E	; 78
    5902:	fe 4f       	sbci	r31, 0xFE	; 254
    5904:	60 81       	ld	r22, Z
    5906:	8a 81       	ldd	r24, Y+2	; 0x02
    5908:	48 2f       	mov	r20, r24
    590a:	50 e0       	ldi	r21, 0x00	; 0
    590c:	ca 01       	movw	r24, r20
    590e:	88 0f       	add	r24, r24
    5910:	99 1f       	adc	r25, r25
    5912:	9c 01       	movw	r18, r24
    5914:	22 0f       	add	r18, r18
    5916:	33 1f       	adc	r19, r19
    5918:	22 0f       	add	r18, r18
    591a:	33 1f       	adc	r19, r19
    591c:	22 0f       	add	r18, r18
    591e:	33 1f       	adc	r19, r19
    5920:	82 0f       	add	r24, r18
    5922:	93 1f       	adc	r25, r19
    5924:	84 0f       	add	r24, r20
    5926:	95 1f       	adc	r25, r21
    5928:	fc 01       	movw	r30, r24
    592a:	ed 54       	subi	r30, 0x4D	; 77
    592c:	fe 4f       	sbci	r31, 0xFE	; 254
    592e:	90 81       	ld	r25, Z
    5930:	86 2f       	mov	r24, r22
    5932:	69 2f       	mov	r22, r25
    5934:	40 e0       	ldi	r20, 0x00	; 0
    5936:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    593a:	81 e0       	ldi	r24, 0x01	; 1
    593c:	89 83       	std	Y+1, r24	; 0x01
    593e:	51 c0       	rjmp	.+162    	; 0x59e2 <Seven_Segment_enuDisableCommon+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    5940:	8a 81       	ldd	r24, Y+2	; 0x02
    5942:	48 2f       	mov	r20, r24
    5944:	50 e0       	ldi	r21, 0x00	; 0
    5946:	ca 01       	movw	r24, r20
    5948:	88 0f       	add	r24, r24
    594a:	99 1f       	adc	r25, r25
    594c:	9c 01       	movw	r18, r24
    594e:	22 0f       	add	r18, r18
    5950:	33 1f       	adc	r19, r19
    5952:	22 0f       	add	r18, r18
    5954:	33 1f       	adc	r19, r19
    5956:	22 0f       	add	r18, r18
    5958:	33 1f       	adc	r19, r19
    595a:	82 0f       	add	r24, r18
    595c:	93 1f       	adc	r25, r19
    595e:	84 0f       	add	r24, r20
    5960:	95 1f       	adc	r25, r21
    5962:	fc 01       	movw	r30, r24
    5964:	ea 54       	subi	r30, 0x4A	; 74
    5966:	fe 4f       	sbci	r31, 0xFE	; 254
    5968:	80 81       	ld	r24, Z
    596a:	82 30       	cpi	r24, 0x02	; 2
    596c:	91 f5       	brne	.+100    	; 0x59d2 <Seven_Segment_enuDisableCommon+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin ,DIO_u8HIGH);
    596e:	8a 81       	ldd	r24, Y+2	; 0x02
    5970:	48 2f       	mov	r20, r24
    5972:	50 e0       	ldi	r21, 0x00	; 0
    5974:	ca 01       	movw	r24, r20
    5976:	88 0f       	add	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	9c 01       	movw	r18, r24
    597c:	22 0f       	add	r18, r18
    597e:	33 1f       	adc	r19, r19
    5980:	22 0f       	add	r18, r18
    5982:	33 1f       	adc	r19, r19
    5984:	22 0f       	add	r18, r18
    5986:	33 1f       	adc	r19, r19
    5988:	82 0f       	add	r24, r18
    598a:	93 1f       	adc	r25, r19
    598c:	84 0f       	add	r24, r20
    598e:	95 1f       	adc	r25, r21
    5990:	fc 01       	movw	r30, r24
    5992:	ee 54       	subi	r30, 0x4E	; 78
    5994:	fe 4f       	sbci	r31, 0xFE	; 254
    5996:	60 81       	ld	r22, Z
    5998:	8a 81       	ldd	r24, Y+2	; 0x02
    599a:	48 2f       	mov	r20, r24
    599c:	50 e0       	ldi	r21, 0x00	; 0
    599e:	ca 01       	movw	r24, r20
    59a0:	88 0f       	add	r24, r24
    59a2:	99 1f       	adc	r25, r25
    59a4:	9c 01       	movw	r18, r24
    59a6:	22 0f       	add	r18, r18
    59a8:	33 1f       	adc	r19, r19
    59aa:	22 0f       	add	r18, r18
    59ac:	33 1f       	adc	r19, r19
    59ae:	22 0f       	add	r18, r18
    59b0:	33 1f       	adc	r19, r19
    59b2:	82 0f       	add	r24, r18
    59b4:	93 1f       	adc	r25, r19
    59b6:	84 0f       	add	r24, r20
    59b8:	95 1f       	adc	r25, r21
    59ba:	fc 01       	movw	r30, r24
    59bc:	ed 54       	subi	r30, 0x4D	; 77
    59be:	fe 4f       	sbci	r31, 0xFE	; 254
    59c0:	90 81       	ld	r25, Z
    59c2:	86 2f       	mov	r24, r22
    59c4:	69 2f       	mov	r22, r25
    59c6:	41 e0       	ldi	r20, 0x01	; 1
    59c8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    59cc:	81 e0       	ldi	r24, 0x01	; 1
    59ce:	89 83       	std	Y+1, r24	; 0x01
    59d0:	08 c0       	rjmp	.+16     	; 0x59e2 <Seven_Segment_enuDisableCommon+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    59d2:	84 e0       	ldi	r24, 0x04	; 4
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	05 c0       	rjmp	.+10     	; 0x59e2 <Seven_Segment_enuDisableCommon+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    59d8:	84 e0       	ldi	r24, 0x04	; 4
    59da:	89 83       	std	Y+1, r24	; 0x01
    59dc:	02 c0       	rjmp	.+4      	; 0x59e2 <Seven_Segment_enuDisableCommon+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    59de:	83 e0       	ldi	r24, 0x03	; 3
    59e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    59e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    59e4:	0f 90       	pop	r0
    59e6:	0f 90       	pop	r0
    59e8:	cf 91       	pop	r28
    59ea:	df 91       	pop	r29
    59ec:	08 95       	ret

000059ee <Seven_Segment_enuEnableDot>:

ES_T Seven_Segment_enuEnableDot(u8 Copy_u8SegID)
{
    59ee:	df 93       	push	r29
    59f0:	cf 93       	push	r28
    59f2:	00 d0       	rcall	.+0      	; 0x59f4 <Seven_Segment_enuEnableDot+0x6>
    59f4:	cd b7       	in	r28, 0x3d	; 61
    59f6:	de b7       	in	r29, 0x3e	; 62
    59f8:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    59fa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    59fc:	8a 81       	ldd	r24, Y+2	; 0x02
    59fe:	82 30       	cpi	r24, 0x02	; 2
    5a00:	08 f0       	brcs	.+2      	; 0x5a04 <Seven_Segment_enuEnableDot+0x16>
    5a02:	c8 c0       	rjmp	.+400    	; 0x5b94 <Seven_Segment_enuEnableDot+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED
    5a04:	8a 81       	ldd	r24, Y+2	; 0x02
    5a06:	48 2f       	mov	r20, r24
    5a08:	50 e0       	ldi	r21, 0x00	; 0
    5a0a:	ca 01       	movw	r24, r20
    5a0c:	88 0f       	add	r24, r24
    5a0e:	99 1f       	adc	r25, r25
    5a10:	9c 01       	movw	r18, r24
    5a12:	22 0f       	add	r18, r18
    5a14:	33 1f       	adc	r19, r19
    5a16:	22 0f       	add	r18, r18
    5a18:	33 1f       	adc	r19, r19
    5a1a:	22 0f       	add	r18, r18
    5a1c:	33 1f       	adc	r19, r19
    5a1e:	82 0f       	add	r24, r18
    5a20:	93 1f       	adc	r25, r19
    5a22:	84 0f       	add	r24, r20
    5a24:	95 1f       	adc	r25, r21
    5a26:	fc 01       	movw	r30, r24
    5a28:	ec 54       	subi	r30, 0x4C	; 76
    5a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a2c:	80 81       	ld	r24, Z
    5a2e:	84 31       	cpi	r24, 0x14	; 20
    5a30:	09 f4       	brne	.+2      	; 0x5a34 <Seven_Segment_enuEnableDot+0x46>
    5a32:	ad c0       	rjmp	.+346    	; 0x5b8e <Seven_Segment_enuEnableDot+0x1a0>
    5a34:	8a 81       	ldd	r24, Y+2	; 0x02
    5a36:	48 2f       	mov	r20, r24
    5a38:	50 e0       	ldi	r21, 0x00	; 0
    5a3a:	ca 01       	movw	r24, r20
    5a3c:	88 0f       	add	r24, r24
    5a3e:	99 1f       	adc	r25, r25
    5a40:	9c 01       	movw	r18, r24
    5a42:	22 0f       	add	r18, r18
    5a44:	33 1f       	adc	r19, r19
    5a46:	22 0f       	add	r18, r18
    5a48:	33 1f       	adc	r19, r19
    5a4a:	22 0f       	add	r18, r18
    5a4c:	33 1f       	adc	r19, r19
    5a4e:	82 0f       	add	r24, r18
    5a50:	93 1f       	adc	r25, r19
    5a52:	84 0f       	add	r24, r20
    5a54:	95 1f       	adc	r25, r21
    5a56:	fc 01       	movw	r30, r24
    5a58:	eb 54       	subi	r30, 0x4B	; 75
    5a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a5c:	80 81       	ld	r24, Z
    5a5e:	84 31       	cpi	r24, 0x14	; 20
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <Seven_Segment_enuEnableDot+0x76>
    5a62:	95 c0       	rjmp	.+298    	; 0x5b8e <Seven_Segment_enuEnableDot+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    5a64:	8a 81       	ldd	r24, Y+2	; 0x02
    5a66:	48 2f       	mov	r20, r24
    5a68:	50 e0       	ldi	r21, 0x00	; 0
    5a6a:	ca 01       	movw	r24, r20
    5a6c:	88 0f       	add	r24, r24
    5a6e:	99 1f       	adc	r25, r25
    5a70:	9c 01       	movw	r18, r24
    5a72:	22 0f       	add	r18, r18
    5a74:	33 1f       	adc	r19, r19
    5a76:	22 0f       	add	r18, r18
    5a78:	33 1f       	adc	r19, r19
    5a7a:	22 0f       	add	r18, r18
    5a7c:	33 1f       	adc	r19, r19
    5a7e:	82 0f       	add	r24, r18
    5a80:	93 1f       	adc	r25, r19
    5a82:	84 0f       	add	r24, r20
    5a84:	95 1f       	adc	r25, r21
    5a86:	fc 01       	movw	r30, r24
    5a88:	ea 54       	subi	r30, 0x4A	; 74
    5a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a8c:	80 81       	ld	r24, Z
    5a8e:	81 30       	cpi	r24, 0x01	; 1
    5a90:	91 f5       	brne	.+100    	; 0x5af6 <Seven_Segment_enuEnableDot+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8HIGH);
    5a92:	8a 81       	ldd	r24, Y+2	; 0x02
    5a94:	48 2f       	mov	r20, r24
    5a96:	50 e0       	ldi	r21, 0x00	; 0
    5a98:	ca 01       	movw	r24, r20
    5a9a:	88 0f       	add	r24, r24
    5a9c:	99 1f       	adc	r25, r25
    5a9e:	9c 01       	movw	r18, r24
    5aa0:	22 0f       	add	r18, r18
    5aa2:	33 1f       	adc	r19, r19
    5aa4:	22 0f       	add	r18, r18
    5aa6:	33 1f       	adc	r19, r19
    5aa8:	22 0f       	add	r18, r18
    5aaa:	33 1f       	adc	r19, r19
    5aac:	82 0f       	add	r24, r18
    5aae:	93 1f       	adc	r25, r19
    5ab0:	84 0f       	add	r24, r20
    5ab2:	95 1f       	adc	r25, r21
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	ec 54       	subi	r30, 0x4C	; 76
    5ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    5aba:	60 81       	ld	r22, Z
    5abc:	8a 81       	ldd	r24, Y+2	; 0x02
    5abe:	48 2f       	mov	r20, r24
    5ac0:	50 e0       	ldi	r21, 0x00	; 0
    5ac2:	ca 01       	movw	r24, r20
    5ac4:	88 0f       	add	r24, r24
    5ac6:	99 1f       	adc	r25, r25
    5ac8:	9c 01       	movw	r18, r24
    5aca:	22 0f       	add	r18, r18
    5acc:	33 1f       	adc	r19, r19
    5ace:	22 0f       	add	r18, r18
    5ad0:	33 1f       	adc	r19, r19
    5ad2:	22 0f       	add	r18, r18
    5ad4:	33 1f       	adc	r19, r19
    5ad6:	82 0f       	add	r24, r18
    5ad8:	93 1f       	adc	r25, r19
    5ada:	84 0f       	add	r24, r20
    5adc:	95 1f       	adc	r25, r21
    5ade:	fc 01       	movw	r30, r24
    5ae0:	eb 54       	subi	r30, 0x4B	; 75
    5ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    5ae4:	90 81       	ld	r25, Z
    5ae6:	86 2f       	mov	r24, r22
    5ae8:	69 2f       	mov	r22, r25
    5aea:	41 e0       	ldi	r20, 0x01	; 1
    5aec:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	89 83       	std	Y+1, r24	; 0x01
    5af4:	51 c0       	rjmp	.+162    	; 0x5b98 <Seven_Segment_enuEnableDot+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    5af6:	8a 81       	ldd	r24, Y+2	; 0x02
    5af8:	48 2f       	mov	r20, r24
    5afa:	50 e0       	ldi	r21, 0x00	; 0
    5afc:	ca 01       	movw	r24, r20
    5afe:	88 0f       	add	r24, r24
    5b00:	99 1f       	adc	r25, r25
    5b02:	9c 01       	movw	r18, r24
    5b04:	22 0f       	add	r18, r18
    5b06:	33 1f       	adc	r19, r19
    5b08:	22 0f       	add	r18, r18
    5b0a:	33 1f       	adc	r19, r19
    5b0c:	22 0f       	add	r18, r18
    5b0e:	33 1f       	adc	r19, r19
    5b10:	82 0f       	add	r24, r18
    5b12:	93 1f       	adc	r25, r19
    5b14:	84 0f       	add	r24, r20
    5b16:	95 1f       	adc	r25, r21
    5b18:	fc 01       	movw	r30, r24
    5b1a:	ea 54       	subi	r30, 0x4A	; 74
    5b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5b1e:	80 81       	ld	r24, Z
    5b20:	82 30       	cpi	r24, 0x02	; 2
    5b22:	91 f5       	brne	.+100    	; 0x5b88 <Seven_Segment_enuEnableDot+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8LOW);
    5b24:	8a 81       	ldd	r24, Y+2	; 0x02
    5b26:	48 2f       	mov	r20, r24
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	ca 01       	movw	r24, r20
    5b2c:	88 0f       	add	r24, r24
    5b2e:	99 1f       	adc	r25, r25
    5b30:	9c 01       	movw	r18, r24
    5b32:	22 0f       	add	r18, r18
    5b34:	33 1f       	adc	r19, r19
    5b36:	22 0f       	add	r18, r18
    5b38:	33 1f       	adc	r19, r19
    5b3a:	22 0f       	add	r18, r18
    5b3c:	33 1f       	adc	r19, r19
    5b3e:	82 0f       	add	r24, r18
    5b40:	93 1f       	adc	r25, r19
    5b42:	84 0f       	add	r24, r20
    5b44:	95 1f       	adc	r25, r21
    5b46:	fc 01       	movw	r30, r24
    5b48:	ec 54       	subi	r30, 0x4C	; 76
    5b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    5b4c:	60 81       	ld	r22, Z
    5b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b50:	48 2f       	mov	r20, r24
    5b52:	50 e0       	ldi	r21, 0x00	; 0
    5b54:	ca 01       	movw	r24, r20
    5b56:	88 0f       	add	r24, r24
    5b58:	99 1f       	adc	r25, r25
    5b5a:	9c 01       	movw	r18, r24
    5b5c:	22 0f       	add	r18, r18
    5b5e:	33 1f       	adc	r19, r19
    5b60:	22 0f       	add	r18, r18
    5b62:	33 1f       	adc	r19, r19
    5b64:	22 0f       	add	r18, r18
    5b66:	33 1f       	adc	r19, r19
    5b68:	82 0f       	add	r24, r18
    5b6a:	93 1f       	adc	r25, r19
    5b6c:	84 0f       	add	r24, r20
    5b6e:	95 1f       	adc	r25, r21
    5b70:	fc 01       	movw	r30, r24
    5b72:	eb 54       	subi	r30, 0x4B	; 75
    5b74:	fe 4f       	sbci	r31, 0xFE	; 254
    5b76:	90 81       	ld	r25, Z
    5b78:	86 2f       	mov	r24, r22
    5b7a:	69 2f       	mov	r22, r25
    5b7c:	40 e0       	ldi	r20, 0x00	; 0
    5b7e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	89 83       	std	Y+1, r24	; 0x01
    5b86:	08 c0       	rjmp	.+16     	; 0x5b98 <Seven_Segment_enuEnableDot+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    5b88:	84 e0       	ldi	r24, 0x04	; 4
    5b8a:	89 83       	std	Y+1, r24	; 0x01
    5b8c:	05 c0       	rjmp	.+10     	; 0x5b98 <Seven_Segment_enuEnableDot+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    5b8e:	84 e0       	ldi	r24, 0x04	; 4
    5b90:	89 83       	std	Y+1, r24	; 0x01
    5b92:	02 c0       	rjmp	.+4      	; 0x5b98 <Seven_Segment_enuEnableDot+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    5b94:	83 e0       	ldi	r24, 0x03	; 3
    5b96:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    5b98:	89 81       	ldd	r24, Y+1	; 0x01

}
    5b9a:	0f 90       	pop	r0
    5b9c:	0f 90       	pop	r0
    5b9e:	cf 91       	pop	r28
    5ba0:	df 91       	pop	r29
    5ba2:	08 95       	ret

00005ba4 <Seven_Segment_enuDisableDot>:

ES_T Seven_Segment_enuDisableDot(u8 Copy_u8SegID)
{
    5ba4:	df 93       	push	r29
    5ba6:	cf 93       	push	r28
    5ba8:	00 d0       	rcall	.+0      	; 0x5baa <Seven_Segment_enuDisableDot+0x6>
    5baa:	cd b7       	in	r28, 0x3d	; 61
    5bac:	de b7       	in	r29, 0x3e	; 62
    5bae:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    5bb0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb4:	82 30       	cpi	r24, 0x02	; 2
    5bb6:	08 f0       	brcs	.+2      	; 0x5bba <Seven_Segment_enuDisableDot+0x16>
    5bb8:	c8 c0       	rjmp	.+400    	; 0x5d4a <Seven_Segment_enuDisableDot+0x1a6>
	{
		if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED
    5bba:	8a 81       	ldd	r24, Y+2	; 0x02
    5bbc:	48 2f       	mov	r20, r24
    5bbe:	50 e0       	ldi	r21, 0x00	; 0
    5bc0:	ca 01       	movw	r24, r20
    5bc2:	88 0f       	add	r24, r24
    5bc4:	99 1f       	adc	r25, r25
    5bc6:	9c 01       	movw	r18, r24
    5bc8:	22 0f       	add	r18, r18
    5bca:	33 1f       	adc	r19, r19
    5bcc:	22 0f       	add	r18, r18
    5bce:	33 1f       	adc	r19, r19
    5bd0:	22 0f       	add	r18, r18
    5bd2:	33 1f       	adc	r19, r19
    5bd4:	82 0f       	add	r24, r18
    5bd6:	93 1f       	adc	r25, r19
    5bd8:	84 0f       	add	r24, r20
    5bda:	95 1f       	adc	r25, r21
    5bdc:	fc 01       	movw	r30, r24
    5bde:	ec 54       	subi	r30, 0x4C	; 76
    5be0:	fe 4f       	sbci	r31, 0xFE	; 254
    5be2:	80 81       	ld	r24, Z
    5be4:	84 31       	cpi	r24, 0x14	; 20
    5be6:	09 f4       	brne	.+2      	; 0x5bea <Seven_Segment_enuDisableDot+0x46>
    5be8:	ad c0       	rjmp	.+346    	; 0x5d44 <Seven_Segment_enuDisableDot+0x1a0>
    5bea:	8a 81       	ldd	r24, Y+2	; 0x02
    5bec:	48 2f       	mov	r20, r24
    5bee:	50 e0       	ldi	r21, 0x00	; 0
    5bf0:	ca 01       	movw	r24, r20
    5bf2:	88 0f       	add	r24, r24
    5bf4:	99 1f       	adc	r25, r25
    5bf6:	9c 01       	movw	r18, r24
    5bf8:	22 0f       	add	r18, r18
    5bfa:	33 1f       	adc	r19, r19
    5bfc:	22 0f       	add	r18, r18
    5bfe:	33 1f       	adc	r19, r19
    5c00:	22 0f       	add	r18, r18
    5c02:	33 1f       	adc	r19, r19
    5c04:	82 0f       	add	r24, r18
    5c06:	93 1f       	adc	r25, r19
    5c08:	84 0f       	add	r24, r20
    5c0a:	95 1f       	adc	r25, r21
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	eb 54       	subi	r30, 0x4B	; 75
    5c10:	fe 4f       	sbci	r31, 0xFE	; 254
    5c12:	80 81       	ld	r24, Z
    5c14:	84 31       	cpi	r24, 0x14	; 20
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <Seven_Segment_enuDisableDot+0x76>
    5c18:	95 c0       	rjmp	.+298    	; 0x5d44 <Seven_Segment_enuDisableDot+0x1a0>
				&& SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    5c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c1c:	48 2f       	mov	r20, r24
    5c1e:	50 e0       	ldi	r21, 0x00	; 0
    5c20:	ca 01       	movw	r24, r20
    5c22:	88 0f       	add	r24, r24
    5c24:	99 1f       	adc	r25, r25
    5c26:	9c 01       	movw	r18, r24
    5c28:	22 0f       	add	r18, r18
    5c2a:	33 1f       	adc	r19, r19
    5c2c:	22 0f       	add	r18, r18
    5c2e:	33 1f       	adc	r19, r19
    5c30:	22 0f       	add	r18, r18
    5c32:	33 1f       	adc	r19, r19
    5c34:	82 0f       	add	r24, r18
    5c36:	93 1f       	adc	r25, r19
    5c38:	84 0f       	add	r24, r20
    5c3a:	95 1f       	adc	r25, r21
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	ea 54       	subi	r30, 0x4A	; 74
    5c40:	fe 4f       	sbci	r31, 0xFE	; 254
    5c42:	80 81       	ld	r24, Z
    5c44:	81 30       	cpi	r24, 0x01	; 1
    5c46:	91 f5       	brne	.+100    	; 0x5cac <Seven_Segment_enuDisableDot+0x108>
			{

				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8LOW);
    5c48:	8a 81       	ldd	r24, Y+2	; 0x02
    5c4a:	48 2f       	mov	r20, r24
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	ca 01       	movw	r24, r20
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	9c 01       	movw	r18, r24
    5c56:	22 0f       	add	r18, r18
    5c58:	33 1f       	adc	r19, r19
    5c5a:	22 0f       	add	r18, r18
    5c5c:	33 1f       	adc	r19, r19
    5c5e:	22 0f       	add	r18, r18
    5c60:	33 1f       	adc	r19, r19
    5c62:	82 0f       	add	r24, r18
    5c64:	93 1f       	adc	r25, r19
    5c66:	84 0f       	add	r24, r20
    5c68:	95 1f       	adc	r25, r21
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	ec 54       	subi	r30, 0x4C	; 76
    5c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c70:	60 81       	ld	r22, Z
    5c72:	8a 81       	ldd	r24, Y+2	; 0x02
    5c74:	48 2f       	mov	r20, r24
    5c76:	50 e0       	ldi	r21, 0x00	; 0
    5c78:	ca 01       	movw	r24, r20
    5c7a:	88 0f       	add	r24, r24
    5c7c:	99 1f       	adc	r25, r25
    5c7e:	9c 01       	movw	r18, r24
    5c80:	22 0f       	add	r18, r18
    5c82:	33 1f       	adc	r19, r19
    5c84:	22 0f       	add	r18, r18
    5c86:	33 1f       	adc	r19, r19
    5c88:	22 0f       	add	r18, r18
    5c8a:	33 1f       	adc	r19, r19
    5c8c:	82 0f       	add	r24, r18
    5c8e:	93 1f       	adc	r25, r19
    5c90:	84 0f       	add	r24, r20
    5c92:	95 1f       	adc	r25, r21
    5c94:	fc 01       	movw	r30, r24
    5c96:	eb 54       	subi	r30, 0x4B	; 75
    5c98:	fe 4f       	sbci	r31, 0xFE	; 254
    5c9a:	90 81       	ld	r25, Z
    5c9c:	86 2f       	mov	r24, r22
    5c9e:	69 2f       	mov	r22, r25
    5ca0:	40 e0       	ldi	r20, 0x00	; 0
    5ca2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	89 83       	std	Y+1, r24	; 0x01
    5caa:	51 c0       	rjmp	.+162    	; 0x5d4e <Seven_Segment_enuDisableDot+0x1aa>
			}
			else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    5cac:	8a 81       	ldd	r24, Y+2	; 0x02
    5cae:	48 2f       	mov	r20, r24
    5cb0:	50 e0       	ldi	r21, 0x00	; 0
    5cb2:	ca 01       	movw	r24, r20
    5cb4:	88 0f       	add	r24, r24
    5cb6:	99 1f       	adc	r25, r25
    5cb8:	9c 01       	movw	r18, r24
    5cba:	22 0f       	add	r18, r18
    5cbc:	33 1f       	adc	r19, r19
    5cbe:	22 0f       	add	r18, r18
    5cc0:	33 1f       	adc	r19, r19
    5cc2:	22 0f       	add	r18, r18
    5cc4:	33 1f       	adc	r19, r19
    5cc6:	82 0f       	add	r24, r18
    5cc8:	93 1f       	adc	r25, r19
    5cca:	84 0f       	add	r24, r20
    5ccc:	95 1f       	adc	r25, r21
    5cce:	fc 01       	movw	r30, r24
    5cd0:	ea 54       	subi	r30, 0x4A	; 74
    5cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    5cd4:	80 81       	ld	r24, Z
    5cd6:	82 30       	cpi	r24, 0x02	; 2
    5cd8:	91 f5       	brne	.+100    	; 0x5d3e <Seven_Segment_enuDisableDot+0x19a>
			{
				DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin ,DIO_u8HIGH);
    5cda:	8a 81       	ldd	r24, Y+2	; 0x02
    5cdc:	48 2f       	mov	r20, r24
    5cde:	50 e0       	ldi	r21, 0x00	; 0
    5ce0:	ca 01       	movw	r24, r20
    5ce2:	88 0f       	add	r24, r24
    5ce4:	99 1f       	adc	r25, r25
    5ce6:	9c 01       	movw	r18, r24
    5ce8:	22 0f       	add	r18, r18
    5cea:	33 1f       	adc	r19, r19
    5cec:	22 0f       	add	r18, r18
    5cee:	33 1f       	adc	r19, r19
    5cf0:	22 0f       	add	r18, r18
    5cf2:	33 1f       	adc	r19, r19
    5cf4:	82 0f       	add	r24, r18
    5cf6:	93 1f       	adc	r25, r19
    5cf8:	84 0f       	add	r24, r20
    5cfa:	95 1f       	adc	r25, r21
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	ec 54       	subi	r30, 0x4C	; 76
    5d00:	fe 4f       	sbci	r31, 0xFE	; 254
    5d02:	60 81       	ld	r22, Z
    5d04:	8a 81       	ldd	r24, Y+2	; 0x02
    5d06:	48 2f       	mov	r20, r24
    5d08:	50 e0       	ldi	r21, 0x00	; 0
    5d0a:	ca 01       	movw	r24, r20
    5d0c:	88 0f       	add	r24, r24
    5d0e:	99 1f       	adc	r25, r25
    5d10:	9c 01       	movw	r18, r24
    5d12:	22 0f       	add	r18, r18
    5d14:	33 1f       	adc	r19, r19
    5d16:	22 0f       	add	r18, r18
    5d18:	33 1f       	adc	r19, r19
    5d1a:	22 0f       	add	r18, r18
    5d1c:	33 1f       	adc	r19, r19
    5d1e:	82 0f       	add	r24, r18
    5d20:	93 1f       	adc	r25, r19
    5d22:	84 0f       	add	r24, r20
    5d24:	95 1f       	adc	r25, r21
    5d26:	fc 01       	movw	r30, r24
    5d28:	eb 54       	subi	r30, 0x4B	; 75
    5d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5d2c:	90 81       	ld	r25, Z
    5d2e:	86 2f       	mov	r24, r22
    5d30:	69 2f       	mov	r22, r25
    5d32:	41 e0       	ldi	r20, 0x01	; 1
    5d34:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
				Local_enuErrorState = ES_OK;
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	89 83       	std	Y+1, r24	; 0x01
    5d3c:	08 c0       	rjmp	.+16     	; 0x5d4e <Seven_Segment_enuDisableDot+0x1aa>
			}
			else
			{
				Local_enuErrorState = ES_7SEG_ERROR;
    5d3e:	84 e0       	ldi	r24, 0x04	; 4
    5d40:	89 83       	std	Y+1, r24	; 0x01
    5d42:	05 c0       	rjmp	.+10     	; 0x5d4e <Seven_Segment_enuDisableDot+0x1aa>
			}
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    5d44:	84 e0       	ldi	r24, 0x04	; 4
    5d46:	89 83       	std	Y+1, r24	; 0x01
    5d48:	02 c0       	rjmp	.+4      	; 0x5d4e <Seven_Segment_enuDisableDot+0x1aa>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    5d4a:	83 e0       	ldi	r24, 0x03	; 3
    5d4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01

}
    5d50:	0f 90       	pop	r0
    5d52:	0f 90       	pop	r0
    5d54:	cf 91       	pop	r28
    5d56:	df 91       	pop	r29
    5d58:	08 95       	ret

00005d5a <Seven_Segment_enuClearDisplay>:

ES_T Seven_Segment_enuClearDisplay(u8 Copy_u8SegID)
{
    5d5a:	df 93       	push	r29
    5d5c:	cf 93       	push	r28
    5d5e:	00 d0       	rcall	.+0      	; 0x5d60 <Seven_Segment_enuClearDisplay+0x6>
    5d60:	cd b7       	in	r28, 0x3d	; 61
    5d62:	de b7       	in	r29, 0x3e	; 62
    5d64:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    5d66:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SegID < SEVEN_SEG_NUM)
    5d68:	8a 81       	ldd	r24, Y+2	; 0x02
    5d6a:	82 30       	cpi	r24, 0x02	; 2
    5d6c:	08 f0       	brcs	.+2      	; 0x5d70 <Seven_Segment_enuClearDisplay+0x16>
    5d6e:	cb c2       	rjmp	.+1430   	; 0x6306 <Seven_Segment_enuClearDisplay+0x5ac>
	{
		if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    5d70:	8a 81       	ldd	r24, Y+2	; 0x02
    5d72:	48 2f       	mov	r20, r24
    5d74:	50 e0       	ldi	r21, 0x00	; 0
    5d76:	ca 01       	movw	r24, r20
    5d78:	88 0f       	add	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	9c 01       	movw	r18, r24
    5d7e:	22 0f       	add	r18, r18
    5d80:	33 1f       	adc	r19, r19
    5d82:	22 0f       	add	r18, r18
    5d84:	33 1f       	adc	r19, r19
    5d86:	22 0f       	add	r18, r18
    5d88:	33 1f       	adc	r19, r19
    5d8a:	82 0f       	add	r24, r18
    5d8c:	93 1f       	adc	r25, r19
    5d8e:	84 0f       	add	r24, r20
    5d90:	95 1f       	adc	r25, r21
    5d92:	fc 01       	movw	r30, r24
    5d94:	ea 54       	subi	r30, 0x4A	; 74
    5d96:	fe 4f       	sbci	r31, 0xFE	; 254
    5d98:	80 81       	ld	r24, Z
    5d9a:	81 30       	cpi	r24, 0x01	; 1
    5d9c:	09 f0       	breq	.+2      	; 0x5da0 <Seven_Segment_enuClearDisplay+0x46>
    5d9e:	4c c1       	rjmp	.+664    	; 0x6038 <Seven_Segment_enuClearDisplay+0x2de>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , DIO_u8LOW );
    5da0:	8a 81       	ldd	r24, Y+2	; 0x02
    5da2:	48 2f       	mov	r20, r24
    5da4:	50 e0       	ldi	r21, 0x00	; 0
    5da6:	ca 01       	movw	r24, r20
    5da8:	88 0f       	add	r24, r24
    5daa:	99 1f       	adc	r25, r25
    5dac:	9c 01       	movw	r18, r24
    5dae:	22 0f       	add	r18, r18
    5db0:	33 1f       	adc	r19, r19
    5db2:	22 0f       	add	r18, r18
    5db4:	33 1f       	adc	r19, r19
    5db6:	22 0f       	add	r18, r18
    5db8:	33 1f       	adc	r19, r19
    5dba:	82 0f       	add	r24, r18
    5dbc:	93 1f       	adc	r25, r19
    5dbe:	84 0f       	add	r24, r20
    5dc0:	95 1f       	adc	r25, r21
    5dc2:	fc 01       	movw	r30, r24
    5dc4:	ec 55       	subi	r30, 0x5C	; 92
    5dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    5dc8:	60 81       	ld	r22, Z
    5dca:	8a 81       	ldd	r24, Y+2	; 0x02
    5dcc:	48 2f       	mov	r20, r24
    5dce:	50 e0       	ldi	r21, 0x00	; 0
    5dd0:	ca 01       	movw	r24, r20
    5dd2:	88 0f       	add	r24, r24
    5dd4:	99 1f       	adc	r25, r25
    5dd6:	9c 01       	movw	r18, r24
    5dd8:	22 0f       	add	r18, r18
    5dda:	33 1f       	adc	r19, r19
    5ddc:	22 0f       	add	r18, r18
    5dde:	33 1f       	adc	r19, r19
    5de0:	22 0f       	add	r18, r18
    5de2:	33 1f       	adc	r19, r19
    5de4:	82 0f       	add	r24, r18
    5de6:	93 1f       	adc	r25, r19
    5de8:	84 0f       	add	r24, r20
    5dea:	95 1f       	adc	r25, r21
    5dec:	fc 01       	movw	r30, r24
    5dee:	eb 55       	subi	r30, 0x5B	; 91
    5df0:	fe 4f       	sbci	r31, 0xFE	; 254
    5df2:	90 81       	ld	r25, Z
    5df4:	86 2f       	mov	r24, r22
    5df6:	69 2f       	mov	r22, r25
    5df8:	40 e0       	ldi	r20, 0x00	; 0
    5dfa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , DIO_u8LOW );
    5dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5e00:	48 2f       	mov	r20, r24
    5e02:	50 e0       	ldi	r21, 0x00	; 0
    5e04:	ca 01       	movw	r24, r20
    5e06:	88 0f       	add	r24, r24
    5e08:	99 1f       	adc	r25, r25
    5e0a:	9c 01       	movw	r18, r24
    5e0c:	22 0f       	add	r18, r18
    5e0e:	33 1f       	adc	r19, r19
    5e10:	22 0f       	add	r18, r18
    5e12:	33 1f       	adc	r19, r19
    5e14:	22 0f       	add	r18, r18
    5e16:	33 1f       	adc	r19, r19
    5e18:	82 0f       	add	r24, r18
    5e1a:	93 1f       	adc	r25, r19
    5e1c:	84 0f       	add	r24, r20
    5e1e:	95 1f       	adc	r25, r21
    5e20:	fc 01       	movw	r30, r24
    5e22:	ea 55       	subi	r30, 0x5A	; 90
    5e24:	fe 4f       	sbci	r31, 0xFE	; 254
    5e26:	60 81       	ld	r22, Z
    5e28:	8a 81       	ldd	r24, Y+2	; 0x02
    5e2a:	48 2f       	mov	r20, r24
    5e2c:	50 e0       	ldi	r21, 0x00	; 0
    5e2e:	ca 01       	movw	r24, r20
    5e30:	88 0f       	add	r24, r24
    5e32:	99 1f       	adc	r25, r25
    5e34:	9c 01       	movw	r18, r24
    5e36:	22 0f       	add	r18, r18
    5e38:	33 1f       	adc	r19, r19
    5e3a:	22 0f       	add	r18, r18
    5e3c:	33 1f       	adc	r19, r19
    5e3e:	22 0f       	add	r18, r18
    5e40:	33 1f       	adc	r19, r19
    5e42:	82 0f       	add	r24, r18
    5e44:	93 1f       	adc	r25, r19
    5e46:	84 0f       	add	r24, r20
    5e48:	95 1f       	adc	r25, r21
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	e9 55       	subi	r30, 0x59	; 89
    5e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e50:	90 81       	ld	r25, Z
    5e52:	86 2f       	mov	r24, r22
    5e54:	69 2f       	mov	r22, r25
    5e56:	40 e0       	ldi	r20, 0x00	; 0
    5e58:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , DIO_u8LOW );
    5e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e5e:	48 2f       	mov	r20, r24
    5e60:	50 e0       	ldi	r21, 0x00	; 0
    5e62:	ca 01       	movw	r24, r20
    5e64:	88 0f       	add	r24, r24
    5e66:	99 1f       	adc	r25, r25
    5e68:	9c 01       	movw	r18, r24
    5e6a:	22 0f       	add	r18, r18
    5e6c:	33 1f       	adc	r19, r19
    5e6e:	22 0f       	add	r18, r18
    5e70:	33 1f       	adc	r19, r19
    5e72:	22 0f       	add	r18, r18
    5e74:	33 1f       	adc	r19, r19
    5e76:	82 0f       	add	r24, r18
    5e78:	93 1f       	adc	r25, r19
    5e7a:	84 0f       	add	r24, r20
    5e7c:	95 1f       	adc	r25, r21
    5e7e:	fc 01       	movw	r30, r24
    5e80:	e8 55       	subi	r30, 0x58	; 88
    5e82:	fe 4f       	sbci	r31, 0xFE	; 254
    5e84:	60 81       	ld	r22, Z
    5e86:	8a 81       	ldd	r24, Y+2	; 0x02
    5e88:	48 2f       	mov	r20, r24
    5e8a:	50 e0       	ldi	r21, 0x00	; 0
    5e8c:	ca 01       	movw	r24, r20
    5e8e:	88 0f       	add	r24, r24
    5e90:	99 1f       	adc	r25, r25
    5e92:	9c 01       	movw	r18, r24
    5e94:	22 0f       	add	r18, r18
    5e96:	33 1f       	adc	r19, r19
    5e98:	22 0f       	add	r18, r18
    5e9a:	33 1f       	adc	r19, r19
    5e9c:	22 0f       	add	r18, r18
    5e9e:	33 1f       	adc	r19, r19
    5ea0:	82 0f       	add	r24, r18
    5ea2:	93 1f       	adc	r25, r19
    5ea4:	84 0f       	add	r24, r20
    5ea6:	95 1f       	adc	r25, r21
    5ea8:	fc 01       	movw	r30, r24
    5eaa:	e7 55       	subi	r30, 0x57	; 87
    5eac:	fe 4f       	sbci	r31, 0xFE	; 254
    5eae:	90 81       	ld	r25, Z
    5eb0:	86 2f       	mov	r24, r22
    5eb2:	69 2f       	mov	r22, r25
    5eb4:	40 e0       	ldi	r20, 0x00	; 0
    5eb6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , DIO_u8LOW );
    5eba:	8a 81       	ldd	r24, Y+2	; 0x02
    5ebc:	48 2f       	mov	r20, r24
    5ebe:	50 e0       	ldi	r21, 0x00	; 0
    5ec0:	ca 01       	movw	r24, r20
    5ec2:	88 0f       	add	r24, r24
    5ec4:	99 1f       	adc	r25, r25
    5ec6:	9c 01       	movw	r18, r24
    5ec8:	22 0f       	add	r18, r18
    5eca:	33 1f       	adc	r19, r19
    5ecc:	22 0f       	add	r18, r18
    5ece:	33 1f       	adc	r19, r19
    5ed0:	22 0f       	add	r18, r18
    5ed2:	33 1f       	adc	r19, r19
    5ed4:	82 0f       	add	r24, r18
    5ed6:	93 1f       	adc	r25, r19
    5ed8:	84 0f       	add	r24, r20
    5eda:	95 1f       	adc	r25, r21
    5edc:	fc 01       	movw	r30, r24
    5ede:	e6 55       	subi	r30, 0x56	; 86
    5ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    5ee2:	60 81       	ld	r22, Z
    5ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee6:	48 2f       	mov	r20, r24
    5ee8:	50 e0       	ldi	r21, 0x00	; 0
    5eea:	ca 01       	movw	r24, r20
    5eec:	88 0f       	add	r24, r24
    5eee:	99 1f       	adc	r25, r25
    5ef0:	9c 01       	movw	r18, r24
    5ef2:	22 0f       	add	r18, r18
    5ef4:	33 1f       	adc	r19, r19
    5ef6:	22 0f       	add	r18, r18
    5ef8:	33 1f       	adc	r19, r19
    5efa:	22 0f       	add	r18, r18
    5efc:	33 1f       	adc	r19, r19
    5efe:	82 0f       	add	r24, r18
    5f00:	93 1f       	adc	r25, r19
    5f02:	84 0f       	add	r24, r20
    5f04:	95 1f       	adc	r25, r21
    5f06:	fc 01       	movw	r30, r24
    5f08:	e5 55       	subi	r30, 0x55	; 85
    5f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f0c:	90 81       	ld	r25, Z
    5f0e:	86 2f       	mov	r24, r22
    5f10:	69 2f       	mov	r22, r25
    5f12:	40 e0       	ldi	r20, 0x00	; 0
    5f14:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , DIO_u8LOW );
    5f18:	8a 81       	ldd	r24, Y+2	; 0x02
    5f1a:	48 2f       	mov	r20, r24
    5f1c:	50 e0       	ldi	r21, 0x00	; 0
    5f1e:	ca 01       	movw	r24, r20
    5f20:	88 0f       	add	r24, r24
    5f22:	99 1f       	adc	r25, r25
    5f24:	9c 01       	movw	r18, r24
    5f26:	22 0f       	add	r18, r18
    5f28:	33 1f       	adc	r19, r19
    5f2a:	22 0f       	add	r18, r18
    5f2c:	33 1f       	adc	r19, r19
    5f2e:	22 0f       	add	r18, r18
    5f30:	33 1f       	adc	r19, r19
    5f32:	82 0f       	add	r24, r18
    5f34:	93 1f       	adc	r25, r19
    5f36:	84 0f       	add	r24, r20
    5f38:	95 1f       	adc	r25, r21
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	e4 55       	subi	r30, 0x54	; 84
    5f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f40:	60 81       	ld	r22, Z
    5f42:	8a 81       	ldd	r24, Y+2	; 0x02
    5f44:	48 2f       	mov	r20, r24
    5f46:	50 e0       	ldi	r21, 0x00	; 0
    5f48:	ca 01       	movw	r24, r20
    5f4a:	88 0f       	add	r24, r24
    5f4c:	99 1f       	adc	r25, r25
    5f4e:	9c 01       	movw	r18, r24
    5f50:	22 0f       	add	r18, r18
    5f52:	33 1f       	adc	r19, r19
    5f54:	22 0f       	add	r18, r18
    5f56:	33 1f       	adc	r19, r19
    5f58:	22 0f       	add	r18, r18
    5f5a:	33 1f       	adc	r19, r19
    5f5c:	82 0f       	add	r24, r18
    5f5e:	93 1f       	adc	r25, r19
    5f60:	84 0f       	add	r24, r20
    5f62:	95 1f       	adc	r25, r21
    5f64:	fc 01       	movw	r30, r24
    5f66:	e3 55       	subi	r30, 0x53	; 83
    5f68:	fe 4f       	sbci	r31, 0xFE	; 254
    5f6a:	90 81       	ld	r25, Z
    5f6c:	86 2f       	mov	r24, r22
    5f6e:	69 2f       	mov	r22, r25
    5f70:	40 e0       	ldi	r20, 0x00	; 0
    5f72:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , DIO_u8LOW );
    5f76:	8a 81       	ldd	r24, Y+2	; 0x02
    5f78:	48 2f       	mov	r20, r24
    5f7a:	50 e0       	ldi	r21, 0x00	; 0
    5f7c:	ca 01       	movw	r24, r20
    5f7e:	88 0f       	add	r24, r24
    5f80:	99 1f       	adc	r25, r25
    5f82:	9c 01       	movw	r18, r24
    5f84:	22 0f       	add	r18, r18
    5f86:	33 1f       	adc	r19, r19
    5f88:	22 0f       	add	r18, r18
    5f8a:	33 1f       	adc	r19, r19
    5f8c:	22 0f       	add	r18, r18
    5f8e:	33 1f       	adc	r19, r19
    5f90:	82 0f       	add	r24, r18
    5f92:	93 1f       	adc	r25, r19
    5f94:	84 0f       	add	r24, r20
    5f96:	95 1f       	adc	r25, r21
    5f98:	fc 01       	movw	r30, r24
    5f9a:	e2 55       	subi	r30, 0x52	; 82
    5f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f9e:	60 81       	ld	r22, Z
    5fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa2:	48 2f       	mov	r20, r24
    5fa4:	50 e0       	ldi	r21, 0x00	; 0
    5fa6:	ca 01       	movw	r24, r20
    5fa8:	88 0f       	add	r24, r24
    5faa:	99 1f       	adc	r25, r25
    5fac:	9c 01       	movw	r18, r24
    5fae:	22 0f       	add	r18, r18
    5fb0:	33 1f       	adc	r19, r19
    5fb2:	22 0f       	add	r18, r18
    5fb4:	33 1f       	adc	r19, r19
    5fb6:	22 0f       	add	r18, r18
    5fb8:	33 1f       	adc	r19, r19
    5fba:	82 0f       	add	r24, r18
    5fbc:	93 1f       	adc	r25, r19
    5fbe:	84 0f       	add	r24, r20
    5fc0:	95 1f       	adc	r25, r21
    5fc2:	fc 01       	movw	r30, r24
    5fc4:	e1 55       	subi	r30, 0x51	; 81
    5fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    5fc8:	90 81       	ld	r25, Z
    5fca:	86 2f       	mov	r24, r22
    5fcc:	69 2f       	mov	r22, r25
    5fce:	40 e0       	ldi	r20, 0x00	; 0
    5fd0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , DIO_u8LOW );
    5fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    5fd6:	48 2f       	mov	r20, r24
    5fd8:	50 e0       	ldi	r21, 0x00	; 0
    5fda:	ca 01       	movw	r24, r20
    5fdc:	88 0f       	add	r24, r24
    5fde:	99 1f       	adc	r25, r25
    5fe0:	9c 01       	movw	r18, r24
    5fe2:	22 0f       	add	r18, r18
    5fe4:	33 1f       	adc	r19, r19
    5fe6:	22 0f       	add	r18, r18
    5fe8:	33 1f       	adc	r19, r19
    5fea:	22 0f       	add	r18, r18
    5fec:	33 1f       	adc	r19, r19
    5fee:	82 0f       	add	r24, r18
    5ff0:	93 1f       	adc	r25, r19
    5ff2:	84 0f       	add	r24, r20
    5ff4:	95 1f       	adc	r25, r21
    5ff6:	fc 01       	movw	r30, r24
    5ff8:	e0 55       	subi	r30, 0x50	; 80
    5ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    5ffc:	60 81       	ld	r22, Z
    5ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    6000:	48 2f       	mov	r20, r24
    6002:	50 e0       	ldi	r21, 0x00	; 0
    6004:	ca 01       	movw	r24, r20
    6006:	88 0f       	add	r24, r24
    6008:	99 1f       	adc	r25, r25
    600a:	9c 01       	movw	r18, r24
    600c:	22 0f       	add	r18, r18
    600e:	33 1f       	adc	r19, r19
    6010:	22 0f       	add	r18, r18
    6012:	33 1f       	adc	r19, r19
    6014:	22 0f       	add	r18, r18
    6016:	33 1f       	adc	r19, r19
    6018:	82 0f       	add	r24, r18
    601a:	93 1f       	adc	r25, r19
    601c:	84 0f       	add	r24, r20
    601e:	95 1f       	adc	r25, r21
    6020:	fc 01       	movw	r30, r24
    6022:	ef 54       	subi	r30, 0x4F	; 79
    6024:	fe 4f       	sbci	r31, 0xFE	; 254
    6026:	90 81       	ld	r25, Z
    6028:	86 2f       	mov	r24, r22
    602a:	69 2f       	mov	r22, r25
    602c:	40 e0       	ldi	r20, 0x00	; 0
    602e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    6032:	81 e0       	ldi	r24, 0x01	; 1
    6034:	89 83       	std	Y+1, r24	; 0x01
    6036:	69 c1       	rjmp	.+722    	; 0x630a <Seven_Segment_enuClearDisplay+0x5b0>

		}
		else if (SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    6038:	8a 81       	ldd	r24, Y+2	; 0x02
    603a:	48 2f       	mov	r20, r24
    603c:	50 e0       	ldi	r21, 0x00	; 0
    603e:	ca 01       	movw	r24, r20
    6040:	88 0f       	add	r24, r24
    6042:	99 1f       	adc	r25, r25
    6044:	9c 01       	movw	r18, r24
    6046:	22 0f       	add	r18, r18
    6048:	33 1f       	adc	r19, r19
    604a:	22 0f       	add	r18, r18
    604c:	33 1f       	adc	r19, r19
    604e:	22 0f       	add	r18, r18
    6050:	33 1f       	adc	r19, r19
    6052:	82 0f       	add	r24, r18
    6054:	93 1f       	adc	r25, r19
    6056:	84 0f       	add	r24, r20
    6058:	95 1f       	adc	r25, r21
    605a:	fc 01       	movw	r30, r24
    605c:	ea 54       	subi	r30, 0x4A	; 74
    605e:	fe 4f       	sbci	r31, 0xFE	; 254
    6060:	80 81       	ld	r24, Z
    6062:	82 30       	cpi	r24, 0x02	; 2
    6064:	09 f0       	breq	.+2      	; 0x6068 <Seven_Segment_enuClearDisplay+0x30e>
    6066:	4c c1       	rjmp	.+664    	; 0x6300 <Seven_Segment_enuClearDisplay+0x5a6>
		{
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8APin , DIO_u8HIGH);
    6068:	8a 81       	ldd	r24, Y+2	; 0x02
    606a:	48 2f       	mov	r20, r24
    606c:	50 e0       	ldi	r21, 0x00	; 0
    606e:	ca 01       	movw	r24, r20
    6070:	88 0f       	add	r24, r24
    6072:	99 1f       	adc	r25, r25
    6074:	9c 01       	movw	r18, r24
    6076:	22 0f       	add	r18, r18
    6078:	33 1f       	adc	r19, r19
    607a:	22 0f       	add	r18, r18
    607c:	33 1f       	adc	r19, r19
    607e:	22 0f       	add	r18, r18
    6080:	33 1f       	adc	r19, r19
    6082:	82 0f       	add	r24, r18
    6084:	93 1f       	adc	r25, r19
    6086:	84 0f       	add	r24, r20
    6088:	95 1f       	adc	r25, r21
    608a:	fc 01       	movw	r30, r24
    608c:	ec 55       	subi	r30, 0x5C	; 92
    608e:	fe 4f       	sbci	r31, 0xFE	; 254
    6090:	60 81       	ld	r22, Z
    6092:	8a 81       	ldd	r24, Y+2	; 0x02
    6094:	48 2f       	mov	r20, r24
    6096:	50 e0       	ldi	r21, 0x00	; 0
    6098:	ca 01       	movw	r24, r20
    609a:	88 0f       	add	r24, r24
    609c:	99 1f       	adc	r25, r25
    609e:	9c 01       	movw	r18, r24
    60a0:	22 0f       	add	r18, r18
    60a2:	33 1f       	adc	r19, r19
    60a4:	22 0f       	add	r18, r18
    60a6:	33 1f       	adc	r19, r19
    60a8:	22 0f       	add	r18, r18
    60aa:	33 1f       	adc	r19, r19
    60ac:	82 0f       	add	r24, r18
    60ae:	93 1f       	adc	r25, r19
    60b0:	84 0f       	add	r24, r20
    60b2:	95 1f       	adc	r25, r21
    60b4:	fc 01       	movw	r30, r24
    60b6:	eb 55       	subi	r30, 0x5B	; 91
    60b8:	fe 4f       	sbci	r31, 0xFE	; 254
    60ba:	90 81       	ld	r25, Z
    60bc:	86 2f       	mov	r24, r22
    60be:	69 2f       	mov	r22, r25
    60c0:	41 e0       	ldi	r20, 0x01	; 1
    60c2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8BPin , DIO_u8HIGH);
    60c6:	8a 81       	ldd	r24, Y+2	; 0x02
    60c8:	48 2f       	mov	r20, r24
    60ca:	50 e0       	ldi	r21, 0x00	; 0
    60cc:	ca 01       	movw	r24, r20
    60ce:	88 0f       	add	r24, r24
    60d0:	99 1f       	adc	r25, r25
    60d2:	9c 01       	movw	r18, r24
    60d4:	22 0f       	add	r18, r18
    60d6:	33 1f       	adc	r19, r19
    60d8:	22 0f       	add	r18, r18
    60da:	33 1f       	adc	r19, r19
    60dc:	22 0f       	add	r18, r18
    60de:	33 1f       	adc	r19, r19
    60e0:	82 0f       	add	r24, r18
    60e2:	93 1f       	adc	r25, r19
    60e4:	84 0f       	add	r24, r20
    60e6:	95 1f       	adc	r25, r21
    60e8:	fc 01       	movw	r30, r24
    60ea:	ea 55       	subi	r30, 0x5A	; 90
    60ec:	fe 4f       	sbci	r31, 0xFE	; 254
    60ee:	60 81       	ld	r22, Z
    60f0:	8a 81       	ldd	r24, Y+2	; 0x02
    60f2:	48 2f       	mov	r20, r24
    60f4:	50 e0       	ldi	r21, 0x00	; 0
    60f6:	ca 01       	movw	r24, r20
    60f8:	88 0f       	add	r24, r24
    60fa:	99 1f       	adc	r25, r25
    60fc:	9c 01       	movw	r18, r24
    60fe:	22 0f       	add	r18, r18
    6100:	33 1f       	adc	r19, r19
    6102:	22 0f       	add	r18, r18
    6104:	33 1f       	adc	r19, r19
    6106:	22 0f       	add	r18, r18
    6108:	33 1f       	adc	r19, r19
    610a:	82 0f       	add	r24, r18
    610c:	93 1f       	adc	r25, r19
    610e:	84 0f       	add	r24, r20
    6110:	95 1f       	adc	r25, r21
    6112:	fc 01       	movw	r30, r24
    6114:	e9 55       	subi	r30, 0x59	; 89
    6116:	fe 4f       	sbci	r31, 0xFE	; 254
    6118:	90 81       	ld	r25, Z
    611a:	86 2f       	mov	r24, r22
    611c:	69 2f       	mov	r22, r25
    611e:	41 e0       	ldi	r20, 0x01	; 1
    6120:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8CPin , DIO_u8HIGH);
    6124:	8a 81       	ldd	r24, Y+2	; 0x02
    6126:	48 2f       	mov	r20, r24
    6128:	50 e0       	ldi	r21, 0x00	; 0
    612a:	ca 01       	movw	r24, r20
    612c:	88 0f       	add	r24, r24
    612e:	99 1f       	adc	r25, r25
    6130:	9c 01       	movw	r18, r24
    6132:	22 0f       	add	r18, r18
    6134:	33 1f       	adc	r19, r19
    6136:	22 0f       	add	r18, r18
    6138:	33 1f       	adc	r19, r19
    613a:	22 0f       	add	r18, r18
    613c:	33 1f       	adc	r19, r19
    613e:	82 0f       	add	r24, r18
    6140:	93 1f       	adc	r25, r19
    6142:	84 0f       	add	r24, r20
    6144:	95 1f       	adc	r25, r21
    6146:	fc 01       	movw	r30, r24
    6148:	e8 55       	subi	r30, 0x58	; 88
    614a:	fe 4f       	sbci	r31, 0xFE	; 254
    614c:	60 81       	ld	r22, Z
    614e:	8a 81       	ldd	r24, Y+2	; 0x02
    6150:	48 2f       	mov	r20, r24
    6152:	50 e0       	ldi	r21, 0x00	; 0
    6154:	ca 01       	movw	r24, r20
    6156:	88 0f       	add	r24, r24
    6158:	99 1f       	adc	r25, r25
    615a:	9c 01       	movw	r18, r24
    615c:	22 0f       	add	r18, r18
    615e:	33 1f       	adc	r19, r19
    6160:	22 0f       	add	r18, r18
    6162:	33 1f       	adc	r19, r19
    6164:	22 0f       	add	r18, r18
    6166:	33 1f       	adc	r19, r19
    6168:	82 0f       	add	r24, r18
    616a:	93 1f       	adc	r25, r19
    616c:	84 0f       	add	r24, r20
    616e:	95 1f       	adc	r25, r21
    6170:	fc 01       	movw	r30, r24
    6172:	e7 55       	subi	r30, 0x57	; 87
    6174:	fe 4f       	sbci	r31, 0xFE	; 254
    6176:	90 81       	ld	r25, Z
    6178:	86 2f       	mov	r24, r22
    617a:	69 2f       	mov	r22, r25
    617c:	41 e0       	ldi	r20, 0x01	; 1
    617e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8DPin , DIO_u8HIGH);
    6182:	8a 81       	ldd	r24, Y+2	; 0x02
    6184:	48 2f       	mov	r20, r24
    6186:	50 e0       	ldi	r21, 0x00	; 0
    6188:	ca 01       	movw	r24, r20
    618a:	88 0f       	add	r24, r24
    618c:	99 1f       	adc	r25, r25
    618e:	9c 01       	movw	r18, r24
    6190:	22 0f       	add	r18, r18
    6192:	33 1f       	adc	r19, r19
    6194:	22 0f       	add	r18, r18
    6196:	33 1f       	adc	r19, r19
    6198:	22 0f       	add	r18, r18
    619a:	33 1f       	adc	r19, r19
    619c:	82 0f       	add	r24, r18
    619e:	93 1f       	adc	r25, r19
    61a0:	84 0f       	add	r24, r20
    61a2:	95 1f       	adc	r25, r21
    61a4:	fc 01       	movw	r30, r24
    61a6:	e6 55       	subi	r30, 0x56	; 86
    61a8:	fe 4f       	sbci	r31, 0xFE	; 254
    61aa:	60 81       	ld	r22, Z
    61ac:	8a 81       	ldd	r24, Y+2	; 0x02
    61ae:	48 2f       	mov	r20, r24
    61b0:	50 e0       	ldi	r21, 0x00	; 0
    61b2:	ca 01       	movw	r24, r20
    61b4:	88 0f       	add	r24, r24
    61b6:	99 1f       	adc	r25, r25
    61b8:	9c 01       	movw	r18, r24
    61ba:	22 0f       	add	r18, r18
    61bc:	33 1f       	adc	r19, r19
    61be:	22 0f       	add	r18, r18
    61c0:	33 1f       	adc	r19, r19
    61c2:	22 0f       	add	r18, r18
    61c4:	33 1f       	adc	r19, r19
    61c6:	82 0f       	add	r24, r18
    61c8:	93 1f       	adc	r25, r19
    61ca:	84 0f       	add	r24, r20
    61cc:	95 1f       	adc	r25, r21
    61ce:	fc 01       	movw	r30, r24
    61d0:	e5 55       	subi	r30, 0x55	; 85
    61d2:	fe 4f       	sbci	r31, 0xFE	; 254
    61d4:	90 81       	ld	r25, Z
    61d6:	86 2f       	mov	r24, r22
    61d8:	69 2f       	mov	r22, r25
    61da:	41 e0       	ldi	r20, 0x01	; 1
    61dc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8EPin , DIO_u8HIGH);
    61e0:	8a 81       	ldd	r24, Y+2	; 0x02
    61e2:	48 2f       	mov	r20, r24
    61e4:	50 e0       	ldi	r21, 0x00	; 0
    61e6:	ca 01       	movw	r24, r20
    61e8:	88 0f       	add	r24, r24
    61ea:	99 1f       	adc	r25, r25
    61ec:	9c 01       	movw	r18, r24
    61ee:	22 0f       	add	r18, r18
    61f0:	33 1f       	adc	r19, r19
    61f2:	22 0f       	add	r18, r18
    61f4:	33 1f       	adc	r19, r19
    61f6:	22 0f       	add	r18, r18
    61f8:	33 1f       	adc	r19, r19
    61fa:	82 0f       	add	r24, r18
    61fc:	93 1f       	adc	r25, r19
    61fe:	84 0f       	add	r24, r20
    6200:	95 1f       	adc	r25, r21
    6202:	fc 01       	movw	r30, r24
    6204:	e4 55       	subi	r30, 0x54	; 84
    6206:	fe 4f       	sbci	r31, 0xFE	; 254
    6208:	60 81       	ld	r22, Z
    620a:	8a 81       	ldd	r24, Y+2	; 0x02
    620c:	48 2f       	mov	r20, r24
    620e:	50 e0       	ldi	r21, 0x00	; 0
    6210:	ca 01       	movw	r24, r20
    6212:	88 0f       	add	r24, r24
    6214:	99 1f       	adc	r25, r25
    6216:	9c 01       	movw	r18, r24
    6218:	22 0f       	add	r18, r18
    621a:	33 1f       	adc	r19, r19
    621c:	22 0f       	add	r18, r18
    621e:	33 1f       	adc	r19, r19
    6220:	22 0f       	add	r18, r18
    6222:	33 1f       	adc	r19, r19
    6224:	82 0f       	add	r24, r18
    6226:	93 1f       	adc	r25, r19
    6228:	84 0f       	add	r24, r20
    622a:	95 1f       	adc	r25, r21
    622c:	fc 01       	movw	r30, r24
    622e:	e3 55       	subi	r30, 0x53	; 83
    6230:	fe 4f       	sbci	r31, 0xFE	; 254
    6232:	90 81       	ld	r25, Z
    6234:	86 2f       	mov	r24, r22
    6236:	69 2f       	mov	r22, r25
    6238:	41 e0       	ldi	r20, 0x01	; 1
    623a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8FPin , DIO_u8HIGH);
    623e:	8a 81       	ldd	r24, Y+2	; 0x02
    6240:	48 2f       	mov	r20, r24
    6242:	50 e0       	ldi	r21, 0x00	; 0
    6244:	ca 01       	movw	r24, r20
    6246:	88 0f       	add	r24, r24
    6248:	99 1f       	adc	r25, r25
    624a:	9c 01       	movw	r18, r24
    624c:	22 0f       	add	r18, r18
    624e:	33 1f       	adc	r19, r19
    6250:	22 0f       	add	r18, r18
    6252:	33 1f       	adc	r19, r19
    6254:	22 0f       	add	r18, r18
    6256:	33 1f       	adc	r19, r19
    6258:	82 0f       	add	r24, r18
    625a:	93 1f       	adc	r25, r19
    625c:	84 0f       	add	r24, r20
    625e:	95 1f       	adc	r25, r21
    6260:	fc 01       	movw	r30, r24
    6262:	e2 55       	subi	r30, 0x52	; 82
    6264:	fe 4f       	sbci	r31, 0xFE	; 254
    6266:	60 81       	ld	r22, Z
    6268:	8a 81       	ldd	r24, Y+2	; 0x02
    626a:	48 2f       	mov	r20, r24
    626c:	50 e0       	ldi	r21, 0x00	; 0
    626e:	ca 01       	movw	r24, r20
    6270:	88 0f       	add	r24, r24
    6272:	99 1f       	adc	r25, r25
    6274:	9c 01       	movw	r18, r24
    6276:	22 0f       	add	r18, r18
    6278:	33 1f       	adc	r19, r19
    627a:	22 0f       	add	r18, r18
    627c:	33 1f       	adc	r19, r19
    627e:	22 0f       	add	r18, r18
    6280:	33 1f       	adc	r19, r19
    6282:	82 0f       	add	r24, r18
    6284:	93 1f       	adc	r25, r19
    6286:	84 0f       	add	r24, r20
    6288:	95 1f       	adc	r25, r21
    628a:	fc 01       	movw	r30, r24
    628c:	e1 55       	subi	r30, 0x51	; 81
    628e:	fe 4f       	sbci	r31, 0xFE	; 254
    6290:	90 81       	ld	r25, Z
    6292:	86 2f       	mov	r24, r22
    6294:	69 2f       	mov	r22, r25
    6296:	41 e0       	ldi	r20, 0x01	; 1
    6298:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPort ,SEVSEG_AstrSegConfig[Copy_u8SegID].SEG_u8GPin , DIO_u8HIGH);
    629c:	8a 81       	ldd	r24, Y+2	; 0x02
    629e:	48 2f       	mov	r20, r24
    62a0:	50 e0       	ldi	r21, 0x00	; 0
    62a2:	ca 01       	movw	r24, r20
    62a4:	88 0f       	add	r24, r24
    62a6:	99 1f       	adc	r25, r25
    62a8:	9c 01       	movw	r18, r24
    62aa:	22 0f       	add	r18, r18
    62ac:	33 1f       	adc	r19, r19
    62ae:	22 0f       	add	r18, r18
    62b0:	33 1f       	adc	r19, r19
    62b2:	22 0f       	add	r18, r18
    62b4:	33 1f       	adc	r19, r19
    62b6:	82 0f       	add	r24, r18
    62b8:	93 1f       	adc	r25, r19
    62ba:	84 0f       	add	r24, r20
    62bc:	95 1f       	adc	r25, r21
    62be:	fc 01       	movw	r30, r24
    62c0:	e0 55       	subi	r30, 0x50	; 80
    62c2:	fe 4f       	sbci	r31, 0xFE	; 254
    62c4:	60 81       	ld	r22, Z
    62c6:	8a 81       	ldd	r24, Y+2	; 0x02
    62c8:	48 2f       	mov	r20, r24
    62ca:	50 e0       	ldi	r21, 0x00	; 0
    62cc:	ca 01       	movw	r24, r20
    62ce:	88 0f       	add	r24, r24
    62d0:	99 1f       	adc	r25, r25
    62d2:	9c 01       	movw	r18, r24
    62d4:	22 0f       	add	r18, r18
    62d6:	33 1f       	adc	r19, r19
    62d8:	22 0f       	add	r18, r18
    62da:	33 1f       	adc	r19, r19
    62dc:	22 0f       	add	r18, r18
    62de:	33 1f       	adc	r19, r19
    62e0:	82 0f       	add	r24, r18
    62e2:	93 1f       	adc	r25, r19
    62e4:	84 0f       	add	r24, r20
    62e6:	95 1f       	adc	r25, r21
    62e8:	fc 01       	movw	r30, r24
    62ea:	ef 54       	subi	r30, 0x4F	; 79
    62ec:	fe 4f       	sbci	r31, 0xFE	; 254
    62ee:	90 81       	ld	r25, Z
    62f0:	86 2f       	mov	r24, r22
    62f2:	69 2f       	mov	r22, r25
    62f4:	41 e0       	ldi	r20, 0x01	; 1
    62f6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_enuSetPinValue>
			Local_enuErrorState = ES_OK;
    62fa:	81 e0       	ldi	r24, 0x01	; 1
    62fc:	89 83       	std	Y+1, r24	; 0x01
    62fe:	05 c0       	rjmp	.+10     	; 0x630a <Seven_Segment_enuClearDisplay+0x5b0>
		}
		else
		{
			Local_enuErrorState = ES_7SEG_ERROR;
    6300:	84 e0       	ldi	r24, 0x04	; 4
    6302:	89 83       	std	Y+1, r24	; 0x01
    6304:	02 c0       	rjmp	.+4      	; 0x630a <Seven_Segment_enuClearDisplay+0x5b0>
		}
	}
	else
	{
		Local_enuErrorState =ES_OUTOFRANGE;
    6306:	83 e0       	ldi	r24, 0x03	; 3
    6308:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    630a:	89 81       	ldd	r24, Y+1	; 0x01

}
    630c:	0f 90       	pop	r0
    630e:	0f 90       	pop	r0
    6310:	cf 91       	pop	r28
    6312:	df 91       	pop	r29
    6314:	08 95       	ret

00006316 <read>:
#include <util/delay.h>

extern EXTI_T EXTI_AstrEXTIconfig [3];

void read(void *p)
{
    6316:	df 93       	push	r29
    6318:	cf 93       	push	r28
    631a:	00 d0       	rcall	.+0      	; 0x631c <read+0x6>
    631c:	cd b7       	in	r28, 0x3d	; 61
    631e:	de b7       	in	r29, 0x3e	; 62
    6320:	9a 83       	std	Y+2, r25	; 0x02
    6322:	89 83       	std	Y+1, r24	; 0x01
	ADC_enuRead((u16*)p);
    6324:	89 81       	ldd	r24, Y+1	; 0x01
    6326:	9a 81       	ldd	r25, Y+2	; 0x02
    6328:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <ADC_enuRead>
}
    632c:	0f 90       	pop	r0
    632e:	0f 90       	pop	r0
    6330:	cf 91       	pop	r28
    6332:	df 91       	pop	r29
    6334:	08 95       	ret

00006336 <main>:
int main(void)
{
    6336:	df 93       	push	r29
    6338:	cf 93       	push	r28
    633a:	00 d0       	rcall	.+0      	; 0x633c <main+0x6>
    633c:	cd b7       	in	r28, 0x3d	; 61
    633e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16ADCread = 0;
    6340:	1a 82       	std	Y+2, r1	; 0x02
    6342:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuInit();
    6344:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_enuInit>
	DIO_enuSetPortDirection(DIO_u8PORTC,0xff);
    6348:	82 e0       	ldi	r24, 0x02	; 2
    634a:	6f ef       	ldi	r22, 0xFF	; 255
    634c:	0e 94 0e 0c 	call	0x181c	; 0x181c <DIO_enuSetPortDirection>
	DIO_enuSetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8INPUT);
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	60 e0       	ldi	r22, 0x00	; 0
    6354:	40 e0       	ldi	r20, 0x00	; 0
    6356:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8INPUT);
    635a:	83 e0       	ldi	r24, 0x03	; 3
    635c:	62 e0       	ldi	r22, 0x02	; 2
    635e:	40 e0       	ldi	r20, 0x00	; 0
    6360:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <DIO_enuSetPinDirection>

	EXTI_enuInit(EXTI_AstrEXTIconfig);
    6364:	88 e6       	ldi	r24, 0x68	; 104
    6366:	91 e0       	ldi	r25, 0x01	; 1
    6368:	0e 94 57 08 	call	0x10ae	; 0x10ae <EXTI_enuInit>
	EXTI_enuSetSenceControl(INT_0,FALLING_EDGE);
    636c:	80 e0       	ldi	r24, 0x00	; 0
    636e:	63 e0       	ldi	r22, 0x03	; 3
    6370:	0e 94 9a 09 	call	0x1334	; 0x1334 <EXTI_enuSetSenceControl>
	EXTI_enuEnableINT(INT_0);
    6374:	80 e0       	ldi	r24, 0x00	; 0
    6376:	0e 94 8d 0a 	call	0x151a	; 0x151a <EXTI_enuEnableINT>

	ADC_enuInit();
    637a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <ADC_enuInit>
	ADC_enuSelectChannel(ADC_0);
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <ADC_enuSelectChannel>
	ADC_enuEnableTriggeringMode(ADC_u8EXT0_INTERRUPT);
    6384:	82 e0       	ldi	r24, 0x02	; 2
    6386:	0e 94 25 12 	call	0x244a	; 0x244a <ADC_enuEnableTriggeringMode>
	ADC_enuEnableInterruptMode();
    638a:	0e 94 4f 13 	call	0x269e	; 0x269e <ADC_enuEnableInterruptMode>

	//u8 Local_u8ADCread = 0;
	ADC_enuCallBack(read,&Local_u16ADCread);
    638e:	8b e8       	ldi	r24, 0x8B	; 139
    6390:	91 e3       	ldi	r25, 0x31	; 49
    6392:	9e 01       	movw	r18, r28
    6394:	2f 5f       	subi	r18, 0xFF	; 255
    6396:	3f 4f       	sbci	r19, 0xFF	; 255
    6398:	b9 01       	movw	r22, r18
    639a:	0e 94 1c 11 	call	0x2238	; 0x2238 <ADC_enuCallBack>
	ADC_enuStartConversion();
    639e:	0e 94 9e 10 	call	0x213c	; 0x213c <ADC_enuStartConversion>

	GIE_enuEnable();
    63a2:	0e 94 3b 08 	call	0x1076	; 0x1076 <GIE_enuEnable>
	while(1)
	{
		DIO_enuSetPortValue(DIO_u8PORTC,Local_u16ADCread);
    63a6:	89 81       	ldd	r24, Y+1	; 0x01
    63a8:	9a 81       	ldd	r25, Y+2	; 0x02
    63aa:	98 2f       	mov	r25, r24
    63ac:	82 e0       	ldi	r24, 0x02	; 2
    63ae:	69 2f       	mov	r22, r25
    63b0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <DIO_enuSetPortValue>
    63b4:	f8 cf       	rjmp	.-16     	; 0x63a6 <main+0x70>

000063b6 <__udivmodhi4>:
    63b6:	aa 1b       	sub	r26, r26
    63b8:	bb 1b       	sub	r27, r27
    63ba:	51 e1       	ldi	r21, 0x11	; 17
    63bc:	07 c0       	rjmp	.+14     	; 0x63cc <__udivmodhi4_ep>

000063be <__udivmodhi4_loop>:
    63be:	aa 1f       	adc	r26, r26
    63c0:	bb 1f       	adc	r27, r27
    63c2:	a6 17       	cp	r26, r22
    63c4:	b7 07       	cpc	r27, r23
    63c6:	10 f0       	brcs	.+4      	; 0x63cc <__udivmodhi4_ep>
    63c8:	a6 1b       	sub	r26, r22
    63ca:	b7 0b       	sbc	r27, r23

000063cc <__udivmodhi4_ep>:
    63cc:	88 1f       	adc	r24, r24
    63ce:	99 1f       	adc	r25, r25
    63d0:	5a 95       	dec	r21
    63d2:	a9 f7       	brne	.-22     	; 0x63be <__udivmodhi4_loop>
    63d4:	80 95       	com	r24
    63d6:	90 95       	com	r25
    63d8:	bc 01       	movw	r22, r24
    63da:	cd 01       	movw	r24, r26
    63dc:	08 95       	ret

000063de <__divmodhi4>:
    63de:	97 fb       	bst	r25, 7
    63e0:	09 2e       	mov	r0, r25
    63e2:	07 26       	eor	r0, r23
    63e4:	0a d0       	rcall	.+20     	; 0x63fa <__divmodhi4_neg1>
    63e6:	77 fd       	sbrc	r23, 7
    63e8:	04 d0       	rcall	.+8      	; 0x63f2 <__divmodhi4_neg2>
    63ea:	e5 df       	rcall	.-54     	; 0x63b6 <__udivmodhi4>
    63ec:	06 d0       	rcall	.+12     	; 0x63fa <__divmodhi4_neg1>
    63ee:	00 20       	and	r0, r0
    63f0:	1a f4       	brpl	.+6      	; 0x63f8 <__divmodhi4_exit>

000063f2 <__divmodhi4_neg2>:
    63f2:	70 95       	com	r23
    63f4:	61 95       	neg	r22
    63f6:	7f 4f       	sbci	r23, 0xFF	; 255

000063f8 <__divmodhi4_exit>:
    63f8:	08 95       	ret

000063fa <__divmodhi4_neg1>:
    63fa:	f6 f7       	brtc	.-4      	; 0x63f8 <__divmodhi4_exit>
    63fc:	90 95       	com	r25
    63fe:	81 95       	neg	r24
    6400:	9f 4f       	sbci	r25, 0xFF	; 255
    6402:	08 95       	ret

00006404 <__prologue_saves__>:
    6404:	2f 92       	push	r2
    6406:	3f 92       	push	r3
    6408:	4f 92       	push	r4
    640a:	5f 92       	push	r5
    640c:	6f 92       	push	r6
    640e:	7f 92       	push	r7
    6410:	8f 92       	push	r8
    6412:	9f 92       	push	r9
    6414:	af 92       	push	r10
    6416:	bf 92       	push	r11
    6418:	cf 92       	push	r12
    641a:	df 92       	push	r13
    641c:	ef 92       	push	r14
    641e:	ff 92       	push	r15
    6420:	0f 93       	push	r16
    6422:	1f 93       	push	r17
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	cd b7       	in	r28, 0x3d	; 61
    642a:	de b7       	in	r29, 0x3e	; 62
    642c:	ca 1b       	sub	r28, r26
    642e:	db 0b       	sbc	r29, r27
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	de bf       	out	0x3e, r29	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	cd bf       	out	0x3d, r28	; 61
    643a:	09 94       	ijmp

0000643c <__epilogue_restores__>:
    643c:	2a 88       	ldd	r2, Y+18	; 0x12
    643e:	39 88       	ldd	r3, Y+17	; 0x11
    6440:	48 88       	ldd	r4, Y+16	; 0x10
    6442:	5f 84       	ldd	r5, Y+15	; 0x0f
    6444:	6e 84       	ldd	r6, Y+14	; 0x0e
    6446:	7d 84       	ldd	r7, Y+13	; 0x0d
    6448:	8c 84       	ldd	r8, Y+12	; 0x0c
    644a:	9b 84       	ldd	r9, Y+11	; 0x0b
    644c:	aa 84       	ldd	r10, Y+10	; 0x0a
    644e:	b9 84       	ldd	r11, Y+9	; 0x09
    6450:	c8 84       	ldd	r12, Y+8	; 0x08
    6452:	df 80       	ldd	r13, Y+7	; 0x07
    6454:	ee 80       	ldd	r14, Y+6	; 0x06
    6456:	fd 80       	ldd	r15, Y+5	; 0x05
    6458:	0c 81       	ldd	r16, Y+4	; 0x04
    645a:	1b 81       	ldd	r17, Y+3	; 0x03
    645c:	aa 81       	ldd	r26, Y+2	; 0x02
    645e:	b9 81       	ldd	r27, Y+1	; 0x01
    6460:	ce 0f       	add	r28, r30
    6462:	d1 1d       	adc	r29, r1
    6464:	0f b6       	in	r0, 0x3f	; 63
    6466:	f8 94       	cli
    6468:	de bf       	out	0x3e, r29	; 62
    646a:	0f be       	out	0x3f, r0	; 63
    646c:	cd bf       	out	0x3d, r28	; 61
    646e:	ed 01       	movw	r28, r26
    6470:	08 95       	ret

00006472 <_exit>:
    6472:	f8 94       	cli

00006474 <__stop_program>:
    6474:	ff cf       	rjmp	.-2      	; 0x6474 <__stop_program>
