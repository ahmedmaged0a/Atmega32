
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000974  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000e10  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000bc0  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b3 04 	call	0x966	; 0x966 <main>
  64:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enuInit>:

#include "DIO_config.h"
#include "DIO_private.h"

ES_T DIO_enuInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
  76:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(DIO_U8PA_PIN7_DIR,DIO_U8PA_PIN6_DIR,DIO_U8PA_PIN5_DIR,DIO_U8PA_PIN4_DIR,DIO_U8PA_PIN3_DIR,DIO_U8PA_PIN2_DIR,DIO_U8PA_PIN1_DIR,DIO_U8PA_PIN0_DIR);
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	80 83       	st	Z, r24
	DDRB = CONC(DIO_U8PB_PIN7_DIR,DIO_U8PB_PIN6_DIR,DIO_U8PB_PIN5_DIR,DIO_U8PB_PIN4_DIR,DIO_U8PB_PIN3_DIR,DIO_U8PB_PIN2_DIR,DIO_U8PB_PIN1_DIR,DIO_U8PB_PIN0_DIR);
  80:	e7 e3       	ldi	r30, 0x37	; 55
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	80 83       	st	Z, r24
	DDRC = CONC(DIO_U8PC_PIN7_DIR,DIO_U8PC_PIN6_DIR,DIO_U8PC_PIN5_DIR,DIO_U8PC_PIN4_DIR,DIO_U8PC_PIN3_DIR,DIO_U8PC_PIN2_DIR,DIO_U8PC_PIN1_DIR,DIO_U8PC_PIN0_DIR);
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	80 83       	st	Z, r24
	DDRD = CONC(DIO_U8PD_PIN7_DIR,DIO_U8PD_PIN6_DIR,DIO_U8PD_PIN5_DIR,DIO_U8PD_PIN4_DIR,DIO_U8PD_PIN3_DIR,DIO_U8PD_PIN2_DIR,DIO_U8PD_PIN1_DIR,DIO_U8PD_PIN0_DIR);
  90:	e1 e3       	ldi	r30, 0x31	; 49
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 83       	st	Z, r24

	PORTA = CONC(DIO_U8PA_PIN7_VAL,DIO_U8PA_PIN6_VAL,DIO_U8PA_PIN5_VAL,DIO_U8PA_PIN4_VAL,DIO_U8PA_PIN3_VAL,DIO_U8PA_PIN2_VAL,DIO_U8PA_PIN1_VAL,DIO_U8PA_PIN0_VAL);
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	PORTB = CONC(DIO_U8PB_PIN7_VAL,DIO_U8PB_PIN6_VAL,DIO_U8PB_PIN5_VAL,DIO_U8PB_PIN4_VAL,DIO_U8PB_PIN3_VAL,DIO_U8PB_PIN2_VAL,DIO_U8PB_PIN1_VAL,DIO_U8PB_PIN0_VAL);
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	PORTC = CONC(DIO_U8PC_PIN7_VAL,DIO_U8PC_PIN6_VAL,DIO_U8PC_PIN5_VAL,DIO_U8PC_PIN4_VAL,DIO_U8PC_PIN3_VAL,DIO_U8PC_PIN2_VAL,DIO_U8PC_PIN1_VAL,DIO_U8PC_PIN0_VAL);
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
	PORTD = CONC(DIO_U8PD_PIN7_VAL,DIO_U8PD_PIN6_VAL,DIO_U8PD_PIN5_VAL,DIO_U8PD_PIN4_VAL,DIO_U8PD_PIN3_VAL,DIO_U8PD_PIN2_VAL,DIO_U8PD_PIN1_VAL,DIO_U8PD_PIN0_VAL);
  aa:	e2 e3       	ldi	r30, 0x32	; 50
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
}
  b6:	0f 90       	pop	r0
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_enuSetPortDirection>:
ES_T DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_enuSetPortDirection+0x6>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_enuSetPortDirection+0x8>
  c6:	0f 92       	push	r0
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	8a 83       	std	Y+2, r24	; 0x02
  ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
  d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	a8 f5       	brcc	.+106    	; 0x142 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	3d 83       	std	Y+5, r19	; 0x05
  e0:	2c 83       	std	Y+4, r18	; 0x04
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	9d 81       	ldd	r25, Y+5	; 0x05
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	d1 f0       	breq	.+52     	; 0x120 <DIO_enuSetPortDirection+0x62>
  ec:	2c 81       	ldd	r18, Y+4	; 0x04
  ee:	3d 81       	ldd	r19, Y+5	; 0x05
  f0:	22 30       	cpi	r18, 0x02	; 2
  f2:	31 05       	cpc	r19, r1
  f4:	2c f4       	brge	.+10     	; 0x100 <DIO_enuSetPortDirection+0x42>
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	9d 81       	ldd	r25, Y+5	; 0x05
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	61 f0       	breq	.+24     	; 0x116 <DIO_enuSetPortDirection+0x58>
  fe:	1e c0       	rjmp	.+60     	; 0x13c <DIO_enuSetPortDirection+0x7e>
 100:	2c 81       	ldd	r18, Y+4	; 0x04
 102:	3d 81       	ldd	r19, Y+5	; 0x05
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	81 f0       	breq	.+32     	; 0x12a <DIO_enuSetPortDirection+0x6c>
 10a:	8c 81       	ldd	r24, Y+4	; 0x04
 10c:	9d 81       	ldd	r25, Y+5	; 0x05
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	91 05       	cpc	r25, r1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_enuSetPortDirection+0x76>
 114:	13 c0       	rjmp	.+38     	; 0x13c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_U8PORTA:
			DDRA = Copy_u8Value;
 116:	ea e3       	ldi	r30, 0x3A	; 58
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	80 83       	st	Z, r24
 11e:	0e c0       	rjmp	.+28     	; 0x13c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTB:
			DDRB = Copy_u8Value;
 120:	e7 e3       	ldi	r30, 0x37	; 55
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	80 83       	st	Z, r24
 128:	09 c0       	rjmp	.+18     	; 0x13c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTC:
			DDRC = Copy_u8Value;
 12a:	e4 e3       	ldi	r30, 0x34	; 52
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	80 83       	st	Z, r24
 132:	04 c0       	rjmp	.+8      	; 0x13c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_U8PORTD:
			DDRD = Copy_u8Value;
 134:	e1 e3       	ldi	r30, 0x31	; 49
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	89 83       	std	Y+1, r24	; 0x01
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 146:	89 81       	ldd	r24, Y+1	; 0x01
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <DIO_enuSetPortValue>:

ES_T DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <DIO_enuSetPortValue+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <DIO_enuSetPortValue+0x8>
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
 16a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	a8 f5       	brcc	.+106    	; 0x1dc <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	3d 83       	std	Y+5, r19	; 0x05
 17a:	2c 83       	std	Y+4, r18	; 0x04
 17c:	8c 81       	ldd	r24, Y+4	; 0x04
 17e:	9d 81       	ldd	r25, Y+5	; 0x05
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	d1 f0       	breq	.+52     	; 0x1ba <DIO_enuSetPortValue+0x62>
 186:	2c 81       	ldd	r18, Y+4	; 0x04
 188:	3d 81       	ldd	r19, Y+5	; 0x05
 18a:	22 30       	cpi	r18, 0x02	; 2
 18c:	31 05       	cpc	r19, r1
 18e:	2c f4       	brge	.+10     	; 0x19a <DIO_enuSetPortValue+0x42>
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	9d 81       	ldd	r25, Y+5	; 0x05
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	61 f0       	breq	.+24     	; 0x1b0 <DIO_enuSetPortValue+0x58>
 198:	1e c0       	rjmp	.+60     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
 19a:	2c 81       	ldd	r18, Y+4	; 0x04
 19c:	3d 81       	ldd	r19, Y+5	; 0x05
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	81 f0       	breq	.+32     	; 0x1c4 <DIO_enuSetPortValue+0x6c>
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	91 05       	cpc	r25, r1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <DIO_enuSetPortValue+0x76>
 1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_U8PORTA:
			PORTA = Copy_u8Value;
 1b0:	eb e3       	ldi	r30, 0x3B	; 59
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	80 83       	st	Z, r24
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTB:
			PORTB = Copy_u8Value;
 1ba:	e8 e3       	ldi	r30, 0x38	; 56
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	80 83       	st	Z, r24
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTC:
			PORTC = Copy_u8Value;
 1c4:	e5 e3       	ldi	r30, 0x35	; 53
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	80 83       	st	Z, r24
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_U8PORTD:
			PORTD = Copy_u8Value;
 1ce:	e2 e3       	ldi	r30, 0x32	; 50
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <DIO_enuTogglePortValue>:

ES_T DIO_enuTogglePortValue(u8 Copy_u8PortID)
{
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <DIO_enuTogglePortValue+0x6>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <DIO_enuTogglePortValue+0x8>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
 200:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD)
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	08 f0       	brcs	.+2      	; 0x20a <DIO_enuTogglePortValue+0x18>
 208:	41 c0       	rjmp	.+130    	; 0x28c <DIO_enuTogglePortValue+0x9a>
	{
		switch(Copy_u8PortID)
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	3c 83       	std	Y+4, r19	; 0x04
 212:	2b 83       	std	Y+3, r18	; 0x03
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	91 05       	cpc	r25, r1
 21c:	e9 f0       	breq	.+58     	; 0x258 <DIO_enuTogglePortValue+0x66>
 21e:	2b 81       	ldd	r18, Y+3	; 0x03
 220:	3c 81       	ldd	r19, Y+4	; 0x04
 222:	22 30       	cpi	r18, 0x02	; 2
 224:	31 05       	cpc	r19, r1
 226:	2c f4       	brge	.+10     	; 0x232 <DIO_enuTogglePortValue+0x40>
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	9c 81       	ldd	r25, Y+4	; 0x04
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	61 f0       	breq	.+24     	; 0x248 <DIO_enuTogglePortValue+0x56>
 230:	2a c0       	rjmp	.+84     	; 0x286 <DIO_enuTogglePortValue+0x94>
 232:	2b 81       	ldd	r18, Y+3	; 0x03
 234:	3c 81       	ldd	r19, Y+4	; 0x04
 236:	22 30       	cpi	r18, 0x02	; 2
 238:	31 05       	cpc	r19, r1
 23a:	b1 f0       	breq	.+44     	; 0x268 <DIO_enuTogglePortValue+0x76>
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	9c 81       	ldd	r25, Y+4	; 0x04
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	91 05       	cpc	r25, r1
 244:	c9 f0       	breq	.+50     	; 0x278 <DIO_enuTogglePortValue+0x86>
 246:	1f c0       	rjmp	.+62     	; 0x286 <DIO_enuTogglePortValue+0x94>
		{
		case DIO_U8PORTA:
			PORTA = ~PORTA;
 248:	ab e3       	ldi	r26, 0x3B	; 59
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	eb e3       	ldi	r30, 0x3B	; 59
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	80 95       	com	r24
 254:	8c 93       	st	X, r24
 256:	17 c0       	rjmp	.+46     	; 0x286 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTB:
			PORTB = ~PORTB;
 258:	a8 e3       	ldi	r26, 0x38	; 56
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	e8 e3       	ldi	r30, 0x38	; 56
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 95       	com	r24
 264:	8c 93       	st	X, r24
 266:	0f c0       	rjmp	.+30     	; 0x286 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTC:
			PORTC = ~PORTC;
 268:	a5 e3       	ldi	r26, 0x35	; 53
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e5 e3       	ldi	r30, 0x35	; 53
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 95       	com	r24
 274:	8c 93       	st	X, r24
 276:	07 c0       	rjmp	.+14     	; 0x286 <DIO_enuTogglePortValue+0x94>
			break;
		case DIO_U8PORTD:
			PORTD = ~PORTD;
 278:	a2 e3       	ldi	r26, 0x32	; 50
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e2 e3       	ldi	r30, 0x32	; 50
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 95       	com	r24
 284:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_enuTogglePortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 290:	89 81       	ldd	r24, Y+1	; 0x01
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_enuGetPortValue>:

ES_T DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_Pu8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_enuGetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_enuGetPortValue+0x8>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <DIO_enuGetPortValue+0xa>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	7c 83       	std	Y+4, r23	; 0x04
 2b2:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
 2b4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8Value != NULL)
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <DIO_enuGetPortValue+0x20>
 2be:	43 c0       	rjmp	.+134    	; 0x346 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_U8PORTD)
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	e8 f5       	brcc	.+122    	; 0x340 <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	3e 83       	std	Y+6, r19	; 0x06
 2ce:	2d 83       	std	Y+5, r18	; 0x05
 2d0:	8d 81       	ldd	r24, Y+5	; 0x05
 2d2:	9e 81       	ldd	r25, Y+6	; 0x06
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	91 05       	cpc	r25, r1
 2d8:	e1 f0       	breq	.+56     	; 0x312 <DIO_enuGetPortValue+0x72>
 2da:	2d 81       	ldd	r18, Y+5	; 0x05
 2dc:	3e 81       	ldd	r19, Y+6	; 0x06
 2de:	22 30       	cpi	r18, 0x02	; 2
 2e0:	31 05       	cpc	r19, r1
 2e2:	2c f4       	brge	.+10     	; 0x2ee <DIO_enuGetPortValue+0x4e>
 2e4:	8d 81       	ldd	r24, Y+5	; 0x05
 2e6:	9e 81       	ldd	r25, Y+6	; 0x06
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	61 f0       	breq	.+24     	; 0x304 <DIO_enuGetPortValue+0x64>
 2ec:	26 c0       	rjmp	.+76     	; 0x33a <DIO_enuGetPortValue+0x9a>
 2ee:	2d 81       	ldd	r18, Y+5	; 0x05
 2f0:	3e 81       	ldd	r19, Y+6	; 0x06
 2f2:	22 30       	cpi	r18, 0x02	; 2
 2f4:	31 05       	cpc	r19, r1
 2f6:	a1 f0       	breq	.+40     	; 0x320 <DIO_enuGetPortValue+0x80>
 2f8:	8d 81       	ldd	r24, Y+5	; 0x05
 2fa:	9e 81       	ldd	r25, Y+6	; 0x06
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	91 05       	cpc	r25, r1
 300:	b1 f0       	breq	.+44     	; 0x32e <DIO_enuGetPortValue+0x8e>
 302:	1b c0       	rjmp	.+54     	; 0x33a <DIO_enuGetPortValue+0x9a>
			{
			case DIO_U8PORTA:
				*Copy_Pu8Value = PINA;
 304:	e9 e3       	ldi	r30, 0x39	; 57
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	eb 81       	ldd	r30, Y+3	; 0x03
 30c:	fc 81       	ldd	r31, Y+4	; 0x04
 30e:	80 83       	st	Z, r24
 310:	14 c0       	rjmp	.+40     	; 0x33a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTB:
				*Copy_Pu8Value = PINB;
 312:	e6 e3       	ldi	r30, 0x36	; 54
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	eb 81       	ldd	r30, Y+3	; 0x03
 31a:	fc 81       	ldd	r31, Y+4	; 0x04
 31c:	80 83       	st	Z, r24
 31e:	0d c0       	rjmp	.+26     	; 0x33a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTC:
				*Copy_Pu8Value = PINC;
 320:	e3 e3       	ldi	r30, 0x33	; 51
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	eb 81       	ldd	r30, Y+3	; 0x03
 328:	fc 81       	ldd	r31, Y+4	; 0x04
 32a:	80 83       	st	Z, r24
 32c:	06 c0       	rjmp	.+12     	; 0x33a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_U8PORTD:
				*Copy_Pu8Value = PIND;
 32e:	e0 e3       	ldi	r30, 0x30	; 48
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	eb 81       	ldd	r30, Y+3	; 0x03
 336:	fc 81       	ldd	r31, Y+4	; 0x04
 338:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	89 83       	std	Y+1, r24	; 0x01
 33e:	05 c0       	rjmp	.+10     	; 0x34a <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 34a:	89 81       	ldd	r24, Y+1	; 0x01
}
 34c:	26 96       	adiw	r28, 0x06	; 6
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <DIO_enuSetPinDirection>:
ES_T DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	00 d0       	rcall	.+0      	; 0x364 <DIO_enuSetPinDirection+0x6>
 364:	00 d0       	rcall	.+0      	; 0x366 <DIO_enuSetPinDirection+0x8>
 366:	00 d0       	rcall	.+0      	; 0x368 <DIO_enuSetPinDirection+0xa>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	8a 83       	std	Y+2, r24	; 0x02
 36e:	6b 83       	std	Y+3, r22	; 0x03
 370:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
 372:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_U8PORTD &&
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	08 f0       	brcs	.+2      	; 0x37c <DIO_enuSetPinDirection+0x1e>
 37a:	d1 c0       	rjmp	.+418    	; 0x51e <DIO_enuSetPinDirection+0x1c0>
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	88 30       	cpi	r24, 0x08	; 8
 380:	08 f0       	brcs	.+2      	; 0x384 <DIO_enuSetPinDirection+0x26>
 382:	cd c0       	rjmp	.+410    	; 0x51e <DIO_enuSetPinDirection+0x1c0>
 384:	8c 81       	ldd	r24, Y+4	; 0x04
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	08 f0       	brcs	.+2      	; 0x38c <DIO_enuSetPinDirection+0x2e>
 38a:	c9 c0       	rjmp	.+402    	; 0x51e <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_U8PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch(Copy_u8PortID)
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	3e 83       	std	Y+6, r19	; 0x06
 394:	2d 83       	std	Y+5, r18	; 0x05
 396:	6d 81       	ldd	r22, Y+5	; 0x05
 398:	7e 81       	ldd	r23, Y+6	; 0x06
 39a:	61 30       	cpi	r22, 0x01	; 1
 39c:	71 05       	cpc	r23, r1
 39e:	09 f4       	brne	.+2      	; 0x3a2 <DIO_enuSetPinDirection+0x44>
 3a0:	41 c0       	rjmp	.+130    	; 0x424 <DIO_enuSetPinDirection+0xc6>
 3a2:	8d 81       	ldd	r24, Y+5	; 0x05
 3a4:	9e 81       	ldd	r25, Y+6	; 0x06
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	91 05       	cpc	r25, r1
 3aa:	34 f4       	brge	.+12     	; 0x3b8 <DIO_enuSetPinDirection+0x5a>
 3ac:	2d 81       	ldd	r18, Y+5	; 0x05
 3ae:	3e 81       	ldd	r19, Y+6	; 0x06
 3b0:	21 15       	cp	r18, r1
 3b2:	31 05       	cpc	r19, r1
 3b4:	71 f0       	breq	.+28     	; 0x3d2 <DIO_enuSetPinDirection+0x74>
 3b6:	b0 c0       	rjmp	.+352    	; 0x518 <DIO_enuSetPinDirection+0x1ba>
 3b8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ba:	7e 81       	ldd	r23, Y+6	; 0x06
 3bc:	62 30       	cpi	r22, 0x02	; 2
 3be:	71 05       	cpc	r23, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_enuSetPinDirection+0x66>
 3c2:	59 c0       	rjmp	.+178    	; 0x476 <DIO_enuSetPinDirection+0x118>
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	91 05       	cpc	r25, r1
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_enuSetPinDirection+0x72>
 3ce:	7c c0       	rjmp	.+248    	; 0x4c8 <DIO_enuSetPinDirection+0x16a>
 3d0:	a3 c0       	rjmp	.+326    	; 0x518 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_U8PORTA:
			DDRA &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
 3d2:	aa e3       	ldi	r26, 0x3A	; 58
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	ea e3       	ldi	r30, 0x3A	; 58
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_enuSetPinDirection+0x90>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_enuSetPinDirection+0x8c>
 3f2:	80 95       	com	r24
 3f4:	84 23       	and	r24, r20
 3f6:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
 3f8:	aa e3       	ldi	r26, 0x3A	; 58
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	ea e3       	ldi	r30, 0x3A	; 58
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	b9 01       	movw	r22, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_enuSetPinDirection+0xba>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_enuSetPinDirection+0xb6>
 41c:	cb 01       	movw	r24, r22
 41e:	84 2b       	or	r24, r20
 420:	8c 93       	st	X, r24
 422:	7a c0       	rjmp	.+244    	; 0x518 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTB:
			DDRB &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
 424:	a7 e3       	ldi	r26, 0x37	; 55
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e7 e3       	ldi	r30, 0x37	; 55
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	48 2f       	mov	r20, r24
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_enuSetPinDirection+0xe2>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	2a 95       	dec	r18
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_enuSetPinDirection+0xde>
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
 44a:	a7 e3       	ldi	r26, 0x37	; 55
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	e7 e3       	ldi	r30, 0x37	; 55
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	88 2f       	mov	r24, r24
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_enuSetPinDirection+0x10c>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_enuSetPinDirection+0x108>
 46e:	cb 01       	movw	r24, r22
 470:	84 2b       	or	r24, r20
 472:	8c 93       	st	X, r24
 474:	51 c0       	rjmp	.+162    	; 0x518 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTC:
			DDRC &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
 476:	a4 e3       	ldi	r26, 0x34	; 52
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	e4 e3       	ldi	r30, 0x34	; 52
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_enuSetPinDirection+0x134>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	2a 95       	dec	r18
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_enuSetPinDirection+0x130>
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
 49c:	a4 e3       	ldi	r26, 0x34	; 52
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e4 e3       	ldi	r30, 0x34	; 52
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	48 2f       	mov	r20, r24
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	28 2f       	mov	r18, r24
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	88 2f       	mov	r24, r24
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	b9 01       	movw	r22, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_enuSetPinDirection+0x15e>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	8a 95       	dec	r24
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_enuSetPinDirection+0x15a>
 4c0:	cb 01       	movw	r24, r22
 4c2:	84 2b       	or	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	28 c0       	rjmp	.+80     	; 0x518 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_U8PORTD:
			DDRD &= ~(DIO_U8MASKINGBIT << Copy_u8PinID);
 4c8:	a1 e3       	ldi	r26, 0x31	; 49
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e1 e3       	ldi	r30, 0x31	; 49
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_enuSetPinDirection+0x186>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_enuSetPinDirection+0x182>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
 4ee:	a1 e3       	ldi	r26, 0x31	; 49
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e1 e3       	ldi	r30, 0x31	; 49
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8c 81       	ldd	r24, Y+4	; 0x04
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_enuSetPinDirection+0x1b0>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_enuSetPinDirection+0x1ac>
 512:	cb 01       	movw	r24, r22
 514:	84 2b       	or	r24, r20
 516:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	89 83       	std	Y+1, r24	; 0x01
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 522:	89 81       	ldd	r24, Y+1	; 0x01
}
 524:	26 96       	adiw	r28, 0x06	; 6
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
 530:	cf 91       	pop	r28
 532:	df 91       	pop	r29
 534:	08 95       	ret

00000536 <DIO_enuSetPinValue>:
ES_T DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 536:	df 93       	push	r29
 538:	cf 93       	push	r28
 53a:	00 d0       	rcall	.+0      	; 0x53c <DIO_enuSetPinValue+0x6>
 53c:	00 d0       	rcall	.+0      	; 0x53e <DIO_enuSetPinValue+0x8>
 53e:	00 d0       	rcall	.+0      	; 0x540 <DIO_enuSetPinValue+0xa>
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	8a 83       	std	Y+2, r24	; 0x02
 546:	6b 83       	std	Y+3, r22	; 0x03
 548:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorstate = ES_NOK;
 54a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_U8PORTD &&
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	84 30       	cpi	r24, 0x04	; 4
 550:	08 f0       	brcs	.+2      	; 0x554 <DIO_enuSetPinValue+0x1e>
 552:	d1 c0       	rjmp	.+418    	; 0x6f6 <DIO_enuSetPinValue+0x1c0>
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	88 30       	cpi	r24, 0x08	; 8
 558:	08 f0       	brcs	.+2      	; 0x55c <DIO_enuSetPinValue+0x26>
 55a:	cd c0       	rjmp	.+410    	; 0x6f6 <DIO_enuSetPinValue+0x1c0>
 55c:	8c 81       	ldd	r24, Y+4	; 0x04
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	08 f0       	brcs	.+2      	; 0x564 <DIO_enuSetPinValue+0x2e>
 562:	c9 c0       	rjmp	.+402    	; 0x6f6 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_U8PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	3e 83       	std	Y+6, r19	; 0x06
 56c:	2d 83       	std	Y+5, r18	; 0x05
 56e:	6d 81       	ldd	r22, Y+5	; 0x05
 570:	7e 81       	ldd	r23, Y+6	; 0x06
 572:	61 30       	cpi	r22, 0x01	; 1
 574:	71 05       	cpc	r23, r1
 576:	09 f4       	brne	.+2      	; 0x57a <DIO_enuSetPinValue+0x44>
 578:	41 c0       	rjmp	.+130    	; 0x5fc <DIO_enuSetPinValue+0xc6>
 57a:	8d 81       	ldd	r24, Y+5	; 0x05
 57c:	9e 81       	ldd	r25, Y+6	; 0x06
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	91 05       	cpc	r25, r1
 582:	34 f4       	brge	.+12     	; 0x590 <DIO_enuSetPinValue+0x5a>
 584:	2d 81       	ldd	r18, Y+5	; 0x05
 586:	3e 81       	ldd	r19, Y+6	; 0x06
 588:	21 15       	cp	r18, r1
 58a:	31 05       	cpc	r19, r1
 58c:	71 f0       	breq	.+28     	; 0x5aa <DIO_enuSetPinValue+0x74>
 58e:	b0 c0       	rjmp	.+352    	; 0x6f0 <DIO_enuSetPinValue+0x1ba>
 590:	6d 81       	ldd	r22, Y+5	; 0x05
 592:	7e 81       	ldd	r23, Y+6	; 0x06
 594:	62 30       	cpi	r22, 0x02	; 2
 596:	71 05       	cpc	r23, r1
 598:	09 f4       	brne	.+2      	; 0x59c <DIO_enuSetPinValue+0x66>
 59a:	59 c0       	rjmp	.+178    	; 0x64e <DIO_enuSetPinValue+0x118>
 59c:	8d 81       	ldd	r24, Y+5	; 0x05
 59e:	9e 81       	ldd	r25, Y+6	; 0x06
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	91 05       	cpc	r25, r1
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <DIO_enuSetPinValue+0x72>
 5a6:	7c c0       	rjmp	.+248    	; 0x6a0 <DIO_enuSetPinValue+0x16a>
 5a8:	a3 c0       	rjmp	.+326    	; 0x6f0 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_U8PORTA:
			PORTA &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
 5aa:	ab e3       	ldi	r26, 0x3B	; 59
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	eb e3       	ldi	r30, 0x3B	; 59
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	48 2f       	mov	r20, r24
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_enuSetPinValue+0x90>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	2a 95       	dec	r18
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_enuSetPinValue+0x8c>
 5ca:	80 95       	com	r24
 5cc:	84 23       	and	r24, r20
 5ce:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 5d0:	ab e3       	ldi	r26, 0x3B	; 59
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	eb e3       	ldi	r30, 0x3B	; 59
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	48 2f       	mov	r20, r24
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	88 2f       	mov	r24, r24
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	b9 01       	movw	r22, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_enuSetPinValue+0xba>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	8a 95       	dec	r24
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_enuSetPinValue+0xb6>
 5f4:	cb 01       	movw	r24, r22
 5f6:	84 2b       	or	r24, r20
 5f8:	8c 93       	st	X, r24
 5fa:	7a c0       	rjmp	.+244    	; 0x6f0 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTB:
			PORTB &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
 5fc:	a8 e3       	ldi	r26, 0x38	; 56
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e8 e3       	ldi	r30, 0x38	; 56
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	48 2f       	mov	r20, r24
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_enuSetPinValue+0xe2>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	2a 95       	dec	r18
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_enuSetPinValue+0xde>
 61c:	80 95       	com	r24
 61e:	84 23       	and	r24, r20
 620:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 622:	a8 e3       	ldi	r26, 0x38	; 56
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	e8 e3       	ldi	r30, 0x38	; 56
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	48 2f       	mov	r20, r24
 62e:	8c 81       	ldd	r24, Y+4	; 0x04
 630:	28 2f       	mov	r18, r24
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	88 2f       	mov	r24, r24
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	b9 01       	movw	r22, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_enuSetPinValue+0x10c>
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	8a 95       	dec	r24
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_enuSetPinValue+0x108>
 646:	cb 01       	movw	r24, r22
 648:	84 2b       	or	r24, r20
 64a:	8c 93       	st	X, r24
 64c:	51 c0       	rjmp	.+162    	; 0x6f0 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTC:
			PORTC &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
 64e:	a5 e3       	ldi	r26, 0x35	; 53
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	e5 e3       	ldi	r30, 0x35	; 53
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	48 2f       	mov	r20, r24
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_enuSetPinValue+0x134>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	2a 95       	dec	r18
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_enuSetPinValue+0x130>
 66e:	80 95       	com	r24
 670:	84 23       	and	r24, r20
 672:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 674:	a5 e3       	ldi	r26, 0x35	; 53
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	e5 e3       	ldi	r30, 0x35	; 53
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	48 2f       	mov	r20, r24
 680:	8c 81       	ldd	r24, Y+4	; 0x04
 682:	28 2f       	mov	r18, r24
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	b9 01       	movw	r22, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_enuSetPinValue+0x15e>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	8a 95       	dec	r24
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_enuSetPinValue+0x15a>
 698:	cb 01       	movw	r24, r22
 69a:	84 2b       	or	r24, r20
 69c:	8c 93       	st	X, r24
 69e:	28 c0       	rjmp	.+80     	; 0x6f0 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_U8PORTD:
			PORTD &= ~(DIO_U8MASKINGBIT<<Copy_u8PinID);
 6a0:	a2 e3       	ldi	r26, 0x32	; 50
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	e2 e3       	ldi	r30, 0x32	; 50
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	48 2f       	mov	r20, r24
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	28 2f       	mov	r18, r24
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_enuSetPinValue+0x186>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	2a 95       	dec	r18
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_enuSetPinValue+0x182>
 6c0:	80 95       	com	r24
 6c2:	84 23       	and	r24, r20
 6c4:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 6c6:	a2 e3       	ldi	r26, 0x32	; 50
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e2 e3       	ldi	r30, 0x32	; 50
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	48 2f       	mov	r20, r24
 6d2:	8c 81       	ldd	r24, Y+4	; 0x04
 6d4:	28 2f       	mov	r18, r24
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	b9 01       	movw	r22, r18
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_enuSetPinValue+0x1b0>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	8a 95       	dec	r24
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_enuSetPinValue+0x1ac>
 6ea:	cb 01       	movw	r24, r22
 6ec:	84 2b       	or	r24, r20
 6ee:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUTOFRANGE;
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 6fc:	26 96       	adiw	r28, 0x06	; 6
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <DIO_enuToggelPinValue>:
ES_T DIO_enuToggelPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	00 d0       	rcall	.+0      	; 0x714 <DIO_enuToggelPinValue+0x6>
 714:	00 d0       	rcall	.+0      	; 0x716 <DIO_enuToggelPinValue+0x8>
 716:	0f 92       	push	r0
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	8a 83       	std	Y+2, r24	; 0x02
 71e:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
 720:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_U8PORTD &&
 722:	8a 81       	ldd	r24, Y+2	; 0x02
 724:	84 30       	cpi	r24, 0x04	; 4
 726:	08 f0       	brcs	.+2      	; 0x72a <DIO_enuToggelPinValue+0x1c>
 728:	75 c0       	rjmp	.+234    	; 0x814 <DIO_enuToggelPinValue+0x106>
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	88 30       	cpi	r24, 0x08	; 8
 72e:	08 f0       	brcs	.+2      	; 0x732 <DIO_enuToggelPinValue+0x24>
 730:	71 c0       	rjmp	.+226    	; 0x814 <DIO_enuToggelPinValue+0x106>
			Copy_u8PinID <= DIO_U8PIN7)
	{
		switch (Copy_u8PortID)
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	3d 83       	std	Y+5, r19	; 0x05
 73a:	2c 83       	std	Y+4, r18	; 0x04
 73c:	8c 81       	ldd	r24, Y+4	; 0x04
 73e:	9d 81       	ldd	r25, Y+5	; 0x05
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	91 05       	cpc	r25, r1
 744:	49 f1       	breq	.+82     	; 0x798 <DIO_enuToggelPinValue+0x8a>
 746:	2c 81       	ldd	r18, Y+4	; 0x04
 748:	3d 81       	ldd	r19, Y+5	; 0x05
 74a:	22 30       	cpi	r18, 0x02	; 2
 74c:	31 05       	cpc	r19, r1
 74e:	2c f4       	brge	.+10     	; 0x75a <DIO_enuToggelPinValue+0x4c>
 750:	8c 81       	ldd	r24, Y+4	; 0x04
 752:	9d 81       	ldd	r25, Y+5	; 0x05
 754:	00 97       	sbiw	r24, 0x00	; 0
 756:	61 f0       	breq	.+24     	; 0x770 <DIO_enuToggelPinValue+0x62>
 758:	5a c0       	rjmp	.+180    	; 0x80e <DIO_enuToggelPinValue+0x100>
 75a:	2c 81       	ldd	r18, Y+4	; 0x04
 75c:	3d 81       	ldd	r19, Y+5	; 0x05
 75e:	22 30       	cpi	r18, 0x02	; 2
 760:	31 05       	cpc	r19, r1
 762:	71 f1       	breq	.+92     	; 0x7c0 <DIO_enuToggelPinValue+0xb2>
 764:	8c 81       	ldd	r24, Y+4	; 0x04
 766:	9d 81       	ldd	r25, Y+5	; 0x05
 768:	83 30       	cpi	r24, 0x03	; 3
 76a:	91 05       	cpc	r25, r1
 76c:	e9 f1       	breq	.+122    	; 0x7e8 <DIO_enuToggelPinValue+0xda>
 76e:	4f c0       	rjmp	.+158    	; 0x80e <DIO_enuToggelPinValue+0x100>
		{
		case DIO_U8PORTA:
			PORTA ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
 770:	ab e3       	ldi	r26, 0x3B	; 59
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	eb e3       	ldi	r30, 0x3B	; 59
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	48 2f       	mov	r20, r24
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	28 2f       	mov	r18, r24
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	02 2e       	mov	r0, r18
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_enuToggelPinValue+0x80>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	0a 94       	dec	r0
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_enuToggelPinValue+0x7c>
 792:	84 27       	eor	r24, r20
 794:	8c 93       	st	X, r24
 796:	3b c0       	rjmp	.+118    	; 0x80e <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTB:
			PORTB ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
 798:	a8 e3       	ldi	r26, 0x38	; 56
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	e8 e3       	ldi	r30, 0x38	; 56
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	48 2f       	mov	r20, r24
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 2e       	mov	r0, r18
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_enuToggelPinValue+0xa8>
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	0a 94       	dec	r0
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_enuToggelPinValue+0xa4>
 7ba:	84 27       	eor	r24, r20
 7bc:	8c 93       	st	X, r24
 7be:	27 c0       	rjmp	.+78     	; 0x80e <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTC:
			PORTC ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
 7c0:	a5 e3       	ldi	r26, 0x35	; 53
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	e5 e3       	ldi	r30, 0x35	; 53
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	48 2f       	mov	r20, r24
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	28 2f       	mov	r18, r24
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	02 2e       	mov	r0, r18
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_enuToggelPinValue+0xd0>
 7da:	88 0f       	add	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	0a 94       	dec	r0
 7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_enuToggelPinValue+0xcc>
 7e2:	84 27       	eor	r24, r20
 7e4:	8c 93       	st	X, r24
 7e6:	13 c0       	rjmp	.+38     	; 0x80e <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_U8PORTD:
			PORTD ^= (DIO_U8MASKINGBIT<<Copy_u8PinID);
 7e8:	a2 e3       	ldi	r26, 0x32	; 50
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	e2 e3       	ldi	r30, 0x32	; 50
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	48 2f       	mov	r20, r24
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	28 2f       	mov	r18, r24
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 2e       	mov	r0, r18
 800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_enuToggelPinValue+0xf8>
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	0a 94       	dec	r0
 808:	e2 f7       	brpl	.-8      	; 0x802 <DIO_enuToggelPinValue+0xf4>
 80a:	84 27       	eor	r24, r20
 80c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_enuToggelPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 814:	83 e0       	ldi	r24, 0x03	; 3
 816:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 818:	89 81       	ldd	r24, Y+1	; 0x01
}
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <DIO_enuGetPinValue>:
ES_T DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 * Copy_Pu8Value)
{
 82a:	df 93       	push	r29
 82c:	cf 93       	push	r28
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	27 97       	sbiw	r28, 0x07	; 7
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	de bf       	out	0x3e, r29	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	cd bf       	out	0x3d, r28	; 61
 83e:	8a 83       	std	Y+2, r24	; 0x02
 840:	6b 83       	std	Y+3, r22	; 0x03
 842:	5d 83       	std	Y+5, r21	; 0x05
 844:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
 846:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pu8Value != NULL)
 848:	8c 81       	ldd	r24, Y+4	; 0x04
 84a:	9d 81       	ldd	r25, Y+5	; 0x05
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	09 f4       	brne	.+2      	; 0x852 <DIO_enuGetPinValue+0x28>
 850:	7e c0       	rjmp	.+252    	; 0x94e <__stack+0xef>
	{
		if (Copy_u8PortID <= DIO_U8PORTD &&
 852:	8a 81       	ldd	r24, Y+2	; 0x02
 854:	84 30       	cpi	r24, 0x04	; 4
 856:	08 f0       	brcs	.+2      	; 0x85a <DIO_enuGetPinValue+0x30>
 858:	77 c0       	rjmp	.+238    	; 0x948 <__stack+0xe9>
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	88 30       	cpi	r24, 0x08	; 8
 85e:	08 f0       	brcs	.+2      	; 0x862 <__stack+0x3>
 860:	73 c0       	rjmp	.+230    	; 0x948 <__stack+0xe9>
				Copy_u8PinID <= DIO_U8PIN7)
		{
			switch (Copy_u8PortID)
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	28 2f       	mov	r18, r24
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	3f 83       	std	Y+7, r19	; 0x07
 86a:	2e 83       	std	Y+6, r18	; 0x06
 86c:	4e 81       	ldd	r20, Y+6	; 0x06
 86e:	5f 81       	ldd	r21, Y+7	; 0x07
 870:	41 30       	cpi	r20, 0x01	; 1
 872:	51 05       	cpc	r21, r1
 874:	59 f1       	breq	.+86     	; 0x8cc <__stack+0x6d>
 876:	8e 81       	ldd	r24, Y+6	; 0x06
 878:	9f 81       	ldd	r25, Y+7	; 0x07
 87a:	82 30       	cpi	r24, 0x02	; 2
 87c:	91 05       	cpc	r25, r1
 87e:	34 f4       	brge	.+12     	; 0x88c <__stack+0x2d>
 880:	2e 81       	ldd	r18, Y+6	; 0x06
 882:	3f 81       	ldd	r19, Y+7	; 0x07
 884:	21 15       	cp	r18, r1
 886:	31 05       	cpc	r19, r1
 888:	69 f0       	breq	.+26     	; 0x8a4 <__stack+0x45>
 88a:	5b c0       	rjmp	.+182    	; 0x942 <__stack+0xe3>
 88c:	4e 81       	ldd	r20, Y+6	; 0x06
 88e:	5f 81       	ldd	r21, Y+7	; 0x07
 890:	42 30       	cpi	r20, 0x02	; 2
 892:	51 05       	cpc	r21, r1
 894:	79 f1       	breq	.+94     	; 0x8f4 <__stack+0x95>
 896:	8e 81       	ldd	r24, Y+6	; 0x06
 898:	9f 81       	ldd	r25, Y+7	; 0x07
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	91 05       	cpc	r25, r1
 89e:	09 f4       	brne	.+2      	; 0x8a2 <__stack+0x43>
 8a0:	3d c0       	rjmp	.+122    	; 0x91c <__stack+0xbd>
 8a2:	4f c0       	rjmp	.+158    	; 0x942 <__stack+0xe3>
			{
			case DIO_U8PORTA:
				*Copy_Pu8Value = ((PINA>>Copy_u8PinID) &DIO_U8MASKINGBIT);
 8a4:	e9 e3       	ldi	r30, 0x39	; 57
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	88 2f       	mov	r24, r24
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	a9 01       	movw	r20, r18
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	55 95       	asr	r21
 8ba:	47 95       	ror	r20
 8bc:	8a 95       	dec	r24
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	ca 01       	movw	r24, r20
 8c2:	81 70       	andi	r24, 0x01	; 1
 8c4:	ec 81       	ldd	r30, Y+4	; 0x04
 8c6:	fd 81       	ldd	r31, Y+5	; 0x05
 8c8:	80 83       	st	Z, r24
 8ca:	3b c0       	rjmp	.+118    	; 0x942 <__stack+0xe3>
				break;
			case DIO_U8PORTB:
				*Copy_Pu8Value = ((PINB>>Copy_u8PinID) &DIO_U8MASKINGBIT);
 8cc:	e6 e3       	ldi	r30, 0x36	; 54
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	28 2f       	mov	r18, r24
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	88 2f       	mov	r24, r24
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	a9 01       	movw	r20, r18
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
 8e0:	55 95       	asr	r21
 8e2:	47 95       	ror	r20
 8e4:	8a 95       	dec	r24
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__stack+0x81>
 8e8:	ca 01       	movw	r24, r20
 8ea:	81 70       	andi	r24, 0x01	; 1
 8ec:	ec 81       	ldd	r30, Y+4	; 0x04
 8ee:	fd 81       	ldd	r31, Y+5	; 0x05
 8f0:	80 83       	st	Z, r24
 8f2:	27 c0       	rjmp	.+78     	; 0x942 <__stack+0xe3>
				break;
			case DIO_U8PORTC:
				*Copy_Pu8Value = ((PINC>>Copy_u8PinID) &DIO_U8MASKINGBIT);
 8f4:	e3 e3       	ldi	r30, 0x33	; 51
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	8b 81       	ldd	r24, Y+3	; 0x03
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	a9 01       	movw	r20, r18
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
 908:	55 95       	asr	r21
 90a:	47 95       	ror	r20
 90c:	8a 95       	dec	r24
 90e:	e2 f7       	brpl	.-8      	; 0x908 <__stack+0xa9>
 910:	ca 01       	movw	r24, r20
 912:	81 70       	andi	r24, 0x01	; 1
 914:	ec 81       	ldd	r30, Y+4	; 0x04
 916:	fd 81       	ldd	r31, Y+5	; 0x05
 918:	80 83       	st	Z, r24
 91a:	13 c0       	rjmp	.+38     	; 0x942 <__stack+0xe3>
				break;
			case DIO_U8PORTD:
				*Copy_Pu8Value = ((PIND>>Copy_u8PinID) &DIO_U8MASKINGBIT);
 91c:	e0 e3       	ldi	r30, 0x30	; 48
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	88 2f       	mov	r24, r24
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	a9 01       	movw	r20, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
 930:	55 95       	asr	r21
 932:	47 95       	ror	r20
 934:	8a 95       	dec	r24
 936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0xd1>
 938:	ca 01       	movw	r24, r20
 93a:	81 70       	andi	r24, 0x01	; 1
 93c:	ec 81       	ldd	r30, Y+4	; 0x04
 93e:	fd 81       	ldd	r31, Y+5	; 0x05
 940:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	05 c0       	rjmp	.+10     	; 0x952 <__stack+0xf3>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
 948:	83 e0       	ldi	r24, 0x03	; 3
 94a:	89 83       	std	Y+1, r24	; 0x01
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 94e:	82 e0       	ldi	r24, 0x02	; 2
 950:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 952:	89 81       	ldd	r24, Y+1	; 0x01
}
 954:	27 96       	adiw	r28, 0x07	; 7
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	f8 94       	cli
 95a:	de bf       	out	0x3e, r29	; 62
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	cd bf       	out	0x3d, r28	; 61
 960:	cf 91       	pop	r28
 962:	df 91       	pop	r29
 964:	08 95       	ret

00000966 <main>:
#include "../LIB/errorState.h"
#include "../LIB/stdTypes.h"
#include "../MCAL/DIO/DIO_interface.h"
#include <util/delay.h>
int main(void)
{
 966:	df 93       	push	r29
 968:	cf 93       	push	r28
 96a:	cd b7       	in	r28, 0x3d	; 61
 96c:	de b7       	in	r29, 0x3e	; 62
 96e:	ff cf       	rjmp	.-2      	; 0x96e <main+0x8>

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
